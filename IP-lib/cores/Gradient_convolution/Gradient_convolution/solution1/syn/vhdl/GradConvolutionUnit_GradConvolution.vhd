-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GradConvolutionUnit_GradConvolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_1_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    stream_in_1_TVALID : IN STD_LOGIC;
    stream_in_1_TREADY : OUT STD_LOGIC;
    stream_in_1_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_1_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_1_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_2_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    stream_in_2_TVALID : IN STD_LOGIC;
    stream_in_2_TREADY : OUT STD_LOGIC;
    stream_in_2_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_2_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_2_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    image_w : IN STD_LOGIC_VECTOR (31 downto 0);
    image_h : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GradConvolutionUnit_GradConvolution is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_in_1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln59_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_2_TDATA_blk_n : STD_LOGIC;
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln59_reg_306 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_133 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_reg_144 : STD_LOGIC_VECTOR (30 downto 0);
    signal column_reg_155 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_fu_185_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln59_1_fu_223_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln59_1_reg_310 : STD_LOGIC_VECTOR (30 downto 0);
    signal in_element_int_1_data_V_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal in_element_int_2_data_V_reg_320 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_element_int_user_V_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_element_int_user_V_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_element_int_last_V_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_element_int_last_V_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal column_1_fu_256_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_phi_mux_line_phi_fu_148_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ret_fu_268_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_174_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln60_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln60_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_fu_205_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln59_1_fu_217_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln66_fu_239_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln59_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_fu_268_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_fu_268_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_174_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_174_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_fu_268_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_fu_268_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GradConvolutionUnit_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component GradConvolutionUnit_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_32ns_32ns_64_2_1_U1 : component GradConvolutionUnit_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_174_p0,
        din1 => grp_fu_174_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_174_p2);

    mul_8ns_8ns_16_1_1_U2 : component GradConvolutionUnit_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => ret_fu_268_p0,
        din1 => ret_fu_268_p1,
        dout => ret_fu_268_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    column_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                column_reg_155 <= column_1_fu_256_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                column_reg_155 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_133 <= add_ln59_fu_185_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_133 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    line_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_306 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                line_reg_144 <= select_ln59_1_reg_310;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                line_reg_144 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln59_reg_306 <= icmp_ln59_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_element_int_1_data_V_reg_315 <= stream_in_1_TDATA;
                in_element_int_2_data_V_reg_320 <= stream_in_2_TDATA;
                out_element_int_last_V_reg_330 <= out_element_int_last_V_fu_251_p2;
                out_element_int_user_V_reg_325 <= out_element_int_user_V_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln59_1_reg_310 <= select_ln59_1_fu_223_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln59_fu_200_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln59_fu_200_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln59_fu_200_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln59_1_fu_217_p2 <= std_logic_vector(unsigned(ap_phi_mux_line_phi_fu_148_p4) + unsigned(ap_const_lv31_1));
    add_ln59_fu_185_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_133) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_in_1_TVALID, stream_in_2_TVALID, stream_out_TREADY, ap_enable_reg_pp0_iter0, icmp_ln59_fu_200_p2, ap_enable_reg_pp0_iter1, icmp_ln59_reg_306)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln59_reg_306 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (stream_out_TREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (stream_in_2_TVALID = ap_const_logic_0)) or ((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (stream_in_1_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_in_1_TVALID, stream_in_2_TVALID, stream_out_TREADY, ap_enable_reg_pp0_iter0, icmp_ln59_fu_200_p2, ap_enable_reg_pp0_iter1, icmp_ln59_reg_306, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln59_reg_306 = ap_const_lv1_0) and (stream_out_TREADY = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (stream_in_2_TVALID = ap_const_logic_0)) or ((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (stream_in_1_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_in_1_TVALID, stream_in_2_TVALID, stream_out_TREADY, ap_enable_reg_pp0_iter0, icmp_ln59_fu_200_p2, ap_enable_reg_pp0_iter1, icmp_ln59_reg_306, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln59_reg_306 = ap_const_lv1_0) and (stream_out_TREADY = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (stream_in_2_TVALID = ap_const_logic_0)) or ((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (stream_in_1_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(stream_in_1_TVALID, stream_in_2_TVALID, icmp_ln59_fu_200_p2)
    begin
                ap_block_state3_pp0_stage0_iter0 <= (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (stream_in_2_TVALID = ap_const_logic_0)) or ((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (stream_in_1_TVALID = ap_const_logic_0)));
    end process;


    ap_block_state4_io_assign_proc : process(stream_out_TREADY, icmp_ln59_reg_306)
    begin
                ap_block_state4_io <= ((icmp_ln59_reg_306 = ap_const_lv1_0) and (stream_out_TREADY = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(stream_out_TREADY, icmp_ln59_reg_306)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln59_reg_306 = ap_const_lv1_0) and (stream_out_TREADY = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln59_fu_200_p2)
    begin
        if ((icmp_ln59_fu_200_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_line_phi_fu_148_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln59_reg_306, line_reg_144, select_ln59_1_reg_310)
    begin
        if (((icmp_ln59_reg_306 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_line_phi_fu_148_p4 <= select_ln59_1_reg_310;
        else 
            ap_phi_mux_line_phi_fu_148_p4 <= line_reg_144;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    column_1_fu_256_p2 <= std_logic_vector(unsigned(select_ln59_fu_205_p3) + unsigned(ap_const_lv31_1));
    grp_fu_174_p0 <= grp_fu_174_p00(32 - 1 downto 0);
    grp_fu_174_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_h),64));
    grp_fu_174_p1 <= grp_fu_174_p10(32 - 1 downto 0);
    grp_fu_174_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_w),64));
    icmp_ln59_fu_200_p2 <= "1" when (indvar_flatten_reg_133 = grp_fu_174_p2) else "0";
    icmp_ln60_fu_195_p2 <= "1" when (signed(zext_ln60_fu_191_p1) < signed(image_w)) else "0";
    or_ln66_fu_239_p2 <= (select_ln59_fu_205_p3 or select_ln59_1_fu_223_p3);
    out_element_int_last_V_fu_251_p2 <= "1" when (zext_ln59_fu_213_p1 = sub_fu_180_p2) else "0";
    out_element_int_user_V_fu_245_p2 <= "1" when (or_ln66_fu_239_p2 = ap_const_lv31_0) else "0";
    ret_fu_268_p0 <= ret_fu_268_p00(8 - 1 downto 0);
    ret_fu_268_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_element_int_2_data_V_reg_320),16));
    ret_fu_268_p1 <= ret_fu_268_p10(8 - 1 downto 0);
    ret_fu_268_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_element_int_1_data_V_reg_315),16));
    select_ln59_1_fu_223_p3 <= 
        ap_phi_mux_line_phi_fu_148_p4 when (icmp_ln60_fu_195_p2(0) = '1') else 
        add_ln59_1_fu_217_p2;
    select_ln59_fu_205_p3 <= 
        column_reg_155 when (icmp_ln60_fu_195_p2(0) = '1') else 
        ap_const_lv31_0;

    stream_in_1_TDATA_blk_n_assign_proc : process(stream_in_1_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln59_fu_200_p2)
    begin
        if (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_1_TDATA_blk_n <= stream_in_1_TVALID;
        else 
            stream_in_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_1_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln59_fu_200_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_1_TREADY <= ap_const_logic_1;
        else 
            stream_in_1_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_2_TDATA_blk_n_assign_proc : process(stream_in_2_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln59_fu_200_p2)
    begin
        if (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_2_TDATA_blk_n <= stream_in_2_TVALID;
        else 
            stream_in_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_2_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln59_fu_200_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln59_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_2_TREADY <= ap_const_logic_1;
        else 
            stream_in_2_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_TDATA <= ret_fu_268_p2;

    stream_out_TDATA_blk_n_assign_proc : process(stream_out_TREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln59_reg_306)
    begin
        if (((icmp_ln59_reg_306 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_out_TDATA_blk_n <= stream_out_TREADY;
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TKEEP <= ap_const_lv2_0;
    stream_out_TLAST <= out_element_int_last_V_reg_330;
    stream_out_TSTRB <= ap_const_lv2_0;
    stream_out_TUSER <= out_element_int_user_V_reg_325;

    stream_out_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln59_reg_306, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln59_reg_306 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_out_TVALID <= ap_const_logic_1;
        else 
            stream_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    sub_fu_180_p2 <= std_logic_vector(unsigned(image_w) + unsigned(ap_const_lv32_FFFFFFFF));
    zext_ln59_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln59_fu_205_p3),32));
    zext_ln60_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_reg_155),32));
end behav;
