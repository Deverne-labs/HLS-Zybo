// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GradConvolutionUnit_GradConvolution (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_1_TDATA,
        stream_in_1_TVALID,
        stream_in_1_TREADY,
        stream_in_1_TKEEP,
        stream_in_1_TSTRB,
        stream_in_1_TUSER,
        stream_in_1_TLAST,
        stream_in_2_TDATA,
        stream_in_2_TVALID,
        stream_in_2_TREADY,
        stream_in_2_TKEEP,
        stream_in_2_TSTRB,
        stream_in_2_TUSER,
        stream_in_2_TLAST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        image_w,
        image_h
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] stream_in_1_TDATA;
input   stream_in_1_TVALID;
output   stream_in_1_TREADY;
input  [0:0] stream_in_1_TKEEP;
input  [0:0] stream_in_1_TSTRB;
input  [0:0] stream_in_1_TUSER;
input  [0:0] stream_in_1_TLAST;
input  [7:0] stream_in_2_TDATA;
input   stream_in_2_TVALID;
output   stream_in_2_TREADY;
input  [0:0] stream_in_2_TKEEP;
input  [0:0] stream_in_2_TSTRB;
input  [0:0] stream_in_2_TUSER;
input  [0:0] stream_in_2_TLAST;
output  [15:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [1:0] stream_out_TKEEP;
output  [1:0] stream_out_TSTRB;
output  [0:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
input  [31:0] image_w;
input  [31:0] image_h;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_1_TREADY;
reg stream_in_2_TREADY;
reg stream_out_TVALID;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_in_1_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln59_fu_200_p2;
reg    stream_in_2_TDATA_blk_n;
reg    stream_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln59_reg_306;
reg   [63:0] indvar_flatten_reg_133;
reg   [30:0] line_reg_144;
reg   [30:0] column_reg_155;
wire   [31:0] sub_fu_180_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_174_p2;
wire   [63:0] add_ln59_fu_185_p2;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] select_ln59_1_fu_223_p3;
reg   [30:0] select_ln59_1_reg_310;
reg   [7:0] in_element_int_1_data_V_reg_315;
reg   [7:0] in_element_int_2_data_V_reg_320;
wire   [0:0] out_element_int_user_V_fu_245_p2;
reg   [0:0] out_element_int_user_V_reg_325;
wire   [0:0] out_element_int_last_V_fu_251_p2;
reg   [0:0] out_element_int_last_V_reg_330;
wire   [30:0] column_1_fu_256_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [30:0] ap_phi_mux_line_phi_fu_148_p4;
wire   [15:0] ret_fu_268_p2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_174_p0;
wire   [31:0] grp_fu_174_p1;
wire   [31:0] zext_ln60_fu_191_p1;
wire   [0:0] icmp_ln60_fu_195_p2;
wire   [30:0] select_ln59_fu_205_p3;
wire   [30:0] add_ln59_1_fu_217_p2;
wire   [30:0] or_ln66_fu_239_p2;
wire   [31:0] zext_ln59_fu_213_p1;
wire   [7:0] ret_fu_268_p0;
wire   [7:0] ret_fu_268_p1;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_174_p00;
wire   [63:0] grp_fu_174_p10;
wire   [15:0] ret_fu_268_p00;
wire   [15:0] ret_fu_268_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

GradConvolutionUnit_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_174_p0),
    .din1(grp_fu_174_p1),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

GradConvolutionUnit_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U2(
    .din0(ret_fu_268_p0),
    .din1(ret_fu_268_p1),
    .dout(ret_fu_268_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        column_reg_155 <= column_1_fu_256_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        column_reg_155 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_133 <= add_ln59_fu_185_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_133 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_306 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_reg_144 <= select_ln59_1_reg_310;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        line_reg_144 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln59_reg_306 <= icmp_ln59_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_element_int_1_data_V_reg_315 <= stream_in_1_TDATA;
        in_element_int_2_data_V_reg_320 <= stream_in_2_TDATA;
        out_element_int_last_V_reg_330 <= out_element_int_last_V_fu_251_p2;
        out_element_int_user_V_reg_325 <= out_element_int_user_V_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln59_1_reg_310 <= select_ln59_1_fu_223_p3;
    end
end

always @ (*) begin
    if ((icmp_ln59_fu_200_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_306 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_line_phi_fu_148_p4 = select_ln59_1_reg_310;
    end else begin
        ap_phi_mux_line_phi_fu_148_p4 = line_reg_144;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_1_TDATA_blk_n = stream_in_1_TVALID;
    end else begin
        stream_in_1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln59_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_1_TREADY = 1'b1;
    end else begin
        stream_in_1_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_2_TDATA_blk_n = stream_in_2_TVALID;
    end else begin
        stream_in_2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln59_fu_200_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_2_TREADY = 1'b1;
    end else begin
        stream_in_2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_306 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_TDATA_blk_n = stream_out_TREADY;
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_306 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_TVALID = 1'b1;
    end else begin
        stream_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln59_fu_200_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln59_fu_200_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln59_1_fu_217_p2 = (ap_phi_mux_line_phi_fu_148_p4 + 31'd1);

assign add_ln59_fu_185_p2 = (indvar_flatten_reg_133 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln59_reg_306 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (stream_out_TREADY == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln59_fu_200_p2 == 1'd0) & (stream_in_2_TVALID == 1'b0)) | ((icmp_ln59_fu_200_p2 == 1'd0) & (stream_in_1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln59_reg_306 == 1'd0) & (stream_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln59_fu_200_p2 == 1'd0) & (stream_in_2_TVALID == 1'b0)) | ((icmp_ln59_fu_200_p2 == 1'd0) & (stream_in_1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln59_reg_306 == 1'd0) & (stream_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln59_fu_200_p2 == 1'd0) & (stream_in_2_TVALID == 1'b0)) | ((icmp_ln59_fu_200_p2 == 1'd0) & (stream_in_1_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = (((icmp_ln59_fu_200_p2 == 1'd0) & (stream_in_2_TVALID == 1'b0)) | ((icmp_ln59_fu_200_p2 == 1'd0) & (stream_in_1_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln59_reg_306 == 1'd0) & (stream_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln59_reg_306 == 1'd0) & (stream_out_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign column_1_fu_256_p2 = (select_ln59_fu_205_p3 + 31'd1);

assign grp_fu_174_p0 = grp_fu_174_p00;

assign grp_fu_174_p00 = image_h;

assign grp_fu_174_p1 = grp_fu_174_p10;

assign grp_fu_174_p10 = image_w;

assign icmp_ln59_fu_200_p2 = ((indvar_flatten_reg_133 == grp_fu_174_p2) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_195_p2 = (($signed(zext_ln60_fu_191_p1) < $signed(image_w)) ? 1'b1 : 1'b0);

assign or_ln66_fu_239_p2 = (select_ln59_fu_205_p3 | select_ln59_1_fu_223_p3);

assign out_element_int_last_V_fu_251_p2 = ((zext_ln59_fu_213_p1 == sub_fu_180_p2) ? 1'b1 : 1'b0);

assign out_element_int_user_V_fu_245_p2 = ((or_ln66_fu_239_p2 == 31'd0) ? 1'b1 : 1'b0);

assign ret_fu_268_p0 = ret_fu_268_p00;

assign ret_fu_268_p00 = in_element_int_2_data_V_reg_320;

assign ret_fu_268_p1 = ret_fu_268_p10;

assign ret_fu_268_p10 = in_element_int_1_data_V_reg_315;

assign select_ln59_1_fu_223_p3 = ((icmp_ln60_fu_195_p2[0:0] == 1'b1) ? ap_phi_mux_line_phi_fu_148_p4 : add_ln59_1_fu_217_p2);

assign select_ln59_fu_205_p3 = ((icmp_ln60_fu_195_p2[0:0] == 1'b1) ? column_reg_155 : 31'd0);

assign stream_out_TDATA = ret_fu_268_p2;

assign stream_out_TKEEP = 2'd0;

assign stream_out_TLAST = out_element_int_last_V_reg_330;

assign stream_out_TSTRB = 2'd0;

assign stream_out_TUSER = out_element_int_user_V_reg_325;

assign sub_fu_180_p2 = ($signed(image_w) + $signed(32'd4294967295));

assign zext_ln59_fu_213_p1 = select_ln59_fu_205_p3;

assign zext_ln60_fu_191_p1 = column_reg_155;

endmodule //GradConvolutionUnit_GradConvolution
