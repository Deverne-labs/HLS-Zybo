-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GradientGenUnit_GradientGen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_GX_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_out_GX_TVALID : OUT STD_LOGIC;
    stream_out_GX_TREADY : IN STD_LOGIC;
    stream_out_GX_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_GX_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_GX_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_GX_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_GY_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_out_GY_TVALID : OUT STD_LOGIC;
    stream_out_GY_TREADY : IN STD_LOGIC;
    stream_out_GY_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_GY_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_GY_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_GY_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    image_w : IN STD_LOGIC_VECTOR (31 downto 0);
    image_h : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GradientGenUnit_GradientGen is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal line_buffer_V_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_1_ce0 : STD_LOGIC;
    signal line_buffer_V_1_we0 : STD_LOGIC;
    signal line_buffer_V_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_1_ce1 : STD_LOGIC;
    signal line_buffer_V_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_V_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_0_ce0 : STD_LOGIC;
    signal line_buffer_V_0_we0 : STD_LOGIC;
    signal line_buffer_V_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_2_ce0 : STD_LOGIC;
    signal line_buffer_V_2_we0 : STD_LOGIC;
    signal line_buffer_V_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_2_ce1 : STD_LOGIC;
    signal line_buffer_V_2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sliding_window_V_0_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal sliding_window_V_1_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal sliding_window_V_1_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal sliding_window_V_2_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln32_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_GX_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal and_ln86_1_reg_1187 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_reg_1187_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_GY_TDATA_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_247 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_reg_258 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_reg_269 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add18_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln32_fu_321_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op68_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_reg_1146 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_5_fu_509_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln33_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_reg_1155 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln36_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_element_data_V_reg_1164 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_V_1_addr_reg_1169 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_2_addr_reg_1175 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln78_1_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1181_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_reg_1187_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_reg_1187_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_reg_1187_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_reg_1187_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_reg_1187_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_reg_1187_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_reg_1187_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_1_reg_1187_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_fu_612_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln691_fu_666_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln691_reg_1196 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln691_1_fu_680_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln691_1_reg_1201 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_1216 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_reg_1226 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_reg_1226_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln323_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_721_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1240 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln327_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_reg_1246 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_1252_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_1_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_reg_1263 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_reg_1263_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln323_1_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_1_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_2_fu_772_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_2_reg_1277 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln327_1_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_1_reg_1283 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_1_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_1_reg_1289 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_1_reg_1289_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_1_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_1_reg_1295 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_814_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_1300 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln337_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln337_reg_1305 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln327_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln327_reg_1310 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln327_fu_897_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln327_reg_1315 : STD_LOGIC_VECTOR (7 downto 0);
    signal sh_amt_3_fu_923_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_3_reg_1320 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln337_1_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln337_1_reg_1325 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln327_1_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln327_1_reg_1330 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln327_1_fu_1006_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln327_1_reg_1335 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_280 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_291_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_1_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_342_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal slt53_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev54_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln33_1_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_1_fu_400_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln33_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt59_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev60_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev52_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_437_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp46_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_mid1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt61_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev62_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_mid1_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_3_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_410_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln32_2_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln36_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln36_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_1_fu_429_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_544_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_2_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_3_fu_466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_1_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_2_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_1_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln86_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln86_2_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_4_fu_497_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln691_1_fu_662_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln691_fu_658_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln691_3_fu_676_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln691_2_fu_672_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_697_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln368_fu_707_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln311_fu_711_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_748_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln368_1_fu_758_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln311_1_fu_762_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln315_fu_796_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_fu_802_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_3_fu_819_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln331_fu_835_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln320_fu_810_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln331_fu_838_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln331_fu_842_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal xor_ln327_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_1_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln331_fu_848_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln330_fu_872_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln323_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln327_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln320_fu_799_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln323_fu_880_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln315_1_fu_905_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_911_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_5_fu_928_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln331_1_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln320_1_fu_919_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln331_1_fu_947_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln331_1_fu_951_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal xor_ln327_1_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_2_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_3_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln331_1_fu_957_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln330_1_fu_981_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln323_1_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln327_1_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln320_1_fu_908_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln323_1_fu_989_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln328_fu_1014_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln326_fu_1017_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln339_fu_1020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln337_fu_1026_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln329_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln337_fu_1030_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln328_1_fu_1048_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln326_1_fu_1051_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln339_1_fu_1054_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln337_1_fu_1060_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln329_1_fu_1071_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln337_1_fu_1064_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_stream_element_GX_data_V_fu_1041_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_stream_element_GY_data_V_fu_1075_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_291_ce : STD_LOGIC;
    signal grp_fu_294_ce : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_71 : BOOLEAN;
    signal ap_enable_state4_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_95 : BOOLEAN;
    signal ap_enable_state5_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_98 : BOOLEAN;
    signal ap_enable_operation_73 : BOOLEAN;
    signal ap_enable_operation_97 : BOOLEAN;
    signal ap_enable_operation_99 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_315_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_315_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component GradientGenUnit_sitodp_32s_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component GradientGenUnit_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component GradientGenUnit_GradientGen_line_buffer_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component GradientGenUnit_GradientGen_line_buffer_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    line_buffer_V_1_U : component GradientGenUnit_GradientGen_line_buffer_V_1
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_1_address0,
        ce0 => line_buffer_V_1_ce0,
        we0 => line_buffer_V_1_we0,
        d0 => line_buffer_V_2_q1,
        address1 => line_buffer_V_1_address1,
        ce1 => line_buffer_V_1_ce1,
        q1 => line_buffer_V_1_q1);

    line_buffer_V_0_U : component GradientGenUnit_GradientGen_line_buffer_V_0
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_0_address0,
        ce0 => line_buffer_V_0_ce0,
        we0 => line_buffer_V_0_we0,
        d0 => line_buffer_V_1_q1);

    line_buffer_V_2_U : component GradientGenUnit_GradientGen_line_buffer_V_1
    generic map (
        DataWidth => 8,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_2_address0,
        ce0 => line_buffer_V_2_ce0,
        we0 => line_buffer_V_2_we0,
        d0 => ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4,
        address1 => line_buffer_V_2_address1,
        ce1 => line_buffer_V_2_ce1,
        q1 => line_buffer_V_2_q1);

    sitodp_32s_64_6_no_dsp_1_U1 : component GradientGenUnit_sitodp_32s_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_291_p0,
        ce => grp_fu_291_ce,
        dout => grp_fu_291_p1);

    sitodp_32s_64_6_no_dsp_1_U2 : component GradientGenUnit_sitodp_32s_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_294_p0,
        ce => grp_fu_294_ce,
        dout => grp_fu_294_p1);

    mul_32ns_32ns_64_2_1_U3 : component GradientGenUnit_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_315_p0,
        din1 => grp_fu_315_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    h_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_395_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                h_reg_258 <= select_ln32_5_fu_509_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                h_reg_258 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_395_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_247 <= add_ln32_fu_321_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_247 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    w_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_395_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_reg_269 <= add_ln33_fu_612_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                w_reg_269 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_395_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln78_1_reg_1181 <= and_ln78_1_fu_577_p2;
                and_ln86_1_reg_1187 <= and_ln86_1_fu_606_p2;
                line_buffer_V_1_addr_reg_1169 <= zext_ln33_fu_517_p1(11 - 1 downto 0);
                line_buffer_V_2_addr_reg_1175 <= zext_ln33_fu_517_p1(11 - 1 downto 0);
                or_ln36_reg_1160 <= or_ln36_fu_534_p2;
                    zext_ln33_reg_1155(11 downto 0) <= zext_ln33_fu_517_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln78_1_reg_1181_pp0_iter1_reg <= and_ln78_1_reg_1181;
                and_ln86_1_reg_1187_pp0_iter1_reg <= and_ln86_1_reg_1187;
                icmp_ln32_reg_1146 <= icmp_ln32_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln78_1_reg_1181_pp0_iter2_reg <= and_ln78_1_reg_1181_pp0_iter1_reg;
                and_ln78_1_reg_1181_pp0_iter3_reg <= and_ln78_1_reg_1181_pp0_iter2_reg;
                and_ln78_1_reg_1181_pp0_iter4_reg <= and_ln78_1_reg_1181_pp0_iter3_reg;
                and_ln78_1_reg_1181_pp0_iter5_reg <= and_ln78_1_reg_1181_pp0_iter4_reg;
                and_ln78_1_reg_1181_pp0_iter6_reg <= and_ln78_1_reg_1181_pp0_iter5_reg;
                and_ln78_1_reg_1181_pp0_iter7_reg <= and_ln78_1_reg_1181_pp0_iter6_reg;
                and_ln78_1_reg_1181_pp0_iter8_reg <= and_ln78_1_reg_1181_pp0_iter7_reg;
                and_ln78_1_reg_1181_pp0_iter9_reg <= and_ln78_1_reg_1181_pp0_iter8_reg;
                and_ln86_1_reg_1187_pp0_iter2_reg <= and_ln86_1_reg_1187_pp0_iter1_reg;
                and_ln86_1_reg_1187_pp0_iter3_reg <= and_ln86_1_reg_1187_pp0_iter2_reg;
                and_ln86_1_reg_1187_pp0_iter4_reg <= and_ln86_1_reg_1187_pp0_iter3_reg;
                and_ln86_1_reg_1187_pp0_iter5_reg <= and_ln86_1_reg_1187_pp0_iter4_reg;
                and_ln86_1_reg_1187_pp0_iter6_reg <= and_ln86_1_reg_1187_pp0_iter5_reg;
                and_ln86_1_reg_1187_pp0_iter7_reg <= and_ln86_1_reg_1187_pp0_iter6_reg;
                and_ln86_1_reg_1187_pp0_iter8_reg <= and_ln86_1_reg_1187_pp0_iter7_reg;
                and_ln86_1_reg_1187_pp0_iter9_reg <= and_ln86_1_reg_1187_pp0_iter8_reg;
                data_V_1_reg_1263_pp0_iter9_reg <= data_V_1_reg_1263;
                data_V_reg_1226_pp0_iter9_reg <= data_V_reg_1226;
                icmp_ln329_1_reg_1289_pp0_iter9_reg <= icmp_ln329_1_reg_1289;
                icmp_ln329_reg_1252_pp0_iter9_reg <= icmp_ln329_reg_1252;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln78_1_reg_1181_pp0_iter7_reg))) then
                data_V_1_reg_1263 <= data_V_1_fu_745_p1;
                data_V_reg_1226 <= data_V_fu_694_p1;
                icmp_ln323_1_reg_1270 <= icmp_ln323_1_fu_766_p2;
                icmp_ln323_reg_1233 <= icmp_ln323_fu_715_p2;
                icmp_ln327_1_reg_1283 <= icmp_ln327_1_fu_778_p2;
                icmp_ln327_reg_1246 <= icmp_ln327_fu_727_p2;
                icmp_ln329_1_reg_1289 <= icmp_ln329_1_fu_784_p2;
                icmp_ln329_reg_1252 <= icmp_ln329_fu_733_p2;
                icmp_ln330_1_reg_1295 <= icmp_ln330_1_fu_790_p2;
                icmp_ln330_reg_1258 <= icmp_ln330_fu_739_p2;
                sh_amt_2_reg_1277 <= sh_amt_2_fu_772_p2;
                sh_amt_reg_1240 <= sh_amt_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln78_1_reg_1181_pp0_iter6_reg))) then
                dc_1_reg_1221 <= grp_fu_294_p1;
                dc_reg_1216 <= grp_fu_291_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln78_1_reg_1181_pp0_iter8_reg))) then
                icmp_ln337_1_reg_1325 <= icmp_ln337_1_fu_938_p2;
                icmp_ln337_reg_1305 <= icmp_ln337_fu_829_p2;
                or_ln327_1_reg_1330 <= or_ln327_1_fu_961_p2;
                or_ln327_reg_1310 <= or_ln327_fu_852_p2;
                select_ln327_1_reg_1335 <= select_ln327_1_fu_1006_p3;
                select_ln327_reg_1315 <= select_ln327_fu_897_p3;
                sh_amt_1_reg_1300 <= sh_amt_1_fu_814_p2;
                sh_amt_3_reg_1320 <= sh_amt_3_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_395_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln36_fu_534_p2 = ap_const_lv1_0))) then
                input_stream_element_data_V_reg_1164 <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sliding_window_V_0_2 <= line_buffer_V_1_q1;
                sliding_window_V_1_1 <= sliding_window_V_1_2;
                sliding_window_V_1_2 <= line_buffer_V_2_q1;
                sliding_window_V_2_2 <= ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln78_1_reg_1181))) then
                sub_ln691_1_reg_1201 <= sub_ln691_1_fu_680_p2;
                sub_ln691_reg_1196 <= sub_ln691_fu_666_p2;
            end if;
        end if;
    end process;
    zext_ln33_reg_1155(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln32_fu_395_p2, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln32_fu_395_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln32_fu_395_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add18_fu_303_p2 <= std_logic_vector(unsigned(image_w) + unsigned(ap_const_lv32_1));
    add_fu_297_p2 <= std_logic_vector(unsigned(image_h) + unsigned(ap_const_lv32_1));
    add_ln32_1_fu_400_p2 <= std_logic_vector(unsigned(h_reg_258) + unsigned(ap_const_lv31_1));
    add_ln32_fu_321_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_247) + unsigned(ap_const_lv64_1));
    add_ln33_fu_612_p2 <= std_logic_vector(unsigned(select_ln32_fu_410_p3) + unsigned(ap_const_lv12_1));
    and_ln327_1_fu_1001_p2 <= (xor_ln323_1_fu_996_p2 and icmp_ln327_1_reg_1283);
    and_ln327_fu_892_p2 <= (xor_ln323_fu_887_p2 and icmp_ln327_reg_1246);
    and_ln330_1_fu_867_p2 <= (icmp_ln329_reg_1252 and and_ln330_fu_862_p2);
    and_ln330_2_fu_971_p2 <= (xor_ln327_1_fu_965_p2 and icmp_ln330_1_reg_1295);
    and_ln330_3_fu_976_p2 <= (icmp_ln329_1_reg_1289 and and_ln330_2_fu_971_p2);
    and_ln330_fu_862_p2 <= (xor_ln327_fu_856_p2 and icmp_ln330_reg_1258);
    and_ln78_1_fu_577_p2 <= (and_ln78_fu_565_p2 and and_ln78_2_fu_571_p2);
    and_ln78_2_fu_571_p2 <= (select_ln32_3_fu_466_p3 and icmp_ln78_1_fu_560_p2);
    and_ln78_fu_565_p2 <= (select_ln32_2_fu_453_p3 and icmp_ln78_fu_554_p2);
    and_ln86_1_fu_606_p2 <= (select_ln32_4_fu_497_p3 and and_ln86_2_fu_600_p2);
    and_ln86_2_fu_600_p2 <= (xor_ln86_fu_594_p2 and icmp_ln86_fu_583_p2);
    and_ln86_3_fu_491_p2 <= (rev62_fu_485_p2 and notlhs1_mid1_fu_474_p2);
    and_ln86_fu_380_p2 <= (rev54_fu_374_p2 and notlhs1_fu_363_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_in_TVALID, stream_out_GX_TREADY, stream_out_GY_TREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter10, and_ln86_1_reg_1187_pp0_iter9_reg, ap_predicate_op68_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op68_read_state4 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (((stream_out_GY_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)) or ((stream_out_GX_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_in_TVALID, stream_out_GX_TREADY, stream_out_GY_TREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter10, and_ln86_1_reg_1187_pp0_iter9_reg, ap_predicate_op68_read_state4, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op68_read_state4 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or ((stream_out_GY_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)) or ((stream_out_GX_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_in_TVALID, stream_out_GX_TREADY, stream_out_GY_TREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter10, and_ln86_1_reg_1187_pp0_iter9_reg, ap_predicate_op68_read_state4, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op68_read_state4 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or ((stream_out_GY_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)) or ((stream_out_GX_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)))));
    end process;

        ap_block_state10_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(stream_out_GX_TREADY, stream_out_GY_TREADY, and_ln86_1_reg_1187_pp0_iter9_reg)
    begin
                ap_block_state14_io <= (((stream_out_GY_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)) or ((stream_out_GX_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)));
    end process;


    ap_block_state14_pp0_stage0_iter10_assign_proc : process(stream_out_GX_TREADY, stream_out_GY_TREADY, and_ln86_1_reg_1187_pp0_iter9_reg)
    begin
                ap_block_state14_pp0_stage0_iter10 <= (((stream_out_GY_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)) or ((stream_out_GX_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg)));
    end process;


    ap_block_state4_pp0_stage0_iter0_assign_proc : process(stream_in_TVALID, ap_predicate_op68_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter0 <= ((stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op68_read_state4 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln32_fu_395_p2)
    begin
        if ((icmp_ln32_fu_395_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_71_assign_proc : process(icmp_ln32_fu_395_p2)
    begin
                ap_enable_operation_71 <= (icmp_ln32_fu_395_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_73_assign_proc : process(icmp_ln32_fu_395_p2)
    begin
                ap_enable_operation_73 <= (icmp_ln32_fu_395_p2 = ap_const_lv1_0);
    end process;

        ap_enable_operation_95 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_97 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_98 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_99 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state4_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state4_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state5_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4_assign_proc : process(icmp_ln32_reg_1146, or_ln36_reg_1160, input_stream_element_data_V_reg_1164, ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_280)
    begin
        if ((icmp_ln32_reg_1146 = ap_const_lv1_0)) then
            if ((or_ln36_reg_1160 = ap_const_lv1_1)) then 
                ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4 <= ap_const_lv8_0;
            elsif ((or_ln36_reg_1160 = ap_const_lv1_0)) then 
                ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4 <= input_stream_element_data_V_reg_1164;
            else 
                ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_280;
            end if;
        else 
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_280;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_280 <= "XXXXXXXX";

    ap_predicate_op68_read_state4_assign_proc : process(icmp_ln32_fu_395_p2, or_ln36_fu_534_p2)
    begin
                ap_predicate_op68_read_state4 <= ((icmp_ln32_fu_395_p2 = ap_const_lv1_0) and (or_ln36_fu_534_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_V_1_fu_745_p1 <= dc_1_reg_1221;
    data_V_fu_694_p1 <= dc_reg_1216;

    grp_fu_291_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_291_ce <= ap_const_logic_1;
        else 
            grp_fu_291_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_291_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln691_reg_1196),32));


    grp_fu_294_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_294_ce <= ap_const_logic_1;
        else 
            grp_fu_294_ce <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_294_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln691_1_reg_1201),32));

    grp_fu_315_p0 <= grp_fu_315_p00(32 - 1 downto 0);
    grp_fu_315_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_297_p2),64));
    grp_fu_315_p1 <= grp_fu_315_p10(32 - 1 downto 0);
    grp_fu_315_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add18_fu_303_p2),64));
    icmp46_fu_447_p2 <= "0" when (tmp_1_fu_437_p4 = ap_const_lv30_0) else "1";
    icmp_fu_352_p2 <= "0" when (tmp_fu_342_p4 = ap_const_lv30_0) else "1";
    icmp_ln323_1_fu_766_p2 <= "1" when (trunc_ln368_1_fu_758_p1 = ap_const_lv63_0) else "0";
    icmp_ln323_fu_715_p2 <= "1" when (trunc_ln368_fu_707_p1 = ap_const_lv63_0) else "0";
    icmp_ln327_1_fu_778_p2 <= "1" when (tmp_8_fu_748_p4 = ap_const_lv11_433) else "0";
    icmp_ln327_fu_727_p2 <= "1" when (tmp_7_fu_697_p4 = ap_const_lv11_433) else "0";
    icmp_ln329_1_fu_784_p2 <= "1" when (signed(sh_amt_2_fu_772_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln329_fu_733_p2 <= "1" when (signed(sh_amt_fu_721_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln32_fu_395_p2 <= "1" when (indvar_flatten_reg_247 = grp_fu_315_p2) else "0";
    icmp_ln330_1_fu_790_p2 <= "1" when (signed(sh_amt_2_fu_772_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln330_fu_739_p2 <= "1" when (signed(sh_amt_fu_721_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln337_1_fu_938_p2 <= "1" when (signed(tmp_5_fu_928_p4) < signed(ap_const_lv7_1)) else "0";
    icmp_ln337_fu_829_p2 <= "1" when (signed(tmp_3_fu_819_p4) < signed(ap_const_lv7_1)) else "0";
    icmp_ln33_fu_390_p2 <= "1" when (zext_ln33_1_fu_386_p1 = add18_fu_303_p2) else "0";
    icmp_ln36_fu_523_p2 <= "1" when (signed(zext_ln32_2_fu_505_p1) < signed(image_w)) else "0";
    icmp_ln78_1_fu_560_p2 <= "1" when (signed(zext_ln32_2_fu_505_p1) < signed(image_w)) else "0";
    icmp_ln78_fu_554_p2 <= "0" when (tmp_6_fu_544_p4 = ap_const_lv11_0) else "1";
    icmp_ln86_1_fu_589_p2 <= "1" when (signed(image_w) < signed(zext_ln32_2_fu_505_p1)) else "0";
    icmp_ln86_fu_583_p2 <= "0" when (select_ln32_fu_410_p3 = ap_const_lv12_0) else "1";
    line_buffer_V_0_address0 <= zext_ln33_reg_1155(11 - 1 downto 0);

    line_buffer_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_1_address0 <= line_buffer_V_1_addr_reg_1169;
    line_buffer_V_1_address1 <= zext_ln33_fu_517_p1(11 - 1 downto 0);

    line_buffer_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_2_address0 <= line_buffer_V_2_addr_reg_1175;
    line_buffer_V_2_address1 <= zext_ln33_fu_517_p1(11 - 1 downto 0);

    line_buffer_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln331_1_fu_951_p2 <= std_logic_vector(shift_right(unsigned(zext_ln320_1_fu_919_p1),to_integer(unsigned('0' & zext_ln331_1_fu_947_p1(31-1 downto 0)))));
    lshr_ln331_fu_842_p2 <= std_logic_vector(shift_right(unsigned(zext_ln320_fu_810_p1),to_integer(unsigned('0' & zext_ln331_fu_838_p1(31-1 downto 0)))));
    notlhs1_fu_363_p2 <= "0" when (h_reg_258 = ap_const_lv31_0) else "1";
    notlhs1_mid1_fu_474_p2 <= "0" when (add_ln32_1_fu_400_p2 = ap_const_lv31_0) else "1";
    notrhs_fu_358_p2 <= "1" when (signed(zext_ln32_1_fu_327_p1) < signed(image_h)) else "0";
    notrhs_mid1_fu_461_p2 <= "1" when (signed(zext_ln32_fu_406_p1) < signed(image_h)) else "0";
    or_ln327_1_fu_961_p2 <= (icmp_ln327_1_reg_1283 or icmp_ln323_1_reg_1270);
    or_ln327_fu_852_p2 <= (icmp_ln327_reg_1246 or icmp_ln323_reg_1233);
    or_ln329_1_fu_1071_p2 <= (or_ln327_1_reg_1330 or icmp_ln329_1_reg_1289_pp0_iter9_reg);
    or_ln329_fu_1037_p2 <= (or_ln327_reg_1310 or icmp_ln329_reg_1252_pp0_iter9_reg);
    or_ln36_fu_534_p2 <= (xor_ln36_fu_528_p2 or select_ln32_1_fu_429_p3);
    output_stream_element_GX_data_V_fu_1041_p3 <= 
        select_ln327_reg_1315 when (or_ln329_fu_1037_p2(0) = '1') else 
        select_ln337_fu_1030_p3;
    output_stream_element_GY_data_V_fu_1075_p3 <= 
        select_ln327_1_reg_1335 when (or_ln329_1_fu_1071_p2(0) = '1') else 
        select_ln337_1_fu_1064_p3;
    p_Result_1_fu_911_p3 <= (ap_const_lv1_1 & trunc_ln315_1_fu_905_p1);
    p_Result_s_fu_802_p3 <= (ap_const_lv1_1 & trunc_ln315_fu_796_p1);
    rev52_fu_336_p2 <= (slt_fu_331_p2 xor ap_const_lv1_1);
    rev54_fu_374_p2 <= (slt53_fu_369_p2 xor ap_const_lv1_1);
    rev60_fu_423_p2 <= (slt59_fu_418_p2 xor ap_const_lv1_1);
    rev62_fu_485_p2 <= (slt61_fu_480_p2 xor ap_const_lv1_1);
    select_ln323_1_fu_989_p3 <= 
        ap_const_lv8_0 when (icmp_ln323_1_reg_1270(0) = '1') else 
        select_ln330_1_fu_981_p3;
    select_ln323_fu_880_p3 <= 
        ap_const_lv8_0 when (icmp_ln323_reg_1233(0) = '1') else 
        select_ln330_fu_872_p3;
    select_ln327_1_fu_1006_p3 <= 
        trunc_ln320_1_fu_908_p1 when (and_ln327_1_fu_1001_p2(0) = '1') else 
        select_ln323_1_fu_989_p3;
    select_ln327_fu_897_p3 <= 
        trunc_ln320_fu_799_p1 when (and_ln327_fu_892_p2(0) = '1') else 
        select_ln323_fu_880_p3;
    select_ln32_1_fu_429_p3 <= 
        rev60_fu_423_p2 when (icmp_ln33_fu_390_p2(0) = '1') else 
        rev52_fu_336_p2;
    select_ln32_2_fu_453_p3 <= 
        icmp46_fu_447_p2 when (icmp_ln33_fu_390_p2(0) = '1') else 
        icmp_fu_352_p2;
    select_ln32_3_fu_466_p3 <= 
        notrhs_mid1_fu_461_p2 when (icmp_ln33_fu_390_p2(0) = '1') else 
        notrhs_fu_358_p2;
    select_ln32_4_fu_497_p3 <= 
        and_ln86_3_fu_491_p2 when (icmp_ln33_fu_390_p2(0) = '1') else 
        and_ln86_fu_380_p2;
    select_ln32_5_fu_509_p3 <= 
        add_ln32_1_fu_400_p2 when (icmp_ln33_fu_390_p2(0) = '1') else 
        h_reg_258;
    select_ln32_fu_410_p3 <= 
        ap_const_lv12_0 when (icmp_ln33_fu_390_p2(0) = '1') else 
        w_reg_269;
    select_ln330_1_fu_981_p3 <= 
        trunc_ln331_1_fu_957_p1 when (and_ln330_3_fu_976_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln330_fu_872_p3 <= 
        trunc_ln331_fu_848_p1 when (and_ln330_1_fu_867_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln337_1_fu_1064_p3 <= 
        trunc_ln337_1_fu_1060_p1 when (icmp_ln337_1_reg_1325(0) = '1') else 
        ap_const_lv8_0;
    select_ln337_fu_1030_p3 <= 
        trunc_ln337_fu_1026_p1 when (icmp_ln337_reg_1305(0) = '1') else 
        ap_const_lv8_0;
        sext_ln326_1_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_3_reg_1320),32));

        sext_ln326_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_1300),32));

        sext_ln331_1_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_2_reg_1277),32));

        sext_ln331_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1240),32));

    sh_amt_1_fu_814_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_amt_reg_1240));
    sh_amt_2_fu_772_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln311_1_fu_762_p1));
    sh_amt_3_fu_923_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_amt_2_reg_1277));
    sh_amt_fu_721_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln311_fu_711_p1));
    shl_ln339_1_fu_1054_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln328_1_fu_1048_p1),to_integer(unsigned('0' & sext_ln326_1_fu_1051_p1(31-1 downto 0)))));
    shl_ln339_fu_1020_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln328_fu_1014_p1),to_integer(unsigned('0' & sext_ln326_fu_1017_p1(31-1 downto 0)))));
    slt53_fu_369_p2 <= "1" when (signed(image_h) < signed(zext_ln32_1_fu_327_p1)) else "0";
    slt59_fu_418_p2 <= "1" when (signed(zext_ln32_fu_406_p1) < signed(image_h)) else "0";
    slt61_fu_480_p2 <= "1" when (signed(image_h) < signed(zext_ln32_fu_406_p1)) else "0";
    slt_fu_331_p2 <= "1" when (signed(zext_ln32_1_fu_327_p1) < signed(image_h)) else "0";

    stream_in_TDATA_blk_n_assign_proc : process(stream_in_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln32_fu_395_p2, or_ln36_fu_534_p2)
    begin
        if (((icmp_ln32_fu_395_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln36_fu_534_p2 = ap_const_lv1_0))) then 
            stream_in_TDATA_blk_n <= stream_in_TVALID;
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op68_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op68_read_state4 = ap_const_boolean_1))) then 
            stream_in_TREADY <= ap_const_logic_1;
        else 
            stream_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_GX_TDATA <= 
        output_stream_element_GX_data_V_fu_1041_p3 when (and_ln78_1_reg_1181_pp0_iter9_reg(0) = '1') else 
        ap_const_lv8_0;

    stream_out_GX_TDATA_blk_n_assign_proc : process(stream_out_GX_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, and_ln86_1_reg_1187_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            stream_out_GX_TDATA_blk_n <= stream_out_GX_TREADY;
        else 
            stream_out_GX_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_GX_TKEEP <= ap_const_lv1_0;
    stream_out_GX_TLAST <= ap_const_lv1_0;
    stream_out_GX_TSTRB <= ap_const_lv1_0;
    stream_out_GX_TUSER <= ap_const_lv1_0;

    stream_out_GX_TVALID_assign_proc : process(ap_enable_reg_pp0_iter10, and_ln86_1_reg_1187_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            stream_out_GX_TVALID <= ap_const_logic_1;
        else 
            stream_out_GX_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_GY_TDATA <= 
        output_stream_element_GY_data_V_fu_1075_p3 when (and_ln78_1_reg_1181_pp0_iter9_reg(0) = '1') else 
        ap_const_lv8_0;

    stream_out_GY_TDATA_blk_n_assign_proc : process(stream_out_GY_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, and_ln86_1_reg_1187_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            stream_out_GY_TDATA_blk_n <= stream_out_GY_TREADY;
        else 
            stream_out_GY_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_GY_TKEEP <= ap_const_lv1_0;
    stream_out_GY_TLAST <= ap_const_lv1_0;
    stream_out_GY_TSTRB <= ap_const_lv1_0;
    stream_out_GY_TUSER <= ap_const_lv1_0;

    stream_out_GY_TVALID_assign_proc : process(ap_enable_reg_pp0_iter10, and_ln86_1_reg_1187_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln86_1_reg_1187_pp0_iter9_reg) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            stream_out_GY_TVALID <= ap_const_logic_1;
        else 
            stream_out_GY_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln691_1_fu_680_p2 <= std_logic_vector(unsigned(zext_ln691_3_fu_676_p1) - unsigned(zext_ln691_2_fu_672_p1));
    sub_ln691_fu_666_p2 <= std_logic_vector(unsigned(zext_ln691_1_fu_662_p1) - unsigned(zext_ln691_fu_658_p1));
    tmp_1_fu_437_p4 <= add_ln32_1_fu_400_p2(30 downto 1);
    tmp_3_fu_819_p4 <= sh_amt_1_fu_814_p2(11 downto 5);
    tmp_5_fu_928_p4 <= sh_amt_3_fu_923_p2(11 downto 5);
    tmp_6_fu_544_p4 <= select_ln32_fu_410_p3(11 downto 1);
    tmp_7_fu_697_p4 <= data_V_fu_694_p1(62 downto 52);
    tmp_8_fu_748_p4 <= data_V_1_fu_745_p1(62 downto 52);
    tmp_fu_342_p4 <= h_reg_258(30 downto 1);
    trunc_ln315_1_fu_905_p1 <= data_V_1_reg_1263(52 - 1 downto 0);
    trunc_ln315_fu_796_p1 <= data_V_reg_1226(52 - 1 downto 0);
    trunc_ln320_1_fu_908_p1 <= data_V_1_reg_1263(8 - 1 downto 0);
    trunc_ln320_fu_799_p1 <= data_V_reg_1226(8 - 1 downto 0);
    trunc_ln328_1_fu_1048_p1 <= data_V_1_reg_1263_pp0_iter9_reg(32 - 1 downto 0);
    trunc_ln328_fu_1014_p1 <= data_V_reg_1226_pp0_iter9_reg(32 - 1 downto 0);
    trunc_ln331_1_fu_957_p1 <= lshr_ln331_1_fu_951_p2(8 - 1 downto 0);
    trunc_ln331_fu_848_p1 <= lshr_ln331_fu_842_p2(8 - 1 downto 0);
    trunc_ln337_1_fu_1060_p1 <= shl_ln339_1_fu_1054_p2(8 - 1 downto 0);
    trunc_ln337_fu_1026_p1 <= shl_ln339_fu_1020_p2(8 - 1 downto 0);
    trunc_ln368_1_fu_758_p1 <= data_V_1_fu_745_p1(63 - 1 downto 0);
    trunc_ln368_fu_707_p1 <= data_V_fu_694_p1(63 - 1 downto 0);
    xor_ln323_1_fu_996_p2 <= (icmp_ln323_1_reg_1270 xor ap_const_lv1_1);
    xor_ln323_fu_887_p2 <= (icmp_ln323_reg_1233 xor ap_const_lv1_1);
    xor_ln327_1_fu_965_p2 <= (or_ln327_1_fu_961_p2 xor ap_const_lv1_1);
    xor_ln327_fu_856_p2 <= (or_ln327_fu_852_p2 xor ap_const_lv1_1);
    xor_ln36_fu_528_p2 <= (icmp_ln36_fu_523_p2 xor ap_const_lv1_1);
    xor_ln86_fu_594_p2 <= (icmp_ln86_1_fu_589_p2 xor ap_const_lv1_1);
    zext_ln311_1_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_748_p4),12));
    zext_ln311_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_697_p4),12));
    zext_ln320_1_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_911_p3),54));
    zext_ln320_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_802_p3),54));
    zext_ln32_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_258),32));
    zext_ln32_2_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_410_p3),32));
    zext_ln32_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_1_fu_400_p2),32));
    zext_ln331_1_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln331_1_fu_944_p1),54));
    zext_ln331_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln331_fu_835_p1),54));
    zext_ln33_1_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_269),32));
    zext_ln33_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_410_p3),64));
    zext_ln691_1_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(line_buffer_V_2_q1),9));
    zext_ln691_2_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sliding_window_V_0_2),9));
    zext_ln691_3_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sliding_window_V_2_2),9));
    zext_ln691_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sliding_window_V_1_1),9));
end behav;
