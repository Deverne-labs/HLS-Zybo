// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GradientGenUnit_GradientGen (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_out_GX_TDATA,
        stream_out_GX_TVALID,
        stream_out_GX_TREADY,
        stream_out_GX_TKEEP,
        stream_out_GX_TSTRB,
        stream_out_GX_TUSER,
        stream_out_GX_TLAST,
        stream_out_GY_TDATA,
        stream_out_GY_TVALID,
        stream_out_GY_TREADY,
        stream_out_GY_TKEEP,
        stream_out_GY_TSTRB,
        stream_out_GY_TUSER,
        stream_out_GY_TLAST,
        image_w,
        image_h
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state15 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [0:0] stream_in_TKEEP;
input  [0:0] stream_in_TSTRB;
input  [0:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
output  [7:0] stream_out_GX_TDATA;
output   stream_out_GX_TVALID;
input   stream_out_GX_TREADY;
output  [0:0] stream_out_GX_TKEEP;
output  [0:0] stream_out_GX_TSTRB;
output  [0:0] stream_out_GX_TUSER;
output  [0:0] stream_out_GX_TLAST;
output  [7:0] stream_out_GY_TDATA;
output   stream_out_GY_TVALID;
input   stream_out_GY_TREADY;
output  [0:0] stream_out_GY_TKEEP;
output  [0:0] stream_out_GY_TSTRB;
output  [0:0] stream_out_GY_TUSER;
output  [0:0] stream_out_GY_TLAST;
input  [31:0] image_w;
input  [31:0] image_h;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_TREADY;
reg stream_out_GX_TVALID;
reg stream_out_GY_TVALID;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] line_buffer_V_1_address0;
reg    line_buffer_V_1_ce0;
reg    line_buffer_V_1_we0;
wire   [10:0] line_buffer_V_1_address1;
reg    line_buffer_V_1_ce1;
wire   [7:0] line_buffer_V_1_q1;
wire   [10:0] line_buffer_V_0_address0;
reg    line_buffer_V_0_ce0;
reg    line_buffer_V_0_we0;
wire   [10:0] line_buffer_V_2_address0;
reg    line_buffer_V_2_ce0;
reg    line_buffer_V_2_we0;
wire   [10:0] line_buffer_V_2_address1;
reg    line_buffer_V_2_ce1;
wire   [7:0] line_buffer_V_2_q1;
reg   [7:0] sliding_window_V_0_2;
reg   [7:0] sliding_window_V_1_1;
reg   [7:0] sliding_window_V_1_2;
reg   [7:0] sliding_window_V_2_2;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln32_fu_395_p2;
wire   [0:0] or_ln36_fu_534_p2;
reg    stream_out_GX_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] and_ln86_1_reg_1187;
reg   [0:0] and_ln86_1_reg_1187_pp0_iter9_reg;
reg    stream_out_GY_TDATA_blk_n;
reg   [63:0] indvar_flatten_reg_247;
reg   [30:0] h_reg_258;
reg   [11:0] w_reg_269;
wire   [31:0] add_fu_297_p2;
wire   [31:0] add18_fu_303_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_315_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] add_ln32_fu_321_p2;
reg    ap_predicate_op68_read_state4;
reg    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
wire    ap_block_state11_pp0_stage0_iter7;
wire    ap_block_state12_pp0_stage0_iter8;
wire    ap_block_state13_pp0_stage0_iter9;
reg    ap_block_state14_pp0_stage0_iter10;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln32_reg_1146;
wire   [30:0] select_ln32_5_fu_509_p3;
wire   [63:0] zext_ln33_fu_517_p1;
reg   [63:0] zext_ln33_reg_1155;
reg   [0:0] or_ln36_reg_1160;
reg   [7:0] input_stream_element_data_V_reg_1164;
reg   [10:0] line_buffer_V_1_addr_reg_1169;
reg   [10:0] line_buffer_V_2_addr_reg_1175;
wire   [0:0] and_ln78_1_fu_577_p2;
reg   [0:0] and_ln78_1_reg_1181;
reg   [0:0] and_ln78_1_reg_1181_pp0_iter1_reg;
reg   [0:0] and_ln78_1_reg_1181_pp0_iter2_reg;
reg   [0:0] and_ln78_1_reg_1181_pp0_iter3_reg;
reg   [0:0] and_ln78_1_reg_1181_pp0_iter4_reg;
reg   [0:0] and_ln78_1_reg_1181_pp0_iter5_reg;
reg   [0:0] and_ln78_1_reg_1181_pp0_iter6_reg;
reg   [0:0] and_ln78_1_reg_1181_pp0_iter7_reg;
reg   [0:0] and_ln78_1_reg_1181_pp0_iter8_reg;
reg   [0:0] and_ln78_1_reg_1181_pp0_iter9_reg;
wire   [0:0] and_ln86_1_fu_606_p2;
reg   [0:0] and_ln86_1_reg_1187_pp0_iter1_reg;
reg   [0:0] and_ln86_1_reg_1187_pp0_iter2_reg;
reg   [0:0] and_ln86_1_reg_1187_pp0_iter3_reg;
reg   [0:0] and_ln86_1_reg_1187_pp0_iter4_reg;
reg   [0:0] and_ln86_1_reg_1187_pp0_iter5_reg;
reg   [0:0] and_ln86_1_reg_1187_pp0_iter6_reg;
reg   [0:0] and_ln86_1_reg_1187_pp0_iter7_reg;
reg   [0:0] and_ln86_1_reg_1187_pp0_iter8_reg;
wire   [11:0] add_ln33_fu_612_p2;
wire   [8:0] sub_ln691_fu_666_p2;
reg   [8:0] sub_ln691_reg_1196;
wire   [8:0] sub_ln691_1_fu_680_p2;
reg   [8:0] sub_ln691_1_reg_1201;
wire   [63:0] grp_fu_291_p1;
reg   [63:0] dc_reg_1216;
wire   [63:0] grp_fu_294_p1;
reg   [63:0] dc_1_reg_1221;
wire   [63:0] data_V_fu_694_p1;
reg   [63:0] data_V_reg_1226;
reg   [63:0] data_V_reg_1226_pp0_iter9_reg;
wire   [0:0] icmp_ln323_fu_715_p2;
reg   [0:0] icmp_ln323_reg_1233;
wire  signed [11:0] sh_amt_fu_721_p2;
reg  signed [11:0] sh_amt_reg_1240;
wire   [0:0] icmp_ln327_fu_727_p2;
reg   [0:0] icmp_ln327_reg_1246;
wire   [0:0] icmp_ln329_fu_733_p2;
reg   [0:0] icmp_ln329_reg_1252;
reg   [0:0] icmp_ln329_reg_1252_pp0_iter9_reg;
wire   [0:0] icmp_ln330_fu_739_p2;
reg   [0:0] icmp_ln330_reg_1258;
wire   [63:0] data_V_1_fu_745_p1;
reg   [63:0] data_V_1_reg_1263;
reg   [63:0] data_V_1_reg_1263_pp0_iter9_reg;
wire   [0:0] icmp_ln323_1_fu_766_p2;
reg   [0:0] icmp_ln323_1_reg_1270;
wire  signed [11:0] sh_amt_2_fu_772_p2;
reg  signed [11:0] sh_amt_2_reg_1277;
wire   [0:0] icmp_ln327_1_fu_778_p2;
reg   [0:0] icmp_ln327_1_reg_1283;
wire   [0:0] icmp_ln329_1_fu_784_p2;
reg   [0:0] icmp_ln329_1_reg_1289;
reg   [0:0] icmp_ln329_1_reg_1289_pp0_iter9_reg;
wire   [0:0] icmp_ln330_1_fu_790_p2;
reg   [0:0] icmp_ln330_1_reg_1295;
wire  signed [11:0] sh_amt_1_fu_814_p2;
reg  signed [11:0] sh_amt_1_reg_1300;
wire   [0:0] icmp_ln337_fu_829_p2;
reg   [0:0] icmp_ln337_reg_1305;
wire   [0:0] or_ln327_fu_852_p2;
reg   [0:0] or_ln327_reg_1310;
wire   [7:0] select_ln327_fu_897_p3;
reg   [7:0] select_ln327_reg_1315;
wire  signed [11:0] sh_amt_3_fu_923_p2;
reg  signed [11:0] sh_amt_3_reg_1320;
wire   [0:0] icmp_ln337_1_fu_938_p2;
reg   [0:0] icmp_ln337_1_reg_1325;
wire   [0:0] or_ln327_1_fu_961_p2;
reg   [0:0] or_ln327_1_reg_1330;
wire   [7:0] select_ln327_1_fu_1006_p3;
reg   [7:0] select_ln327_1_reg_1335;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg   [7:0] ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4;
wire   [7:0] ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_280;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] grp_fu_291_p0;
wire  signed [31:0] grp_fu_294_p0;
wire   [31:0] grp_fu_315_p0;
wire   [31:0] grp_fu_315_p1;
wire   [31:0] zext_ln32_1_fu_327_p1;
wire   [0:0] slt_fu_331_p2;
wire   [29:0] tmp_fu_342_p4;
wire   [0:0] slt53_fu_369_p2;
wire   [0:0] rev54_fu_374_p2;
wire   [0:0] notlhs1_fu_363_p2;
wire   [31:0] zext_ln33_1_fu_386_p1;
wire   [30:0] add_ln32_1_fu_400_p2;
wire   [0:0] icmp_ln33_fu_390_p2;
wire   [31:0] zext_ln32_fu_406_p1;
wire   [0:0] slt59_fu_418_p2;
wire   [0:0] rev60_fu_423_p2;
wire   [0:0] rev52_fu_336_p2;
wire   [29:0] tmp_1_fu_437_p4;
wire   [0:0] icmp46_fu_447_p2;
wire   [0:0] icmp_fu_352_p2;
wire   [0:0] notrhs_mid1_fu_461_p2;
wire   [0:0] notrhs_fu_358_p2;
wire   [0:0] slt61_fu_480_p2;
wire   [0:0] rev62_fu_485_p2;
wire   [0:0] notlhs1_mid1_fu_474_p2;
wire   [0:0] and_ln86_3_fu_491_p2;
wire   [0:0] and_ln86_fu_380_p2;
wire   [11:0] select_ln32_fu_410_p3;
wire   [31:0] zext_ln32_2_fu_505_p1;
wire   [0:0] icmp_ln36_fu_523_p2;
wire   [0:0] xor_ln36_fu_528_p2;
wire   [0:0] select_ln32_1_fu_429_p3;
wire   [10:0] tmp_6_fu_544_p4;
wire   [0:0] select_ln32_2_fu_453_p3;
wire   [0:0] icmp_ln78_fu_554_p2;
wire   [0:0] select_ln32_3_fu_466_p3;
wire   [0:0] icmp_ln78_1_fu_560_p2;
wire   [0:0] and_ln78_2_fu_571_p2;
wire   [0:0] and_ln78_fu_565_p2;
wire   [0:0] icmp_ln86_1_fu_589_p2;
wire   [0:0] icmp_ln86_fu_583_p2;
wire   [0:0] xor_ln86_fu_594_p2;
wire   [0:0] and_ln86_2_fu_600_p2;
wire   [0:0] select_ln32_4_fu_497_p3;
wire   [8:0] zext_ln691_1_fu_662_p1;
wire   [8:0] zext_ln691_fu_658_p1;
wire   [8:0] zext_ln691_3_fu_676_p1;
wire   [8:0] zext_ln691_2_fu_672_p1;
wire   [10:0] tmp_7_fu_697_p4;
wire   [62:0] trunc_ln368_fu_707_p1;
wire   [11:0] zext_ln311_fu_711_p1;
wire   [10:0] tmp_8_fu_748_p4;
wire   [62:0] trunc_ln368_1_fu_758_p1;
wire   [11:0] zext_ln311_1_fu_762_p1;
wire   [51:0] trunc_ln315_fu_796_p1;
wire   [52:0] p_Result_s_fu_802_p3;
wire   [6:0] tmp_3_fu_819_p4;
wire  signed [31:0] sext_ln331_fu_835_p1;
wire   [53:0] zext_ln320_fu_810_p1;
wire   [53:0] zext_ln331_fu_838_p1;
wire   [53:0] lshr_ln331_fu_842_p2;
wire   [0:0] xor_ln327_fu_856_p2;
wire   [0:0] and_ln330_fu_862_p2;
wire   [0:0] and_ln330_1_fu_867_p2;
wire   [7:0] trunc_ln331_fu_848_p1;
wire   [7:0] select_ln330_fu_872_p3;
wire   [0:0] xor_ln323_fu_887_p2;
wire   [0:0] and_ln327_fu_892_p2;
wire   [7:0] trunc_ln320_fu_799_p1;
wire   [7:0] select_ln323_fu_880_p3;
wire   [51:0] trunc_ln315_1_fu_905_p1;
wire   [52:0] p_Result_1_fu_911_p3;
wire   [6:0] tmp_5_fu_928_p4;
wire  signed [31:0] sext_ln331_1_fu_944_p1;
wire   [53:0] zext_ln320_1_fu_919_p1;
wire   [53:0] zext_ln331_1_fu_947_p1;
wire   [53:0] lshr_ln331_1_fu_951_p2;
wire   [0:0] xor_ln327_1_fu_965_p2;
wire   [0:0] and_ln330_2_fu_971_p2;
wire   [0:0] and_ln330_3_fu_976_p2;
wire   [7:0] trunc_ln331_1_fu_957_p1;
wire   [7:0] select_ln330_1_fu_981_p3;
wire   [0:0] xor_ln323_1_fu_996_p2;
wire   [0:0] and_ln327_1_fu_1001_p2;
wire   [7:0] trunc_ln320_1_fu_908_p1;
wire   [7:0] select_ln323_1_fu_989_p3;
wire   [31:0] trunc_ln328_fu_1014_p1;
wire  signed [31:0] sext_ln326_fu_1017_p1;
wire   [31:0] shl_ln339_fu_1020_p2;
wire   [7:0] trunc_ln337_fu_1026_p1;
wire   [0:0] or_ln329_fu_1037_p2;
wire   [7:0] select_ln337_fu_1030_p3;
wire   [31:0] trunc_ln328_1_fu_1048_p1;
wire  signed [31:0] sext_ln326_1_fu_1051_p1;
wire   [31:0] shl_ln339_1_fu_1054_p2;
wire   [7:0] trunc_ln337_1_fu_1060_p1;
wire   [0:0] or_ln329_1_fu_1071_p2;
wire   [7:0] select_ln337_1_fu_1064_p3;
wire   [7:0] output_stream_element_GX_data_V_fu_1041_p3;
wire   [7:0] output_stream_element_GY_data_V_fu_1075_p3;
reg    grp_fu_291_ce;
reg    grp_fu_294_ce;
wire    ap_CS_fsm_state15;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_71;
reg    ap_enable_state4_pp0_iter0_stage0;
wire    ap_enable_operation_95;
reg    ap_enable_state5_pp0_iter1_stage0;
wire    ap_enable_operation_98;
reg    ap_enable_operation_73;
wire    ap_enable_operation_97;
wire    ap_enable_operation_99;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_315_p00;
wire   [63:0] grp_fu_315_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 sliding_window_V_0_2 = 8'd0;
#0 sliding_window_V_1_1 = 8'd0;
#0 sliding_window_V_1_2 = 8'd0;
#0 sliding_window_V_2_2 = 8'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

GradientGenUnit_GradientGen_line_buffer_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_1_address0),
    .ce0(line_buffer_V_1_ce0),
    .we0(line_buffer_V_1_we0),
    .d0(line_buffer_V_2_q1),
    .address1(line_buffer_V_1_address1),
    .ce1(line_buffer_V_1_ce1),
    .q1(line_buffer_V_1_q1)
);

GradientGenUnit_GradientGen_line_buffer_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_0_address0),
    .ce0(line_buffer_V_0_ce0),
    .we0(line_buffer_V_0_we0),
    .d0(line_buffer_V_1_q1)
);

GradientGenUnit_GradientGen_line_buffer_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_2_address0),
    .ce0(line_buffer_V_2_ce0),
    .we0(line_buffer_V_2_we0),
    .d0(ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4),
    .address1(line_buffer_V_2_address1),
    .ce1(line_buffer_V_2_ce1),
    .q1(line_buffer_V_2_q1)
);

GradientGenUnit_sitodp_32s_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_6_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_291_p0),
    .ce(grp_fu_291_ce),
    .dout(grp_fu_291_p1)
);

GradientGenUnit_sitodp_32s_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_6_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_294_p0),
    .ce(grp_fu_294_ce),
    .dout(grp_fu_294_p1)
);

GradientGenUnit_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_315_p0),
    .din1(grp_fu_315_p1),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_395_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_reg_258 <= select_ln32_5_fu_509_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_258 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_395_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_247 <= add_ln32_fu_321_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_247 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_395_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_reg_269 <= add_ln33_fu_612_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        w_reg_269 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_395_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln78_1_reg_1181 <= and_ln78_1_fu_577_p2;
        and_ln86_1_reg_1187 <= and_ln86_1_fu_606_p2;
        line_buffer_V_1_addr_reg_1169 <= zext_ln33_fu_517_p1;
        line_buffer_V_2_addr_reg_1175 <= zext_ln33_fu_517_p1;
        or_ln36_reg_1160 <= or_ln36_fu_534_p2;
        zext_ln33_reg_1155[11 : 0] <= zext_ln33_fu_517_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln78_1_reg_1181_pp0_iter1_reg <= and_ln78_1_reg_1181;
        and_ln86_1_reg_1187_pp0_iter1_reg <= and_ln86_1_reg_1187;
        icmp_ln32_reg_1146 <= icmp_ln32_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln78_1_reg_1181_pp0_iter2_reg <= and_ln78_1_reg_1181_pp0_iter1_reg;
        and_ln78_1_reg_1181_pp0_iter3_reg <= and_ln78_1_reg_1181_pp0_iter2_reg;
        and_ln78_1_reg_1181_pp0_iter4_reg <= and_ln78_1_reg_1181_pp0_iter3_reg;
        and_ln78_1_reg_1181_pp0_iter5_reg <= and_ln78_1_reg_1181_pp0_iter4_reg;
        and_ln78_1_reg_1181_pp0_iter6_reg <= and_ln78_1_reg_1181_pp0_iter5_reg;
        and_ln78_1_reg_1181_pp0_iter7_reg <= and_ln78_1_reg_1181_pp0_iter6_reg;
        and_ln78_1_reg_1181_pp0_iter8_reg <= and_ln78_1_reg_1181_pp0_iter7_reg;
        and_ln78_1_reg_1181_pp0_iter9_reg <= and_ln78_1_reg_1181_pp0_iter8_reg;
        and_ln86_1_reg_1187_pp0_iter2_reg <= and_ln86_1_reg_1187_pp0_iter1_reg;
        and_ln86_1_reg_1187_pp0_iter3_reg <= and_ln86_1_reg_1187_pp0_iter2_reg;
        and_ln86_1_reg_1187_pp0_iter4_reg <= and_ln86_1_reg_1187_pp0_iter3_reg;
        and_ln86_1_reg_1187_pp0_iter5_reg <= and_ln86_1_reg_1187_pp0_iter4_reg;
        and_ln86_1_reg_1187_pp0_iter6_reg <= and_ln86_1_reg_1187_pp0_iter5_reg;
        and_ln86_1_reg_1187_pp0_iter7_reg <= and_ln86_1_reg_1187_pp0_iter6_reg;
        and_ln86_1_reg_1187_pp0_iter8_reg <= and_ln86_1_reg_1187_pp0_iter7_reg;
        and_ln86_1_reg_1187_pp0_iter9_reg <= and_ln86_1_reg_1187_pp0_iter8_reg;
        data_V_1_reg_1263_pp0_iter9_reg <= data_V_1_reg_1263;
        data_V_reg_1226_pp0_iter9_reg <= data_V_reg_1226;
        icmp_ln329_1_reg_1289_pp0_iter9_reg <= icmp_ln329_1_reg_1289;
        icmp_ln329_reg_1252_pp0_iter9_reg <= icmp_ln329_reg_1252;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln78_1_reg_1181_pp0_iter7_reg))) begin
        data_V_1_reg_1263 <= data_V_1_fu_745_p1;
        data_V_reg_1226 <= data_V_fu_694_p1;
        icmp_ln323_1_reg_1270 <= icmp_ln323_1_fu_766_p2;
        icmp_ln323_reg_1233 <= icmp_ln323_fu_715_p2;
        icmp_ln327_1_reg_1283 <= icmp_ln327_1_fu_778_p2;
        icmp_ln327_reg_1246 <= icmp_ln327_fu_727_p2;
        icmp_ln329_1_reg_1289 <= icmp_ln329_1_fu_784_p2;
        icmp_ln329_reg_1252 <= icmp_ln329_fu_733_p2;
        icmp_ln330_1_reg_1295 <= icmp_ln330_1_fu_790_p2;
        icmp_ln330_reg_1258 <= icmp_ln330_fu_739_p2;
        sh_amt_2_reg_1277 <= sh_amt_2_fu_772_p2;
        sh_amt_reg_1240 <= sh_amt_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln78_1_reg_1181_pp0_iter6_reg))) begin
        dc_1_reg_1221 <= grp_fu_294_p1;
        dc_reg_1216 <= grp_fu_291_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln78_1_reg_1181_pp0_iter8_reg))) begin
        icmp_ln337_1_reg_1325 <= icmp_ln337_1_fu_938_p2;
        icmp_ln337_reg_1305 <= icmp_ln337_fu_829_p2;
        or_ln327_1_reg_1330 <= or_ln327_1_fu_961_p2;
        or_ln327_reg_1310 <= or_ln327_fu_852_p2;
        select_ln327_1_reg_1335 <= select_ln327_1_fu_1006_p3;
        select_ln327_reg_1315 <= select_ln327_fu_897_p3;
        sh_amt_1_reg_1300 <= sh_amt_1_fu_814_p2;
        sh_amt_3_reg_1320 <= sh_amt_3_fu_923_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_395_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln36_fu_534_p2 == 1'd0))) begin
        input_stream_element_data_V_reg_1164 <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sliding_window_V_0_2 <= line_buffer_V_1_q1;
        sliding_window_V_1_1 <= sliding_window_V_1_2;
        sliding_window_V_1_2 <= line_buffer_V_2_q1;
        sliding_window_V_2_2 <= ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln78_1_reg_1181))) begin
        sub_ln691_1_reg_1201 <= sub_ln691_1_fu_680_p2;
        sub_ln691_reg_1196 <= sub_ln691_fu_666_p2;
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_395_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln32_reg_1146 == 1'd0)) begin
        if ((or_ln36_reg_1160 == 1'd1)) begin
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4 = 8'd0;
        end else if ((or_ln36_reg_1160 == 1'd0)) begin
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4 = input_stream_element_data_V_reg_1164;
        end else begin
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4 = ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_280;
        end
    end else begin
        ap_phi_mux_input_stream_element_data_V_1_phi_fu_283_p4 = ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_280;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_291_ce = 1'b1;
    end else begin
        grp_fu_291_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_294_ce = 1'b1;
    end else begin
        grp_fu_294_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_ce0 = 1'b1;
    end else begin
        line_buffer_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_we0 = 1'b1;
    end else begin
        line_buffer_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_ce0 = 1'b1;
    end else begin
        line_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_ce1 = 1'b1;
    end else begin
        line_buffer_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_we0 = 1'b1;
    end else begin
        line_buffer_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_2_ce0 = 1'b1;
    end else begin
        line_buffer_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_2_ce1 = 1'b1;
    end else begin
        line_buffer_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_2_we0 = 1'b1;
    end else begin
        line_buffer_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_395_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln36_fu_534_p2 == 1'd0))) begin
        stream_in_TDATA_blk_n = stream_in_TVALID;
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op68_read_state4 == 1'b1))) begin
        stream_in_TREADY = 1'b1;
    end else begin
        stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_GX_TDATA_blk_n = stream_out_GX_TREADY;
    end else begin
        stream_out_GX_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_GX_TVALID = 1'b1;
    end else begin
        stream_out_GX_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_GY_TDATA_blk_n = stream_out_GY_TREADY;
    end else begin
        stream_out_GY_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        stream_out_GY_TVALID = 1'b1;
    end else begin
        stream_out_GY_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln32_fu_395_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln32_fu_395_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add18_fu_303_p2 = (image_w + 32'd1);

assign add_fu_297_p2 = (image_h + 32'd1);

assign add_ln32_1_fu_400_p2 = (h_reg_258 + 31'd1);

assign add_ln32_fu_321_p2 = (indvar_flatten_reg_247 + 64'd1);

assign add_ln33_fu_612_p2 = (select_ln32_fu_410_p3 + 12'd1);

assign and_ln327_1_fu_1001_p2 = (xor_ln323_1_fu_996_p2 & icmp_ln327_1_reg_1283);

assign and_ln327_fu_892_p2 = (xor_ln323_fu_887_p2 & icmp_ln327_reg_1246);

assign and_ln330_1_fu_867_p2 = (icmp_ln329_reg_1252 & and_ln330_fu_862_p2);

assign and_ln330_2_fu_971_p2 = (xor_ln327_1_fu_965_p2 & icmp_ln330_1_reg_1295);

assign and_ln330_3_fu_976_p2 = (icmp_ln329_1_reg_1289 & and_ln330_2_fu_971_p2);

assign and_ln330_fu_862_p2 = (xor_ln327_fu_856_p2 & icmp_ln330_reg_1258);

assign and_ln78_1_fu_577_p2 = (and_ln78_fu_565_p2 & and_ln78_2_fu_571_p2);

assign and_ln78_2_fu_571_p2 = (select_ln32_3_fu_466_p3 & icmp_ln78_1_fu_560_p2);

assign and_ln78_fu_565_p2 = (select_ln32_2_fu_453_p3 & icmp_ln78_fu_554_p2);

assign and_ln86_1_fu_606_p2 = (select_ln32_4_fu_497_p3 & and_ln86_2_fu_600_p2);

assign and_ln86_2_fu_600_p2 = (xor_ln86_fu_594_p2 & icmp_ln86_fu_583_p2);

assign and_ln86_3_fu_491_p2 = (rev62_fu_485_p2 & notlhs1_mid1_fu_474_p2);

assign and_ln86_fu_380_p2 = (rev54_fu_374_p2 & notlhs1_fu_363_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (stream_in_TVALID == 1'b0) & (ap_predicate_op68_read_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (((stream_out_GY_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)) | ((stream_out_GX_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (stream_in_TVALID == 1'b0) & (ap_predicate_op68_read_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((stream_out_GY_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)) | ((stream_out_GX_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (stream_in_TVALID == 1'b0) & (ap_predicate_op68_read_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((stream_out_GY_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)) | ((stream_out_GX_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)))));
end

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = (((stream_out_GY_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)) | ((stream_out_GX_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter10 = (((stream_out_GY_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)) | ((stream_out_GX_TREADY == 1'b0) & (1'd1 == and_ln86_1_reg_1187_pp0_iter9_reg)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter0 = ((stream_in_TVALID == 1'b0) & (ap_predicate_op68_read_state4 == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_71 = (icmp_ln32_fu_395_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_73 = (icmp_ln32_fu_395_p2 == 1'd0);
end

assign ap_enable_operation_95 = (1'b1 == 1'b1);

assign ap_enable_operation_97 = (1'b1 == 1'b1);

assign ap_enable_operation_98 = (1'b1 == 1'b1);

assign ap_enable_operation_99 = (1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state4_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state5_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_280 = 'bx;

always @ (*) begin
    ap_predicate_op68_read_state4 = ((icmp_ln32_fu_395_p2 == 1'd0) & (or_ln36_fu_534_p2 == 1'd0));
end

assign data_V_1_fu_745_p1 = dc_1_reg_1221;

assign data_V_fu_694_p1 = dc_reg_1216;

assign grp_fu_291_p0 = $signed(sub_ln691_reg_1196);

assign grp_fu_294_p0 = $signed(sub_ln691_1_reg_1201);

assign grp_fu_315_p0 = grp_fu_315_p00;

assign grp_fu_315_p00 = add_fu_297_p2;

assign grp_fu_315_p1 = grp_fu_315_p10;

assign grp_fu_315_p10 = add18_fu_303_p2;

assign icmp46_fu_447_p2 = ((tmp_1_fu_437_p4 != 30'd0) ? 1'b1 : 1'b0);

assign icmp_fu_352_p2 = ((tmp_fu_342_p4 != 30'd0) ? 1'b1 : 1'b0);

assign icmp_ln323_1_fu_766_p2 = ((trunc_ln368_1_fu_758_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln323_fu_715_p2 = ((trunc_ln368_fu_707_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln327_1_fu_778_p2 = ((tmp_8_fu_748_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln327_fu_727_p2 = ((tmp_7_fu_697_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln329_1_fu_784_p2 = (($signed(sh_amt_2_fu_772_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln329_fu_733_p2 = (($signed(sh_amt_fu_721_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_395_p2 = ((indvar_flatten_reg_247 == grp_fu_315_p2) ? 1'b1 : 1'b0);

assign icmp_ln330_1_fu_790_p2 = (($signed(sh_amt_2_fu_772_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln330_fu_739_p2 = (($signed(sh_amt_fu_721_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln337_1_fu_938_p2 = (($signed(tmp_5_fu_928_p4) < $signed(7'd1)) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_829_p2 = (($signed(tmp_3_fu_819_p4) < $signed(7'd1)) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_390_p2 = ((zext_ln33_1_fu_386_p1 == add18_fu_303_p2) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_523_p2 = (($signed(zext_ln32_2_fu_505_p1) < $signed(image_w)) ? 1'b1 : 1'b0);

assign icmp_ln78_1_fu_560_p2 = (($signed(zext_ln32_2_fu_505_p1) < $signed(image_w)) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_554_p2 = ((tmp_6_fu_544_p4 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln86_1_fu_589_p2 = (($signed(image_w) < $signed(zext_ln32_2_fu_505_p1)) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_583_p2 = ((select_ln32_fu_410_p3 != 12'd0) ? 1'b1 : 1'b0);

assign line_buffer_V_0_address0 = zext_ln33_reg_1155;

assign line_buffer_V_1_address0 = line_buffer_V_1_addr_reg_1169;

assign line_buffer_V_1_address1 = zext_ln33_fu_517_p1;

assign line_buffer_V_2_address0 = line_buffer_V_2_addr_reg_1175;

assign line_buffer_V_2_address1 = zext_ln33_fu_517_p1;

assign lshr_ln331_1_fu_951_p2 = zext_ln320_1_fu_919_p1 >> zext_ln331_1_fu_947_p1;

assign lshr_ln331_fu_842_p2 = zext_ln320_fu_810_p1 >> zext_ln331_fu_838_p1;

assign notlhs1_fu_363_p2 = ((h_reg_258 != 31'd0) ? 1'b1 : 1'b0);

assign notlhs1_mid1_fu_474_p2 = ((add_ln32_1_fu_400_p2 != 31'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_358_p2 = (($signed(zext_ln32_1_fu_327_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign notrhs_mid1_fu_461_p2 = (($signed(zext_ln32_fu_406_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign or_ln327_1_fu_961_p2 = (icmp_ln327_1_reg_1283 | icmp_ln323_1_reg_1270);

assign or_ln327_fu_852_p2 = (icmp_ln327_reg_1246 | icmp_ln323_reg_1233);

assign or_ln329_1_fu_1071_p2 = (or_ln327_1_reg_1330 | icmp_ln329_1_reg_1289_pp0_iter9_reg);

assign or_ln329_fu_1037_p2 = (or_ln327_reg_1310 | icmp_ln329_reg_1252_pp0_iter9_reg);

assign or_ln36_fu_534_p2 = (xor_ln36_fu_528_p2 | select_ln32_1_fu_429_p3);

assign output_stream_element_GX_data_V_fu_1041_p3 = ((or_ln329_fu_1037_p2[0:0] == 1'b1) ? select_ln327_reg_1315 : select_ln337_fu_1030_p3);

assign output_stream_element_GY_data_V_fu_1075_p3 = ((or_ln329_1_fu_1071_p2[0:0] == 1'b1) ? select_ln327_1_reg_1335 : select_ln337_1_fu_1064_p3);

assign p_Result_1_fu_911_p3 = {{1'd1}, {trunc_ln315_1_fu_905_p1}};

assign p_Result_s_fu_802_p3 = {{1'd1}, {trunc_ln315_fu_796_p1}};

assign rev52_fu_336_p2 = (slt_fu_331_p2 ^ 1'd1);

assign rev54_fu_374_p2 = (slt53_fu_369_p2 ^ 1'd1);

assign rev60_fu_423_p2 = (slt59_fu_418_p2 ^ 1'd1);

assign rev62_fu_485_p2 = (slt61_fu_480_p2 ^ 1'd1);

assign select_ln323_1_fu_989_p3 = ((icmp_ln323_1_reg_1270[0:0] == 1'b1) ? 8'd0 : select_ln330_1_fu_981_p3);

assign select_ln323_fu_880_p3 = ((icmp_ln323_reg_1233[0:0] == 1'b1) ? 8'd0 : select_ln330_fu_872_p3);

assign select_ln327_1_fu_1006_p3 = ((and_ln327_1_fu_1001_p2[0:0] == 1'b1) ? trunc_ln320_1_fu_908_p1 : select_ln323_1_fu_989_p3);

assign select_ln327_fu_897_p3 = ((and_ln327_fu_892_p2[0:0] == 1'b1) ? trunc_ln320_fu_799_p1 : select_ln323_fu_880_p3);

assign select_ln32_1_fu_429_p3 = ((icmp_ln33_fu_390_p2[0:0] == 1'b1) ? rev60_fu_423_p2 : rev52_fu_336_p2);

assign select_ln32_2_fu_453_p3 = ((icmp_ln33_fu_390_p2[0:0] == 1'b1) ? icmp46_fu_447_p2 : icmp_fu_352_p2);

assign select_ln32_3_fu_466_p3 = ((icmp_ln33_fu_390_p2[0:0] == 1'b1) ? notrhs_mid1_fu_461_p2 : notrhs_fu_358_p2);

assign select_ln32_4_fu_497_p3 = ((icmp_ln33_fu_390_p2[0:0] == 1'b1) ? and_ln86_3_fu_491_p2 : and_ln86_fu_380_p2);

assign select_ln32_5_fu_509_p3 = ((icmp_ln33_fu_390_p2[0:0] == 1'b1) ? add_ln32_1_fu_400_p2 : h_reg_258);

assign select_ln32_fu_410_p3 = ((icmp_ln33_fu_390_p2[0:0] == 1'b1) ? 12'd0 : w_reg_269);

assign select_ln330_1_fu_981_p3 = ((and_ln330_3_fu_976_p2[0:0] == 1'b1) ? trunc_ln331_1_fu_957_p1 : 8'd0);

assign select_ln330_fu_872_p3 = ((and_ln330_1_fu_867_p2[0:0] == 1'b1) ? trunc_ln331_fu_848_p1 : 8'd0);

assign select_ln337_1_fu_1064_p3 = ((icmp_ln337_1_reg_1325[0:0] == 1'b1) ? trunc_ln337_1_fu_1060_p1 : 8'd0);

assign select_ln337_fu_1030_p3 = ((icmp_ln337_reg_1305[0:0] == 1'b1) ? trunc_ln337_fu_1026_p1 : 8'd0);

assign sext_ln326_1_fu_1051_p1 = sh_amt_3_reg_1320;

assign sext_ln326_fu_1017_p1 = sh_amt_1_reg_1300;

assign sext_ln331_1_fu_944_p1 = sh_amt_2_reg_1277;

assign sext_ln331_fu_835_p1 = sh_amt_reg_1240;

assign sh_amt_1_fu_814_p2 = ($signed(12'd0) - $signed(sh_amt_reg_1240));

assign sh_amt_2_fu_772_p2 = (12'd1075 - zext_ln311_1_fu_762_p1);

assign sh_amt_3_fu_923_p2 = ($signed(12'd0) - $signed(sh_amt_2_reg_1277));

assign sh_amt_fu_721_p2 = (12'd1075 - zext_ln311_fu_711_p1);

assign shl_ln339_1_fu_1054_p2 = trunc_ln328_1_fu_1048_p1 << sext_ln326_1_fu_1051_p1;

assign shl_ln339_fu_1020_p2 = trunc_ln328_fu_1014_p1 << sext_ln326_fu_1017_p1;

assign slt53_fu_369_p2 = (($signed(image_h) < $signed(zext_ln32_1_fu_327_p1)) ? 1'b1 : 1'b0);

assign slt59_fu_418_p2 = (($signed(zext_ln32_fu_406_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign slt61_fu_480_p2 = (($signed(image_h) < $signed(zext_ln32_fu_406_p1)) ? 1'b1 : 1'b0);

assign slt_fu_331_p2 = (($signed(zext_ln32_1_fu_327_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign stream_out_GX_TDATA = ((and_ln78_1_reg_1181_pp0_iter9_reg[0:0] == 1'b1) ? output_stream_element_GX_data_V_fu_1041_p3 : 8'd0);

assign stream_out_GX_TKEEP = 1'd0;

assign stream_out_GX_TLAST = 1'd0;

assign stream_out_GX_TSTRB = 1'd0;

assign stream_out_GX_TUSER = 1'd0;

assign stream_out_GY_TDATA = ((and_ln78_1_reg_1181_pp0_iter9_reg[0:0] == 1'b1) ? output_stream_element_GY_data_V_fu_1075_p3 : 8'd0);

assign stream_out_GY_TKEEP = 1'd0;

assign stream_out_GY_TLAST = 1'd0;

assign stream_out_GY_TSTRB = 1'd0;

assign stream_out_GY_TUSER = 1'd0;

assign sub_ln691_1_fu_680_p2 = (zext_ln691_3_fu_676_p1 - zext_ln691_2_fu_672_p1);

assign sub_ln691_fu_666_p2 = (zext_ln691_1_fu_662_p1 - zext_ln691_fu_658_p1);

assign tmp_1_fu_437_p4 = {{add_ln32_1_fu_400_p2[30:1]}};

assign tmp_3_fu_819_p4 = {{sh_amt_1_fu_814_p2[11:5]}};

assign tmp_5_fu_928_p4 = {{sh_amt_3_fu_923_p2[11:5]}};

assign tmp_6_fu_544_p4 = {{select_ln32_fu_410_p3[11:1]}};

assign tmp_7_fu_697_p4 = {{data_V_fu_694_p1[62:52]}};

assign tmp_8_fu_748_p4 = {{data_V_1_fu_745_p1[62:52]}};

assign tmp_fu_342_p4 = {{h_reg_258[30:1]}};

assign trunc_ln315_1_fu_905_p1 = data_V_1_reg_1263[51:0];

assign trunc_ln315_fu_796_p1 = data_V_reg_1226[51:0];

assign trunc_ln320_1_fu_908_p1 = data_V_1_reg_1263[7:0];

assign trunc_ln320_fu_799_p1 = data_V_reg_1226[7:0];

assign trunc_ln328_1_fu_1048_p1 = data_V_1_reg_1263_pp0_iter9_reg[31:0];

assign trunc_ln328_fu_1014_p1 = data_V_reg_1226_pp0_iter9_reg[31:0];

assign trunc_ln331_1_fu_957_p1 = lshr_ln331_1_fu_951_p2[7:0];

assign trunc_ln331_fu_848_p1 = lshr_ln331_fu_842_p2[7:0];

assign trunc_ln337_1_fu_1060_p1 = shl_ln339_1_fu_1054_p2[7:0];

assign trunc_ln337_fu_1026_p1 = shl_ln339_fu_1020_p2[7:0];

assign trunc_ln368_1_fu_758_p1 = data_V_1_fu_745_p1[62:0];

assign trunc_ln368_fu_707_p1 = data_V_fu_694_p1[62:0];

assign xor_ln323_1_fu_996_p2 = (icmp_ln323_1_reg_1270 ^ 1'd1);

assign xor_ln323_fu_887_p2 = (icmp_ln323_reg_1233 ^ 1'd1);

assign xor_ln327_1_fu_965_p2 = (or_ln327_1_fu_961_p2 ^ 1'd1);

assign xor_ln327_fu_856_p2 = (or_ln327_fu_852_p2 ^ 1'd1);

assign xor_ln36_fu_528_p2 = (icmp_ln36_fu_523_p2 ^ 1'd1);

assign xor_ln86_fu_594_p2 = (icmp_ln86_1_fu_589_p2 ^ 1'd1);

assign zext_ln311_1_fu_762_p1 = tmp_8_fu_748_p4;

assign zext_ln311_fu_711_p1 = tmp_7_fu_697_p4;

assign zext_ln320_1_fu_919_p1 = p_Result_1_fu_911_p3;

assign zext_ln320_fu_810_p1 = p_Result_s_fu_802_p3;

assign zext_ln32_1_fu_327_p1 = h_reg_258;

assign zext_ln32_2_fu_505_p1 = select_ln32_fu_410_p3;

assign zext_ln32_fu_406_p1 = add_ln32_1_fu_400_p2;

assign zext_ln331_1_fu_947_p1 = $unsigned(sext_ln331_1_fu_944_p1);

assign zext_ln331_fu_838_p1 = $unsigned(sext_ln331_fu_835_p1);

assign zext_ln33_1_fu_386_p1 = w_reg_269;

assign zext_ln33_fu_517_p1 = select_ln32_fu_410_p3;

assign zext_ln691_1_fu_662_p1 = line_buffer_V_2_q1;

assign zext_ln691_2_fu_672_p1 = sliding_window_V_0_2;

assign zext_ln691_3_fu_676_p1 = sliding_window_V_2_2;

assign zext_ln691_fu_658_p1 = sliding_window_V_1_1;

always @ (posedge ap_clk) begin
    zext_ln33_reg_1155[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //GradientGenUnit_GradientGen
