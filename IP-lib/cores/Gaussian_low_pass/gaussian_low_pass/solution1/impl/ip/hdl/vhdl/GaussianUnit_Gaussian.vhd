-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GaussianUnit_Gaussian is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    image_w : IN STD_LOGIC_VECTOR (31 downto 0);
    image_h : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of GaussianUnit_Gaussian is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal line_buffer_V_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_1_ce0 : STD_LOGIC;
    signal line_buffer_V_1_we0 : STD_LOGIC;
    signal line_buffer_V_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_1_ce1 : STD_LOGIC;
    signal line_buffer_V_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_V_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_0_ce0 : STD_LOGIC;
    signal line_buffer_V_0_we0 : STD_LOGIC;
    signal line_buffer_V_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_2_ce0 : STD_LOGIC;
    signal line_buffer_V_2_we0 : STD_LOGIC;
    signal line_buffer_V_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_2_ce1 : STD_LOGIC;
    signal line_buffer_V_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_V_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_3_ce0 : STD_LOGIC;
    signal line_buffer_V_3_we0 : STD_LOGIC;
    signal line_buffer_V_3_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_3_ce1 : STD_LOGIC;
    signal line_buffer_V_3_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_V_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_4_ce0 : STD_LOGIC;
    signal line_buffer_V_4_we0 : STD_LOGIC;
    signal line_buffer_V_4_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_4_ce1 : STD_LOGIC;
    signal line_buffer_V_4_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sliding_window_V_0_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_0_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_0_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_0_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_1_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_1_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_1_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_1_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_2_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_2_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_2_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_2_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_3_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_3_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_3_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_3_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_4_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_4_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_4_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_4_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln30_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal and_ln78_1_reg_1424 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1424_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_reg_297 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_reg_308 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_stream_element_data_V_1_reg_319 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add18_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub61_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_fu_365_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op57_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln30_reg_1377 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_3_fu_515_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln31_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_1386 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln34_reg_1391 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_element_data_V_reg_1395 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_V_1_addr_reg_1400 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_2_addr_reg_1406 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_3_addr_reg_1412 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_4_addr_reg_1418 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln78_1_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1424_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_1_reg_1424_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_591_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buffer_V_1_load_reg_1433 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal line_buffer_V_2_load_reg_1439 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_V_3_load_reg_1445 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_V_4_load_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln691_4_fu_1129_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln691_4_reg_1457 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln691_6_fu_1145_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln691_6_reg_1462 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln691_8_fu_1157_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_8_reg_1467 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_15_fu_1203_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln691_15_reg_1472 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln691_15_reg_1472_pp0_iter3_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln691_21_fu_1259_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln691_21_reg_1477 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln691_21_reg_1477_pp0_iter3_reg : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln691_10_fu_1280_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln691_10_reg_1482 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_349_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_1_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_386_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal slt53_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev54_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_1_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_1_fu_433_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln31_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln30_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt57_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev58_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev52_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_470_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal slt59_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev60_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp46_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_3_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_443_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_2_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln34_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_1_fu_462_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_552_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln78_1_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln78_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_2_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_2_fu_503_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_793_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1345_1_fu_805_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_2_fu_817_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_3_fu_829_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_4_fu_841_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1345_5_fu_852_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_6_fu_864_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1345_7_fu_876_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1345_8_fu_888_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1345_9_fu_900_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_s_fu_911_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_10_fu_923_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1345_11_fu_935_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1345_12_fu_947_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1345_13_fu_959_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_14_fu_970_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_15_fu_982_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1345_16_fu_994_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1345_17_fu_1006_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1345_18_fu_1018_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_19_fu_1029_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1345_20_fu_1041_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_21_fu_1053_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_22_fu_1065_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1345_23_fu_1077_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln215_fu_801_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln215_2_fu_825_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln691_fu_1089_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln691_1_fu_1095_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_1_fu_813_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_1_fu_1099_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_4_fu_848_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln215_5_fu_860_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln691_2_fu_1109_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln691_3_fu_1115_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_3_fu_837_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_3_fu_1119_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln691_4_fu_1125_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln691_2_fu_1105_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln215_7_fu_884_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_8_fu_896_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_5_fu_1135_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln691_6_fu_1141_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln215_6_fu_872_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln215_10_fu_919_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_11_fu_931_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_7_fu_1151_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_9_fu_907_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_13_fu_955_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_14_fu_966_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_11_fu_1163_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln691_10_fu_1169_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln215_12_fu_943_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln691_12_fu_1173_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln215_16_fu_990_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_17_fu_1002_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_13_fu_1183_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln691_12_fu_1189_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln215_15_fu_978_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln691_14_fu_1193_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln691_13_fu_1199_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln691_11_fu_1179_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln215_19_fu_1025_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln215_20_fu_1037_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln691_16_fu_1209_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln691_15_fu_1215_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_18_fu_1014_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_17_fu_1219_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln215_21_fu_1049_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln215_22_fu_1061_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln691_18_fu_1229_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln215_23_fu_1073_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln691_fu_1085_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln691_19_fu_1239_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln691_18_fu_1245_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln691_17_fu_1235_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln691_20_fu_1249_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln691_19_fu_1255_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln691_16_fu_1225_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln691_8_fu_1271_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln691_7_fu_1268_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln691_9_fu_1274_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln691_5_fu_1265_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln691_20_fu_1292_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln691_14_fu_1289_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln691_22_fu_1295_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln691_9_fu_1286_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln691_23_fu_1301_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal kernel_output_V_fu_1307_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_60 : BOOLEAN;
    signal ap_enable_state4_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_83 : BOOLEAN;
    signal ap_enable_state5_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_86 : BOOLEAN;
    signal ap_enable_operation_62 : BOOLEAN;
    signal ap_enable_operation_85 : BOOLEAN;
    signal ap_enable_operation_88 : BOOLEAN;
    signal ap_enable_operation_64 : BOOLEAN;
    signal ap_enable_operation_87 : BOOLEAN;
    signal ap_enable_operation_90 : BOOLEAN;
    signal ap_enable_operation_66 : BOOLEAN;
    signal ap_enable_operation_89 : BOOLEAN;
    signal ap_enable_operation_91 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_349_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_349_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_243 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component GaussianUnit_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component GaussianUnit_Gaussian_line_buffer_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component GaussianUnit_Gaussian_line_buffer_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_V_1_U : component GaussianUnit_Gaussian_line_buffer_V_1
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_1_address0,
        ce0 => line_buffer_V_1_ce0,
        we0 => line_buffer_V_1_we0,
        d0 => line_buffer_V_2_q1,
        address1 => line_buffer_V_1_address1,
        ce1 => line_buffer_V_1_ce1,
        q1 => line_buffer_V_1_q1);

    line_buffer_V_0_U : component GaussianUnit_Gaussian_line_buffer_V_0
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_0_address0,
        ce0 => line_buffer_V_0_ce0,
        we0 => line_buffer_V_0_we0,
        d0 => line_buffer_V_1_q1);

    line_buffer_V_2_U : component GaussianUnit_Gaussian_line_buffer_V_1
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_2_address0,
        ce0 => line_buffer_V_2_ce0,
        we0 => line_buffer_V_2_we0,
        d0 => line_buffer_V_3_q1,
        address1 => line_buffer_V_2_address1,
        ce1 => line_buffer_V_2_ce1,
        q1 => line_buffer_V_2_q1);

    line_buffer_V_3_U : component GaussianUnit_Gaussian_line_buffer_V_1
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_3_address0,
        ce0 => line_buffer_V_3_ce0,
        we0 => line_buffer_V_3_we0,
        d0 => line_buffer_V_4_q1,
        address1 => line_buffer_V_3_address1,
        ce1 => line_buffer_V_3_ce1,
        q1 => line_buffer_V_3_q1);

    line_buffer_V_4_U : component GaussianUnit_Gaussian_line_buffer_V_1
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_4_address0,
        ce0 => line_buffer_V_4_ce0,
        we0 => line_buffer_V_4_we0,
        d0 => ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4,
        address1 => line_buffer_V_4_address1,
        ce1 => line_buffer_V_4_ce1,
        q1 => line_buffer_V_4_q1);

    mul_32ns_32ns_64_2_1_U1 : component GaussianUnit_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_349_p0,
        din1 => grp_fu_349_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_fu_428_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                h_reg_297 <= select_ln30_3_fu_515_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                h_reg_297 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_fu_428_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_286 <= add_ln30_fu_365_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_286 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    input_stream_element_data_V_1_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_243)) then
                if (((or_ln34_reg_1391 = ap_const_lv1_1) and (icmp_ln30_reg_1377 = ap_const_lv1_0))) then 
                    input_stream_element_data_V_1_reg_319 <= ap_const_lv16_0;
                elsif (((or_ln34_reg_1391 = ap_const_lv1_0) and (icmp_ln30_reg_1377 = ap_const_lv1_0))) then 
                    input_stream_element_data_V_1_reg_319 <= input_stream_element_data_V_reg_1395;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    input_stream_element_data_V_1_reg_319 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319;
                end if;
            end if; 
        end if;
    end process;

    w_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_fu_428_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                w_reg_308 <= add_ln31_fu_591_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                w_reg_308 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    add_ln691_10_reg_1482(23 downto 3) <= add_ln691_10_fu_1280_p2(23 downto 3);
                    add_ln691_15_reg_1472(23 downto 4) <= add_ln691_15_fu_1203_p2(23 downto 4);
                    add_ln691_15_reg_1472_pp0_iter3_reg(23 downto 4) <= add_ln691_15_reg_1472(23 downto 4);
                    add_ln691_21_reg_1477(22 downto 3) <= add_ln691_21_fu_1259_p2(22 downto 3);
                    add_ln691_21_reg_1477_pp0_iter3_reg(22 downto 3) <= add_ln691_21_reg_1477(22 downto 3);
                    add_ln691_4_reg_1457(22 downto 3) <= add_ln691_4_fu_1129_p2(22 downto 3);
                    add_ln691_6_reg_1462(22 downto 5) <= add_ln691_6_fu_1145_p2(22 downto 5);
                    add_ln691_8_reg_1467(21 downto 4) <= add_ln691_8_fu_1157_p2(21 downto 4);
                and_ln78_1_reg_1424_pp0_iter2_reg <= and_ln78_1_reg_1424_pp0_iter1_reg;
                and_ln78_1_reg_1424_pp0_iter3_reg <= and_ln78_1_reg_1424_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln30_fu_428_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln78_1_reg_1424 <= and_ln78_1_fu_585_p2;
                line_buffer_V_1_addr_reg_1400 <= zext_ln31_fu_523_p1(11 - 1 downto 0);
                line_buffer_V_2_addr_reg_1406 <= zext_ln31_fu_523_p1(11 - 1 downto 0);
                line_buffer_V_3_addr_reg_1412 <= zext_ln31_fu_523_p1(11 - 1 downto 0);
                line_buffer_V_4_addr_reg_1418 <= zext_ln31_fu_523_p1(11 - 1 downto 0);
                or_ln34_reg_1391 <= or_ln34_fu_542_p2;
                    zext_ln31_reg_1386(11 downto 0) <= zext_ln31_fu_523_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln78_1_reg_1424_pp0_iter1_reg <= and_ln78_1_reg_1424;
                icmp_ln30_reg_1377 <= icmp_ln30_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln34_fu_542_p2 = ap_const_lv1_0) and (icmp_ln30_fu_428_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                input_stream_element_data_V_reg_1395 <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                line_buffer_V_1_load_reg_1433 <= line_buffer_V_1_q1;
                line_buffer_V_2_load_reg_1439 <= line_buffer_V_2_q1;
                line_buffer_V_3_load_reg_1445 <= line_buffer_V_3_q1;
                line_buffer_V_4_load_reg_1451 <= line_buffer_V_4_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sliding_window_V_0_1 <= sliding_window_V_0_2;
                sliding_window_V_0_2 <= sliding_window_V_0_3;
                sliding_window_V_0_3 <= sliding_window_V_0_4;
                sliding_window_V_0_4 <= line_buffer_V_1_load_reg_1433;
                sliding_window_V_1_1 <= sliding_window_V_1_2;
                sliding_window_V_1_2 <= sliding_window_V_1_3;
                sliding_window_V_1_3 <= sliding_window_V_1_4;
                sliding_window_V_1_4 <= line_buffer_V_2_load_reg_1439;
                sliding_window_V_2_1 <= sliding_window_V_2_2;
                sliding_window_V_2_2 <= sliding_window_V_2_3;
                sliding_window_V_2_3 <= sliding_window_V_2_4;
                sliding_window_V_2_4 <= line_buffer_V_3_load_reg_1445;
                sliding_window_V_3_1 <= sliding_window_V_3_2;
                sliding_window_V_3_2 <= sliding_window_V_3_3;
                sliding_window_V_3_3 <= sliding_window_V_3_4;
                sliding_window_V_3_4 <= line_buffer_V_4_load_reg_1451;
                sliding_window_V_4_1 <= sliding_window_V_4_2;
                sliding_window_V_4_2 <= sliding_window_V_4_3;
                sliding_window_V_4_3 <= sliding_window_V_4_4;
                sliding_window_V_4_4 <= input_stream_element_data_V_1_reg_319;
            end if;
        end if;
    end process;
    zext_ln31_reg_1386(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    add_ln691_4_reg_1457(2 downto 0) <= "000";
    add_ln691_6_reg_1462(4 downto 0) <= "00000";
    add_ln691_8_reg_1467(3 downto 0) <= "0000";
    add_ln691_15_reg_1472(3 downto 0) <= "0000";
    add_ln691_15_reg_1472_pp0_iter3_reg(3 downto 0) <= "0000";
    add_ln691_21_reg_1477(2 downto 0) <= "000";
    add_ln691_21_reg_1477_pp0_iter3_reg(2 downto 0) <= "000";
    add_ln691_10_reg_1482(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln30_fu_428_p2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln30_fu_428_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln30_fu_428_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add18_fu_337_p2 <= std_logic_vector(unsigned(image_w) + unsigned(ap_const_lv32_2));
    add_fu_331_p2 <= std_logic_vector(unsigned(image_h) + unsigned(ap_const_lv32_2));
    add_ln30_1_fu_433_p2 <= std_logic_vector(unsigned(h_reg_297) + unsigned(ap_const_lv31_1));
    add_ln30_fu_365_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_286) + unsigned(ap_const_lv64_1));
    add_ln31_fu_591_p2 <= std_logic_vector(unsigned(select_ln30_fu_443_p3) + unsigned(ap_const_lv12_1));
    add_ln691_10_fu_1280_p2 <= std_logic_vector(unsigned(add_ln691_9_fu_1274_p2) + unsigned(zext_ln691_5_fu_1265_p1));
    add_ln691_11_fu_1163_p2 <= std_logic_vector(unsigned(zext_ln215_13_fu_955_p1) + unsigned(zext_ln215_14_fu_966_p1));
    add_ln691_12_fu_1173_p2 <= std_logic_vector(unsigned(zext_ln691_10_fu_1169_p1) + unsigned(zext_ln215_12_fu_943_p1));
    add_ln691_13_fu_1183_p2 <= std_logic_vector(unsigned(zext_ln215_16_fu_990_p1) + unsigned(zext_ln215_17_fu_1002_p1));
    add_ln691_14_fu_1193_p2 <= std_logic_vector(unsigned(zext_ln691_12_fu_1189_p1) + unsigned(zext_ln215_15_fu_978_p1));
    add_ln691_15_fu_1203_p2 <= std_logic_vector(unsigned(zext_ln691_13_fu_1199_p1) + unsigned(zext_ln691_11_fu_1179_p1));
    add_ln691_16_fu_1209_p2 <= std_logic_vector(unsigned(zext_ln215_19_fu_1025_p1) + unsigned(zext_ln215_20_fu_1037_p1));
    add_ln691_17_fu_1219_p2 <= std_logic_vector(unsigned(zext_ln691_15_fu_1215_p1) + unsigned(zext_ln215_18_fu_1014_p1));
    add_ln691_18_fu_1229_p2 <= std_logic_vector(unsigned(zext_ln215_21_fu_1049_p1) + unsigned(zext_ln215_22_fu_1061_p1));
    add_ln691_19_fu_1239_p2 <= std_logic_vector(unsigned(zext_ln215_23_fu_1073_p1) + unsigned(zext_ln691_fu_1085_p1));
    add_ln691_1_fu_1099_p2 <= std_logic_vector(unsigned(zext_ln691_1_fu_1095_p1) + unsigned(zext_ln215_1_fu_813_p1));
    add_ln691_20_fu_1249_p2 <= std_logic_vector(unsigned(zext_ln691_18_fu_1245_p1) + unsigned(zext_ln691_17_fu_1235_p1));
    add_ln691_21_fu_1259_p2 <= std_logic_vector(unsigned(zext_ln691_19_fu_1255_p1) + unsigned(zext_ln691_16_fu_1225_p1));
    add_ln691_22_fu_1295_p2 <= std_logic_vector(unsigned(zext_ln691_20_fu_1292_p1) + unsigned(zext_ln691_14_fu_1289_p1));
    add_ln691_23_fu_1301_p2 <= std_logic_vector(unsigned(add_ln691_22_fu_1295_p2) + unsigned(zext_ln691_9_fu_1286_p1));
    add_ln691_2_fu_1109_p2 <= std_logic_vector(unsigned(zext_ln215_4_fu_848_p1) + unsigned(zext_ln215_5_fu_860_p1));
    add_ln691_3_fu_1119_p2 <= std_logic_vector(unsigned(zext_ln691_3_fu_1115_p1) + unsigned(zext_ln215_3_fu_837_p1));
    add_ln691_4_fu_1129_p2 <= std_logic_vector(unsigned(zext_ln691_4_fu_1125_p1) + unsigned(zext_ln691_2_fu_1105_p1));
    add_ln691_5_fu_1135_p2 <= std_logic_vector(unsigned(zext_ln215_7_fu_884_p1) + unsigned(zext_ln215_8_fu_896_p1));
    add_ln691_6_fu_1145_p2 <= std_logic_vector(unsigned(zext_ln691_6_fu_1141_p1) + unsigned(zext_ln215_6_fu_872_p1));
    add_ln691_7_fu_1151_p2 <= std_logic_vector(unsigned(zext_ln215_10_fu_919_p1) + unsigned(zext_ln215_11_fu_931_p1));
    add_ln691_8_fu_1157_p2 <= std_logic_vector(unsigned(add_ln691_7_fu_1151_p2) + unsigned(zext_ln215_9_fu_907_p1));
    add_ln691_9_fu_1274_p2 <= std_logic_vector(unsigned(zext_ln691_8_fu_1271_p1) + unsigned(zext_ln691_7_fu_1268_p1));
    add_ln691_fu_1089_p2 <= std_logic_vector(unsigned(zext_ln215_fu_801_p1) + unsigned(zext_ln215_2_fu_825_p1));
    and_ln78_1_fu_585_p2 <= (select_ln30_2_fu_503_p3 and and_ln78_2_fu_579_p2);
    and_ln78_2_fu_579_p2 <= (xor_ln78_fu_573_p2 and icmp_ln78_fu_562_p2);
    and_ln78_3_fu_497_p2 <= (rev60_fu_491_p2 and icmp46_fu_480_p2);
    and_ln78_fu_413_p2 <= (rev54_fu_407_p2 and icmp_fu_396_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_in_TVALID, stream_out_TREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, and_ln78_1_reg_1424_pp0_iter3_reg, ap_predicate_op57_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= (((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln78_1_reg_1424_pp0_iter3_reg) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op57_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_in_TVALID, stream_out_TREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, and_ln78_1_reg_1424_pp0_iter3_reg, ap_predicate_op57_read_state4, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= (((stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op57_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or ((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln78_1_reg_1424_pp0_iter3_reg)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_in_TVALID, stream_out_TREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, and_ln78_1_reg_1424_pp0_iter3_reg, ap_predicate_op57_read_state4, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= (((stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op57_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or ((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln78_1_reg_1424_pp0_iter3_reg)))));
    end process;


    ap_block_state4_pp0_stage0_iter0_assign_proc : process(stream_in_TVALID, ap_predicate_op57_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter0 <= ((stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op57_read_state4 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(stream_out_TREADY, and_ln78_1_reg_1424_pp0_iter3_reg)
    begin
                ap_block_state8_io <= ((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln78_1_reg_1424_pp0_iter3_reg));
    end process;


    ap_block_state8_pp0_stage0_iter4_assign_proc : process(stream_out_TREADY, and_ln78_1_reg_1424_pp0_iter3_reg)
    begin
                ap_block_state8_pp0_stage0_iter4 <= ((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln78_1_reg_1424_pp0_iter3_reg));
    end process;


    ap_condition_243_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_243 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln30_fu_428_p2)
    begin
        if ((icmp_ln30_fu_428_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_60_assign_proc : process(icmp_ln30_fu_428_p2)
    begin
                ap_enable_operation_60 <= (icmp_ln30_fu_428_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_62_assign_proc : process(icmp_ln30_fu_428_p2)
    begin
                ap_enable_operation_62 <= (icmp_ln30_fu_428_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_64_assign_proc : process(icmp_ln30_fu_428_p2)
    begin
                ap_enable_operation_64 <= (icmp_ln30_fu_428_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_66_assign_proc : process(icmp_ln30_fu_428_p2)
    begin
                ap_enable_operation_66 <= (icmp_ln30_fu_428_p2 = ap_const_lv1_0);
    end process;

        ap_enable_operation_83 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_85 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_86 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_87 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_88 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_89 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_90 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_91 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state4_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state4_pp0_iter0_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state5_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state5_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4_assign_proc : process(icmp_ln30_reg_1377, or_ln34_reg_1391, input_stream_element_data_V_reg_1395, ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319)
    begin
        if ((icmp_ln30_reg_1377 = ap_const_lv1_0)) then
            if ((or_ln34_reg_1391 = ap_const_lv1_1)) then 
                ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4 <= ap_const_lv16_0;
            elsif ((or_ln34_reg_1391 = ap_const_lv1_0)) then 
                ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4 <= input_stream_element_data_V_reg_1395;
            else 
                ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319;
            end if;
        else 
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319 <= "XXXXXXXXXXXXXXXX";

    ap_predicate_op57_read_state4_assign_proc : process(icmp_ln30_fu_428_p2, or_ln34_fu_542_p2)
    begin
                ap_predicate_op57_read_state4 <= ((or_ln34_fu_542_p2 = ap_const_lv1_0) and (icmp_ln30_fu_428_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_349_p0 <= grp_fu_349_p00(32 - 1 downto 0);
    grp_fu_349_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_331_p2),64));
    grp_fu_349_p1 <= grp_fu_349_p10(32 - 1 downto 0);
    grp_fu_349_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add18_fu_337_p2),64));
    icmp46_fu_480_p2 <= "0" when (tmp_2_fu_470_p4 = ap_const_lv30_0) else "1";
    icmp_fu_396_p2 <= "0" when (tmp_1_fu_386_p4 = ap_const_lv30_0) else "1";
    icmp_ln30_fu_428_p2 <= "1" when (indvar_flatten_reg_286 = grp_fu_349_p2) else "0";
    icmp_ln31_fu_423_p2 <= "1" when (zext_ln31_1_fu_419_p1 = add18_fu_337_p2) else "0";
    icmp_ln34_fu_531_p2 <= "1" when (signed(zext_ln30_2_fu_511_p1) < signed(image_w)) else "0";
    icmp_ln78_1_fu_568_p2 <= "1" when (signed(sub61_fu_360_p2) < signed(zext_ln30_2_fu_511_p1)) else "0";
    icmp_ln78_fu_562_p2 <= "0" when (tmp_fu_552_p4 = ap_const_lv11_0) else "1";
    kernel_output_V_fu_1307_p4 <= add_ln691_23_fu_1301_p2(24 downto 10);
    line_buffer_V_0_address0 <= zext_ln31_reg_1386(11 - 1 downto 0);

    line_buffer_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_1_address0 <= line_buffer_V_1_addr_reg_1400;
    line_buffer_V_1_address1 <= zext_ln31_fu_523_p1(11 - 1 downto 0);

    line_buffer_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buffer_V_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_2_address0 <= line_buffer_V_2_addr_reg_1406;
    line_buffer_V_2_address1 <= zext_ln31_fu_523_p1(11 - 1 downto 0);

    line_buffer_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buffer_V_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_3_address0 <= line_buffer_V_3_addr_reg_1412;
    line_buffer_V_3_address1 <= zext_ln31_fu_523_p1(11 - 1 downto 0);

    line_buffer_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_3_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buffer_V_3_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_3_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_4_address0 <= line_buffer_V_4_addr_reg_1418;
    line_buffer_V_4_address1 <= zext_ln31_fu_523_p1(11 - 1 downto 0);

    line_buffer_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_4_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_4_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            line_buffer_V_4_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_V_4_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln34_fu_542_p2 <= (xor_ln34_fu_536_p2 or select_ln30_1_fu_462_p3);
    rev52_fu_380_p2 <= (slt_fu_375_p2 xor ap_const_lv1_1);
    rev54_fu_407_p2 <= (slt53_fu_402_p2 xor ap_const_lv1_1);
    rev58_fu_456_p2 <= (slt57_fu_451_p2 xor ap_const_lv1_1);
    rev60_fu_491_p2 <= (slt59_fu_486_p2 xor ap_const_lv1_1);
    select_ln30_1_fu_462_p3 <= 
        rev58_fu_456_p2 when (icmp_ln31_fu_423_p2(0) = '1') else 
        rev52_fu_380_p2;
    select_ln30_2_fu_503_p3 <= 
        and_ln78_3_fu_497_p2 when (icmp_ln31_fu_423_p2(0) = '1') else 
        and_ln78_fu_413_p2;
    select_ln30_3_fu_515_p3 <= 
        add_ln30_1_fu_433_p2 when (icmp_ln31_fu_423_p2(0) = '1') else 
        h_reg_297;
    select_ln30_fu_443_p3 <= 
        ap_const_lv12_0 when (icmp_ln31_fu_423_p2(0) = '1') else 
        w_reg_308;
    shl_ln1345_10_fu_923_p3 <= (sliding_window_V_2_2 & ap_const_lv5_0);
    shl_ln1345_11_fu_935_p3 <= (sliding_window_V_2_3 & ap_const_lv5_0);
    shl_ln1345_12_fu_947_p3 <= (sliding_window_V_2_4 & ap_const_lv5_0);
    shl_ln1345_13_fu_959_p3 <= (line_buffer_V_3_load_reg_1445 & ap_const_lv4_0);
    shl_ln1345_14_fu_970_p3 <= (sliding_window_V_3_1 & ap_const_lv4_0);
    shl_ln1345_15_fu_982_p3 <= (sliding_window_V_3_2 & ap_const_lv5_0);
    shl_ln1345_16_fu_994_p3 <= (sliding_window_V_3_3 & ap_const_lv5_0);
    shl_ln1345_17_fu_1006_p3 <= (sliding_window_V_3_4 & ap_const_lv5_0);
    shl_ln1345_18_fu_1018_p3 <= (line_buffer_V_4_load_reg_1451 & ap_const_lv4_0);
    shl_ln1345_19_fu_1029_p3 <= (sliding_window_V_4_1 & ap_const_lv3_0);
    shl_ln1345_1_fu_805_p3 <= (sliding_window_V_0_2 & ap_const_lv4_0);
    shl_ln1345_20_fu_1041_p3 <= (sliding_window_V_4_2 & ap_const_lv4_0);
    shl_ln1345_21_fu_1053_p3 <= (sliding_window_V_4_3 & ap_const_lv4_0);
    shl_ln1345_22_fu_1065_p3 <= (sliding_window_V_4_4 & ap_const_lv4_0);
    shl_ln1345_23_fu_1077_p3 <= (input_stream_element_data_V_1_reg_319 & ap_const_lv3_0);
    shl_ln1345_2_fu_817_p3 <= (sliding_window_V_0_3 & ap_const_lv4_0);
    shl_ln1345_3_fu_829_p3 <= (sliding_window_V_0_4 & ap_const_lv4_0);
    shl_ln1345_4_fu_841_p3 <= (line_buffer_V_1_load_reg_1433 & ap_const_lv3_0);
    shl_ln1345_5_fu_852_p3 <= (sliding_window_V_1_1 & ap_const_lv4_0);
    shl_ln1345_6_fu_864_p3 <= (sliding_window_V_1_2 & ap_const_lv5_0);
    shl_ln1345_7_fu_876_p3 <= (sliding_window_V_1_3 & ap_const_lv5_0);
    shl_ln1345_8_fu_888_p3 <= (sliding_window_V_1_4 & ap_const_lv5_0);
    shl_ln1345_9_fu_900_p3 <= (line_buffer_V_2_load_reg_1439 & ap_const_lv4_0);
    shl_ln1345_s_fu_911_p3 <= (sliding_window_V_2_1 & ap_const_lv4_0);
    shl_ln_fu_793_p3 <= (sliding_window_V_0_1 & ap_const_lv3_0);
    slt53_fu_402_p2 <= "1" when (signed(sub_fu_355_p2) < signed(zext_ln30_1_fu_371_p1)) else "0";
    slt57_fu_451_p2 <= "1" when (signed(zext_ln30_fu_439_p1) < signed(image_h)) else "0";
    slt59_fu_486_p2 <= "1" when (signed(sub_fu_355_p2) < signed(zext_ln30_fu_439_p1)) else "0";
    slt_fu_375_p2 <= "1" when (signed(zext_ln30_1_fu_371_p1) < signed(image_h)) else "0";

    stream_in_TDATA_blk_n_assign_proc : process(stream_in_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln30_fu_428_p2, or_ln34_fu_542_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln34_fu_542_p2 = ap_const_lv1_0) and (icmp_ln30_fu_428_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            stream_in_TDATA_blk_n <= stream_in_TVALID;
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op57_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op57_read_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            stream_in_TREADY <= ap_const_logic_1;
        else 
            stream_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_output_V_fu_1307_p4),16));

    stream_out_TDATA_blk_n_assign_proc : process(stream_out_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, and_ln78_1_reg_1424_pp0_iter3_reg)
    begin
        if (((ap_const_lv1_1 = and_ln78_1_reg_1424_pp0_iter3_reg) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            stream_out_TDATA_blk_n <= stream_out_TREADY;
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TKEEP <= ap_const_lv2_0;
    stream_out_TLAST <= ap_const_lv1_0;
    stream_out_TSTRB <= ap_const_lv2_0;
    stream_out_TUSER <= ap_const_lv1_0;

    stream_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, and_ln78_1_reg_1424_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln78_1_reg_1424_pp0_iter3_reg) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_out_TVALID <= ap_const_logic_1;
        else 
            stream_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    sub61_fu_360_p2 <= std_logic_vector(unsigned(image_w) + unsigned(ap_const_lv32_1));
    sub_fu_355_p2 <= std_logic_vector(unsigned(image_h) + unsigned(ap_const_lv32_1));
    tmp_1_fu_386_p4 <= h_reg_297(30 downto 1);
    tmp_2_fu_470_p4 <= add_ln30_1_fu_433_p2(30 downto 1);
    tmp_fu_552_p4 <= select_ln30_fu_443_p3(11 downto 1);
    xor_ln34_fu_536_p2 <= (icmp_ln34_fu_531_p2 xor ap_const_lv1_1);
    xor_ln78_fu_573_p2 <= (icmp_ln78_1_fu_568_p2 xor ap_const_lv1_1);
    zext_ln215_10_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_s_fu_911_p3),22));
    zext_ln215_11_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_10_fu_923_p3),22));
    zext_ln215_12_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_11_fu_935_p3),23));
    zext_ln215_13_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_12_fu_947_p3),22));
    zext_ln215_14_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_13_fu_959_p3),22));
    zext_ln215_15_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_14_fu_970_p3),23));
    zext_ln215_16_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_15_fu_982_p3),22));
    zext_ln215_17_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_16_fu_994_p3),22));
    zext_ln215_18_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_17_fu_1006_p3),22));
    zext_ln215_19_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_18_fu_1018_p3),21));
    zext_ln215_1_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_1_fu_805_p3),22));
    zext_ln215_20_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_19_fu_1029_p3),21));
    zext_ln215_21_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_20_fu_1041_p3),21));
    zext_ln215_22_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_21_fu_1053_p3),21));
    zext_ln215_23_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_22_fu_1065_p3),21));
    zext_ln215_2_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_2_fu_817_p3),21));
    zext_ln215_3_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_3_fu_829_p3),22));
    zext_ln215_4_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_4_fu_841_p3),21));
    zext_ln215_5_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_5_fu_852_p3),21));
    zext_ln215_6_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_6_fu_864_p3),23));
    zext_ln215_7_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_7_fu_876_p3),22));
    zext_ln215_8_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_8_fu_888_p3),22));
    zext_ln215_9_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_9_fu_900_p3),22));
    zext_ln215_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_793_p3),21));
    zext_ln30_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_297),32));
    zext_ln30_2_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_fu_443_p3),32));
    zext_ln30_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_1_fu_433_p2),32));
    zext_ln31_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_308),32));
    zext_ln31_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_fu_443_p3),64));
    zext_ln691_10_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_11_fu_1163_p2),23));
    zext_ln691_11_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_12_fu_1173_p2),24));
    zext_ln691_12_fu_1189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_13_fu_1183_p2),23));
    zext_ln691_13_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_14_fu_1193_p2),24));
    zext_ln691_14_fu_1289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_15_reg_1472_pp0_iter3_reg),25));
    zext_ln691_15_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_16_fu_1209_p2),22));
    zext_ln691_16_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_17_fu_1219_p2),23));
    zext_ln691_17_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_18_fu_1229_p2),22));
    zext_ln691_18_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_19_fu_1239_p2),22));
    zext_ln691_19_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_20_fu_1249_p2),23));
    zext_ln691_1_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_fu_1089_p2),22));
    zext_ln691_20_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_21_reg_1477_pp0_iter3_reg),25));
    zext_ln691_2_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_1_fu_1099_p2),23));
    zext_ln691_3_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_2_fu_1109_p2),22));
    zext_ln691_4_fu_1125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_3_fu_1119_p2),23));
    zext_ln691_5_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_4_reg_1457),24));
    zext_ln691_6_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_5_fu_1135_p2),23));
    zext_ln691_7_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_6_reg_1462),24));
    zext_ln691_8_fu_1271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_8_reg_1467),24));
    zext_ln691_9_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln691_10_reg_1482),25));
    zext_ln691_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1345_23_fu_1077_p3),21));
end behav;
