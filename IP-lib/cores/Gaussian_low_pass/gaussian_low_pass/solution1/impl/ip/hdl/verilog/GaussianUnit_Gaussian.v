// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module GaussianUnit_Gaussian (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        image_w,
        image_h
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [1:0] stream_in_TKEEP;
input  [1:0] stream_in_TSTRB;
input  [0:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
output  [15:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [1:0] stream_out_TKEEP;
output  [1:0] stream_out_TSTRB;
output  [0:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
input  [31:0] image_w;
input  [31:0] image_h;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_TREADY;
reg stream_out_TVALID;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] line_buffer_V_1_address0;
reg    line_buffer_V_1_ce0;
reg    line_buffer_V_1_we0;
wire   [10:0] line_buffer_V_1_address1;
reg    line_buffer_V_1_ce1;
wire   [15:0] line_buffer_V_1_q1;
wire   [10:0] line_buffer_V_0_address0;
reg    line_buffer_V_0_ce0;
reg    line_buffer_V_0_we0;
wire   [10:0] line_buffer_V_2_address0;
reg    line_buffer_V_2_ce0;
reg    line_buffer_V_2_we0;
wire   [10:0] line_buffer_V_2_address1;
reg    line_buffer_V_2_ce1;
wire   [15:0] line_buffer_V_2_q1;
wire   [10:0] line_buffer_V_3_address0;
reg    line_buffer_V_3_ce0;
reg    line_buffer_V_3_we0;
wire   [10:0] line_buffer_V_3_address1;
reg    line_buffer_V_3_ce1;
wire   [15:0] line_buffer_V_3_q1;
wire   [10:0] line_buffer_V_4_address0;
reg    line_buffer_V_4_ce0;
reg    line_buffer_V_4_we0;
wire   [10:0] line_buffer_V_4_address1;
reg    line_buffer_V_4_ce1;
wire   [15:0] line_buffer_V_4_q1;
reg   [15:0] sliding_window_V_0_1;
reg   [15:0] sliding_window_V_0_2;
reg   [15:0] sliding_window_V_0_3;
reg   [15:0] sliding_window_V_0_4;
reg   [15:0] sliding_window_V_1_1;
reg   [15:0] sliding_window_V_1_2;
reg   [15:0] sliding_window_V_1_3;
reg   [15:0] sliding_window_V_1_4;
reg   [15:0] sliding_window_V_2_1;
reg   [15:0] sliding_window_V_2_2;
reg   [15:0] sliding_window_V_2_3;
reg   [15:0] sliding_window_V_2_4;
reg   [15:0] sliding_window_V_3_1;
reg   [15:0] sliding_window_V_3_2;
reg   [15:0] sliding_window_V_3_3;
reg   [15:0] sliding_window_V_3_4;
reg   [15:0] sliding_window_V_4_1;
reg   [15:0] sliding_window_V_4_2;
reg   [15:0] sliding_window_V_4_3;
reg   [15:0] sliding_window_V_4_4;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln30_fu_428_p2;
wire   [0:0] or_ln34_fu_542_p2;
reg    stream_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] and_ln78_1_reg_1424;
reg   [0:0] and_ln78_1_reg_1424_pp0_iter3_reg;
reg   [63:0] indvar_flatten_reg_286;
reg   [30:0] h_reg_297;
reg   [11:0] w_reg_308;
reg   [15:0] input_stream_element_data_V_1_reg_319;
wire   [31:0] add_fu_331_p2;
wire   [31:0] add18_fu_337_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_fu_355_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] sub61_fu_360_p2;
wire   [63:0] grp_fu_349_p2;
wire   [63:0] add_ln30_fu_365_p2;
reg    ap_predicate_op57_read_state4;
reg    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_state8_pp0_stage0_iter4;
reg    ap_block_state8_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln30_reg_1377;
wire   [30:0] select_ln30_3_fu_515_p3;
wire   [63:0] zext_ln31_fu_523_p1;
reg   [63:0] zext_ln31_reg_1386;
reg   [0:0] or_ln34_reg_1391;
reg   [15:0] input_stream_element_data_V_reg_1395;
reg   [10:0] line_buffer_V_1_addr_reg_1400;
reg   [10:0] line_buffer_V_2_addr_reg_1406;
reg   [10:0] line_buffer_V_3_addr_reg_1412;
reg   [10:0] line_buffer_V_4_addr_reg_1418;
wire   [0:0] and_ln78_1_fu_585_p2;
reg   [0:0] and_ln78_1_reg_1424_pp0_iter1_reg;
reg   [0:0] and_ln78_1_reg_1424_pp0_iter2_reg;
wire   [11:0] add_ln31_fu_591_p2;
reg   [15:0] line_buffer_V_1_load_reg_1433;
reg    ap_enable_reg_pp0_iter1;
reg   [15:0] line_buffer_V_2_load_reg_1439;
reg   [15:0] line_buffer_V_3_load_reg_1445;
reg   [15:0] line_buffer_V_4_load_reg_1451;
wire   [22:0] add_ln691_4_fu_1129_p2;
reg   [22:0] add_ln691_4_reg_1457;
wire   [22:0] add_ln691_6_fu_1145_p2;
reg   [22:0] add_ln691_6_reg_1462;
wire   [21:0] add_ln691_8_fu_1157_p2;
reg   [21:0] add_ln691_8_reg_1467;
wire   [23:0] add_ln691_15_fu_1203_p2;
reg   [23:0] add_ln691_15_reg_1472;
reg   [23:0] add_ln691_15_reg_1472_pp0_iter3_reg;
wire   [22:0] add_ln691_21_fu_1259_p2;
reg   [22:0] add_ln691_21_reg_1477;
reg   [22:0] add_ln691_21_reg_1477_pp0_iter3_reg;
wire   [23:0] add_ln691_10_fu_1280_p2;
reg   [23:0] add_ln691_10_reg_1482;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [15:0] ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4;
wire   [15:0] ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_349_p0;
wire   [31:0] grp_fu_349_p1;
wire   [31:0] zext_ln30_1_fu_371_p1;
wire   [0:0] slt_fu_375_p2;
wire   [29:0] tmp_1_fu_386_p4;
wire   [0:0] slt53_fu_402_p2;
wire   [0:0] rev54_fu_407_p2;
wire   [0:0] icmp_fu_396_p2;
wire   [31:0] zext_ln31_1_fu_419_p1;
wire   [30:0] add_ln30_1_fu_433_p2;
wire   [0:0] icmp_ln31_fu_423_p2;
wire   [31:0] zext_ln30_fu_439_p1;
wire   [0:0] slt57_fu_451_p2;
wire   [0:0] rev58_fu_456_p2;
wire   [0:0] rev52_fu_380_p2;
wire   [29:0] tmp_2_fu_470_p4;
wire   [0:0] slt59_fu_486_p2;
wire   [0:0] rev60_fu_491_p2;
wire   [0:0] icmp46_fu_480_p2;
wire   [0:0] and_ln78_3_fu_497_p2;
wire   [0:0] and_ln78_fu_413_p2;
wire   [11:0] select_ln30_fu_443_p3;
wire   [31:0] zext_ln30_2_fu_511_p1;
wire   [0:0] icmp_ln34_fu_531_p2;
wire   [0:0] xor_ln34_fu_536_p2;
wire   [0:0] select_ln30_1_fu_462_p3;
wire   [10:0] tmp_fu_552_p4;
wire   [0:0] icmp_ln78_1_fu_568_p2;
wire   [0:0] icmp_ln78_fu_562_p2;
wire   [0:0] xor_ln78_fu_573_p2;
wire   [0:0] and_ln78_2_fu_579_p2;
wire   [0:0] select_ln30_2_fu_503_p3;
wire   [18:0] shl_ln_fu_793_p3;
wire   [19:0] shl_ln1345_1_fu_805_p3;
wire   [19:0] shl_ln1345_2_fu_817_p3;
wire   [19:0] shl_ln1345_3_fu_829_p3;
wire   [18:0] shl_ln1345_4_fu_841_p3;
wire   [19:0] shl_ln1345_5_fu_852_p3;
wire   [20:0] shl_ln1345_6_fu_864_p3;
wire   [20:0] shl_ln1345_7_fu_876_p3;
wire   [20:0] shl_ln1345_8_fu_888_p3;
wire   [19:0] shl_ln1345_9_fu_900_p3;
wire   [19:0] shl_ln1345_s_fu_911_p3;
wire   [20:0] shl_ln1345_10_fu_923_p3;
wire   [20:0] shl_ln1345_11_fu_935_p3;
wire   [20:0] shl_ln1345_12_fu_947_p3;
wire   [19:0] shl_ln1345_13_fu_959_p3;
wire   [19:0] shl_ln1345_14_fu_970_p3;
wire   [20:0] shl_ln1345_15_fu_982_p3;
wire   [20:0] shl_ln1345_16_fu_994_p3;
wire   [20:0] shl_ln1345_17_fu_1006_p3;
wire   [19:0] shl_ln1345_18_fu_1018_p3;
wire   [18:0] shl_ln1345_19_fu_1029_p3;
wire   [19:0] shl_ln1345_20_fu_1041_p3;
wire   [19:0] shl_ln1345_21_fu_1053_p3;
wire   [19:0] shl_ln1345_22_fu_1065_p3;
wire   [18:0] shl_ln1345_23_fu_1077_p3;
wire   [20:0] zext_ln215_fu_801_p1;
wire   [20:0] zext_ln215_2_fu_825_p1;
wire   [20:0] add_ln691_fu_1089_p2;
wire   [21:0] zext_ln691_1_fu_1095_p1;
wire   [21:0] zext_ln215_1_fu_813_p1;
wire   [21:0] add_ln691_1_fu_1099_p2;
wire   [20:0] zext_ln215_4_fu_848_p1;
wire   [20:0] zext_ln215_5_fu_860_p1;
wire   [20:0] add_ln691_2_fu_1109_p2;
wire   [21:0] zext_ln691_3_fu_1115_p1;
wire   [21:0] zext_ln215_3_fu_837_p1;
wire   [21:0] add_ln691_3_fu_1119_p2;
wire   [22:0] zext_ln691_4_fu_1125_p1;
wire   [22:0] zext_ln691_2_fu_1105_p1;
wire   [21:0] zext_ln215_7_fu_884_p1;
wire   [21:0] zext_ln215_8_fu_896_p1;
wire   [21:0] add_ln691_5_fu_1135_p2;
wire   [22:0] zext_ln691_6_fu_1141_p1;
wire   [22:0] zext_ln215_6_fu_872_p1;
wire   [21:0] zext_ln215_10_fu_919_p1;
wire   [21:0] zext_ln215_11_fu_931_p1;
wire   [21:0] add_ln691_7_fu_1151_p2;
wire   [21:0] zext_ln215_9_fu_907_p1;
wire   [21:0] zext_ln215_13_fu_955_p1;
wire   [21:0] zext_ln215_14_fu_966_p1;
wire   [21:0] add_ln691_11_fu_1163_p2;
wire   [22:0] zext_ln691_10_fu_1169_p1;
wire   [22:0] zext_ln215_12_fu_943_p1;
wire   [22:0] add_ln691_12_fu_1173_p2;
wire   [21:0] zext_ln215_16_fu_990_p1;
wire   [21:0] zext_ln215_17_fu_1002_p1;
wire   [21:0] add_ln691_13_fu_1183_p2;
wire   [22:0] zext_ln691_12_fu_1189_p1;
wire   [22:0] zext_ln215_15_fu_978_p1;
wire   [22:0] add_ln691_14_fu_1193_p2;
wire   [23:0] zext_ln691_13_fu_1199_p1;
wire   [23:0] zext_ln691_11_fu_1179_p1;
wire   [20:0] zext_ln215_19_fu_1025_p1;
wire   [20:0] zext_ln215_20_fu_1037_p1;
wire   [20:0] add_ln691_16_fu_1209_p2;
wire   [21:0] zext_ln691_15_fu_1215_p1;
wire   [21:0] zext_ln215_18_fu_1014_p1;
wire   [21:0] add_ln691_17_fu_1219_p2;
wire   [20:0] zext_ln215_21_fu_1049_p1;
wire   [20:0] zext_ln215_22_fu_1061_p1;
wire   [20:0] add_ln691_18_fu_1229_p2;
wire   [20:0] zext_ln215_23_fu_1073_p1;
wire   [20:0] zext_ln691_fu_1085_p1;
wire   [20:0] add_ln691_19_fu_1239_p2;
wire   [21:0] zext_ln691_18_fu_1245_p1;
wire   [21:0] zext_ln691_17_fu_1235_p1;
wire   [21:0] add_ln691_20_fu_1249_p2;
wire   [22:0] zext_ln691_19_fu_1255_p1;
wire   [22:0] zext_ln691_16_fu_1225_p1;
wire   [23:0] zext_ln691_8_fu_1271_p1;
wire   [23:0] zext_ln691_7_fu_1268_p1;
wire   [23:0] add_ln691_9_fu_1274_p2;
wire   [23:0] zext_ln691_5_fu_1265_p1;
wire   [24:0] zext_ln691_20_fu_1292_p1;
wire   [24:0] zext_ln691_14_fu_1289_p1;
wire   [24:0] add_ln691_22_fu_1295_p2;
wire   [24:0] zext_ln691_9_fu_1286_p1;
wire   [24:0] add_ln691_23_fu_1301_p2;
wire   [14:0] kernel_output_V_fu_1307_p4;
wire    ap_CS_fsm_state9;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_60;
reg    ap_enable_state4_pp0_iter0_stage0;
wire    ap_enable_operation_83;
reg    ap_enable_state5_pp0_iter1_stage0;
wire    ap_enable_operation_86;
reg    ap_enable_operation_62;
wire    ap_enable_operation_85;
wire    ap_enable_operation_88;
reg    ap_enable_operation_64;
wire    ap_enable_operation_87;
wire    ap_enable_operation_90;
reg    ap_enable_operation_66;
wire    ap_enable_operation_89;
wire    ap_enable_operation_91;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_349_p00;
wire   [63:0] grp_fu_349_p10;
reg    ap_condition_243;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 sliding_window_V_0_1 = 16'd0;
#0 sliding_window_V_0_2 = 16'd0;
#0 sliding_window_V_0_3 = 16'd0;
#0 sliding_window_V_0_4 = 16'd0;
#0 sliding_window_V_1_1 = 16'd0;
#0 sliding_window_V_1_2 = 16'd0;
#0 sliding_window_V_1_3 = 16'd0;
#0 sliding_window_V_1_4 = 16'd0;
#0 sliding_window_V_2_1 = 16'd0;
#0 sliding_window_V_2_2 = 16'd0;
#0 sliding_window_V_2_3 = 16'd0;
#0 sliding_window_V_2_4 = 16'd0;
#0 sliding_window_V_3_1 = 16'd0;
#0 sliding_window_V_3_2 = 16'd0;
#0 sliding_window_V_3_3 = 16'd0;
#0 sliding_window_V_3_4 = 16'd0;
#0 sliding_window_V_4_1 = 16'd0;
#0 sliding_window_V_4_2 = 16'd0;
#0 sliding_window_V_4_3 = 16'd0;
#0 sliding_window_V_4_4 = 16'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

GaussianUnit_Gaussian_line_buffer_V_1 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_1_address0),
    .ce0(line_buffer_V_1_ce0),
    .we0(line_buffer_V_1_we0),
    .d0(line_buffer_V_2_q1),
    .address1(line_buffer_V_1_address1),
    .ce1(line_buffer_V_1_ce1),
    .q1(line_buffer_V_1_q1)
);

GaussianUnit_Gaussian_line_buffer_V_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_0_address0),
    .ce0(line_buffer_V_0_ce0),
    .we0(line_buffer_V_0_we0),
    .d0(line_buffer_V_1_q1)
);

GaussianUnit_Gaussian_line_buffer_V_1 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_2_address0),
    .ce0(line_buffer_V_2_ce0),
    .we0(line_buffer_V_2_we0),
    .d0(line_buffer_V_3_q1),
    .address1(line_buffer_V_2_address1),
    .ce1(line_buffer_V_2_ce1),
    .q1(line_buffer_V_2_q1)
);

GaussianUnit_Gaussian_line_buffer_V_1 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_3_address0),
    .ce0(line_buffer_V_3_ce0),
    .we0(line_buffer_V_3_we0),
    .d0(line_buffer_V_4_q1),
    .address1(line_buffer_V_3_address1),
    .ce1(line_buffer_V_3_ce1),
    .q1(line_buffer_V_3_q1)
);

GaussianUnit_Gaussian_line_buffer_V_1 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_4_address0),
    .ce0(line_buffer_V_4_ce0),
    .we0(line_buffer_V_4_we0),
    .d0(ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4),
    .address1(line_buffer_V_4_address1),
    .ce1(line_buffer_V_4_ce1),
    .q1(line_buffer_V_4_q1)
);

GaussianUnit_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_349_p0),
    .din1(grp_fu_349_p1),
    .ce(1'b1),
    .dout(grp_fu_349_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln30_fu_428_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        h_reg_297 <= select_ln30_3_fu_515_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_297 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln30_fu_428_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_286 <= add_ln30_fu_365_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_286 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_243)) begin
        if (((or_ln34_reg_1391 == 1'd1) & (icmp_ln30_reg_1377 == 1'd0))) begin
            input_stream_element_data_V_1_reg_319 <= 16'd0;
        end else if (((or_ln34_reg_1391 == 1'd0) & (icmp_ln30_reg_1377 == 1'd0))) begin
            input_stream_element_data_V_1_reg_319 <= input_stream_element_data_V_reg_1395;
        end else if ((1'b1 == 1'b1)) begin
            input_stream_element_data_V_1_reg_319 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln30_fu_428_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_reg_308 <= add_ln31_fu_591_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        w_reg_308 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln691_10_reg_1482[23 : 3] <= add_ln691_10_fu_1280_p2[23 : 3];
        add_ln691_15_reg_1472[23 : 4] <= add_ln691_15_fu_1203_p2[23 : 4];
        add_ln691_15_reg_1472_pp0_iter3_reg[23 : 4] <= add_ln691_15_reg_1472[23 : 4];
        add_ln691_21_reg_1477[22 : 3] <= add_ln691_21_fu_1259_p2[22 : 3];
        add_ln691_21_reg_1477_pp0_iter3_reg[22 : 3] <= add_ln691_21_reg_1477[22 : 3];
        add_ln691_4_reg_1457[22 : 3] <= add_ln691_4_fu_1129_p2[22 : 3];
        add_ln691_6_reg_1462[22 : 5] <= add_ln691_6_fu_1145_p2[22 : 5];
        add_ln691_8_reg_1467[21 : 4] <= add_ln691_8_fu_1157_p2[21 : 4];
        and_ln78_1_reg_1424_pp0_iter2_reg <= and_ln78_1_reg_1424_pp0_iter1_reg;
        and_ln78_1_reg_1424_pp0_iter3_reg <= and_ln78_1_reg_1424_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln30_fu_428_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln78_1_reg_1424 <= and_ln78_1_fu_585_p2;
        line_buffer_V_1_addr_reg_1400 <= zext_ln31_fu_523_p1;
        line_buffer_V_2_addr_reg_1406 <= zext_ln31_fu_523_p1;
        line_buffer_V_3_addr_reg_1412 <= zext_ln31_fu_523_p1;
        line_buffer_V_4_addr_reg_1418 <= zext_ln31_fu_523_p1;
        or_ln34_reg_1391 <= or_ln34_fu_542_p2;
        zext_ln31_reg_1386[11 : 0] <= zext_ln31_fu_523_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln78_1_reg_1424_pp0_iter1_reg <= and_ln78_1_reg_1424;
        icmp_ln30_reg_1377 <= icmp_ln30_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln34_fu_542_p2 == 1'd0) & (icmp_ln30_fu_428_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_stream_element_data_V_reg_1395 <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_1_load_reg_1433 <= line_buffer_V_1_q1;
        line_buffer_V_2_load_reg_1439 <= line_buffer_V_2_q1;
        line_buffer_V_3_load_reg_1445 <= line_buffer_V_3_q1;
        line_buffer_V_4_load_reg_1451 <= line_buffer_V_4_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sliding_window_V_0_1 <= sliding_window_V_0_2;
        sliding_window_V_0_2 <= sliding_window_V_0_3;
        sliding_window_V_0_3 <= sliding_window_V_0_4;
        sliding_window_V_0_4 <= line_buffer_V_1_load_reg_1433;
        sliding_window_V_1_1 <= sliding_window_V_1_2;
        sliding_window_V_1_2 <= sliding_window_V_1_3;
        sliding_window_V_1_3 <= sliding_window_V_1_4;
        sliding_window_V_1_4 <= line_buffer_V_2_load_reg_1439;
        sliding_window_V_2_1 <= sliding_window_V_2_2;
        sliding_window_V_2_2 <= sliding_window_V_2_3;
        sliding_window_V_2_3 <= sliding_window_V_2_4;
        sliding_window_V_2_4 <= line_buffer_V_3_load_reg_1445;
        sliding_window_V_3_1 <= sliding_window_V_3_2;
        sliding_window_V_3_2 <= sliding_window_V_3_3;
        sliding_window_V_3_3 <= sliding_window_V_3_4;
        sliding_window_V_3_4 <= line_buffer_V_4_load_reg_1451;
        sliding_window_V_4_1 <= sliding_window_V_4_2;
        sliding_window_V_4_2 <= sliding_window_V_4_3;
        sliding_window_V_4_3 <= sliding_window_V_4_4;
        sliding_window_V_4_4 <= input_stream_element_data_V_1_reg_319;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_428_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_reg_1377 == 1'd0)) begin
        if ((or_ln34_reg_1391 == 1'd1)) begin
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4 = 16'd0;
        end else if ((or_ln34_reg_1391 == 1'd0)) begin
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4 = input_stream_element_data_V_reg_1395;
        end else begin
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4 = ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319;
        end
    end else begin
        ap_phi_mux_input_stream_element_data_V_1_phi_fu_322_p4 = ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_0_ce0 = 1'b1;
    end else begin
        line_buffer_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_0_we0 = 1'b1;
    end else begin
        line_buffer_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_1_ce0 = 1'b1;
    end else begin
        line_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        line_buffer_V_1_ce1 = 1'b1;
    end else begin
        line_buffer_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_1_we0 = 1'b1;
    end else begin
        line_buffer_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_2_ce0 = 1'b1;
    end else begin
        line_buffer_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        line_buffer_V_2_ce1 = 1'b1;
    end else begin
        line_buffer_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_2_we0 = 1'b1;
    end else begin
        line_buffer_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_3_ce0 = 1'b1;
    end else begin
        line_buffer_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        line_buffer_V_3_ce1 = 1'b1;
    end else begin
        line_buffer_V_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_3_we0 = 1'b1;
    end else begin
        line_buffer_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_4_ce0 = 1'b1;
    end else begin
        line_buffer_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        line_buffer_V_4_ce1 = 1'b1;
    end else begin
        line_buffer_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_V_4_we0 = 1'b1;
    end else begin
        line_buffer_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln34_fu_542_p2 == 1'd0) & (icmp_ln30_fu_428_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        stream_in_TDATA_blk_n = stream_in_TVALID;
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op57_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        stream_in_TREADY = 1'b1;
    end else begin
        stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln78_1_reg_1424_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        stream_out_TDATA_blk_n = stream_out_TREADY;
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln78_1_reg_1424_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_out_TVALID = 1'b1;
    end else begin
        stream_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln30_fu_428_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln30_fu_428_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add18_fu_337_p2 = (image_w + 32'd2);

assign add_fu_331_p2 = (image_h + 32'd2);

assign add_ln30_1_fu_433_p2 = (h_reg_297 + 31'd1);

assign add_ln30_fu_365_p2 = (indvar_flatten_reg_286 + 64'd1);

assign add_ln31_fu_591_p2 = (select_ln30_fu_443_p3 + 12'd1);

assign add_ln691_10_fu_1280_p2 = (add_ln691_9_fu_1274_p2 + zext_ln691_5_fu_1265_p1);

assign add_ln691_11_fu_1163_p2 = (zext_ln215_13_fu_955_p1 + zext_ln215_14_fu_966_p1);

assign add_ln691_12_fu_1173_p2 = (zext_ln691_10_fu_1169_p1 + zext_ln215_12_fu_943_p1);

assign add_ln691_13_fu_1183_p2 = (zext_ln215_16_fu_990_p1 + zext_ln215_17_fu_1002_p1);

assign add_ln691_14_fu_1193_p2 = (zext_ln691_12_fu_1189_p1 + zext_ln215_15_fu_978_p1);

assign add_ln691_15_fu_1203_p2 = (zext_ln691_13_fu_1199_p1 + zext_ln691_11_fu_1179_p1);

assign add_ln691_16_fu_1209_p2 = (zext_ln215_19_fu_1025_p1 + zext_ln215_20_fu_1037_p1);

assign add_ln691_17_fu_1219_p2 = (zext_ln691_15_fu_1215_p1 + zext_ln215_18_fu_1014_p1);

assign add_ln691_18_fu_1229_p2 = (zext_ln215_21_fu_1049_p1 + zext_ln215_22_fu_1061_p1);

assign add_ln691_19_fu_1239_p2 = (zext_ln215_23_fu_1073_p1 + zext_ln691_fu_1085_p1);

assign add_ln691_1_fu_1099_p2 = (zext_ln691_1_fu_1095_p1 + zext_ln215_1_fu_813_p1);

assign add_ln691_20_fu_1249_p2 = (zext_ln691_18_fu_1245_p1 + zext_ln691_17_fu_1235_p1);

assign add_ln691_21_fu_1259_p2 = (zext_ln691_19_fu_1255_p1 + zext_ln691_16_fu_1225_p1);

assign add_ln691_22_fu_1295_p2 = (zext_ln691_20_fu_1292_p1 + zext_ln691_14_fu_1289_p1);

assign add_ln691_23_fu_1301_p2 = (add_ln691_22_fu_1295_p2 + zext_ln691_9_fu_1286_p1);

assign add_ln691_2_fu_1109_p2 = (zext_ln215_4_fu_848_p1 + zext_ln215_5_fu_860_p1);

assign add_ln691_3_fu_1119_p2 = (zext_ln691_3_fu_1115_p1 + zext_ln215_3_fu_837_p1);

assign add_ln691_4_fu_1129_p2 = (zext_ln691_4_fu_1125_p1 + zext_ln691_2_fu_1105_p1);

assign add_ln691_5_fu_1135_p2 = (zext_ln215_7_fu_884_p1 + zext_ln215_8_fu_896_p1);

assign add_ln691_6_fu_1145_p2 = (zext_ln691_6_fu_1141_p1 + zext_ln215_6_fu_872_p1);

assign add_ln691_7_fu_1151_p2 = (zext_ln215_10_fu_919_p1 + zext_ln215_11_fu_931_p1);

assign add_ln691_8_fu_1157_p2 = (add_ln691_7_fu_1151_p2 + zext_ln215_9_fu_907_p1);

assign add_ln691_9_fu_1274_p2 = (zext_ln691_8_fu_1271_p1 + zext_ln691_7_fu_1268_p1);

assign add_ln691_fu_1089_p2 = (zext_ln215_fu_801_p1 + zext_ln215_2_fu_825_p1);

assign and_ln78_1_fu_585_p2 = (select_ln30_2_fu_503_p3 & and_ln78_2_fu_579_p2);

assign and_ln78_2_fu_579_p2 = (xor_ln78_fu_573_p2 & icmp_ln78_fu_562_p2);

assign and_ln78_3_fu_497_p2 = (rev60_fu_491_p2 & icmp46_fu_480_p2);

assign and_ln78_fu_413_p2 = (rev54_fu_407_p2 & icmp_fu_396_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((stream_out_TREADY == 1'b0) & (1'd1 == and_ln78_1_reg_1424_pp0_iter3_reg) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((stream_in_TVALID == 1'b0) & (ap_predicate_op57_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((stream_in_TVALID == 1'b0) & (ap_predicate_op57_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((stream_out_TREADY == 1'b0) & (1'd1 == and_ln78_1_reg_1424_pp0_iter3_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((stream_in_TVALID == 1'b0) & (ap_predicate_op57_read_state4 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((stream_out_TREADY == 1'b0) & (1'd1 == and_ln78_1_reg_1424_pp0_iter3_reg)))));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter0 = ((stream_in_TVALID == 1'b0) & (ap_predicate_op57_read_state4 == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((stream_out_TREADY == 1'b0) & (1'd1 == and_ln78_1_reg_1424_pp0_iter3_reg));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter4 = ((stream_out_TREADY == 1'b0) & (1'd1 == and_ln78_1_reg_1424_pp0_iter3_reg));
end

always @ (*) begin
    ap_condition_243 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_enable_operation_60 = (icmp_ln30_fu_428_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_62 = (icmp_ln30_fu_428_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_64 = (icmp_ln30_fu_428_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_66 = (icmp_ln30_fu_428_p2 == 1'd0);
end

assign ap_enable_operation_83 = (1'b1 == 1'b1);

assign ap_enable_operation_85 = (1'b1 == 1'b1);

assign ap_enable_operation_86 = (1'b1 == 1'b1);

assign ap_enable_operation_87 = (1'b1 == 1'b1);

assign ap_enable_operation_88 = (1'b1 == 1'b1);

assign ap_enable_operation_89 = (1'b1 == 1'b1);

assign ap_enable_operation_90 = (1'b1 == 1'b1);

assign ap_enable_operation_91 = (1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state4_pp0_iter0_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state5_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_319 = 'bx;

always @ (*) begin
    ap_predicate_op57_read_state4 = ((or_ln34_fu_542_p2 == 1'd0) & (icmp_ln30_fu_428_p2 == 1'd0));
end

assign grp_fu_349_p0 = grp_fu_349_p00;

assign grp_fu_349_p00 = add_fu_331_p2;

assign grp_fu_349_p1 = grp_fu_349_p10;

assign grp_fu_349_p10 = add18_fu_337_p2;

assign icmp46_fu_480_p2 = ((tmp_2_fu_470_p4 != 30'd0) ? 1'b1 : 1'b0);

assign icmp_fu_396_p2 = ((tmp_1_fu_386_p4 != 30'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_428_p2 = ((indvar_flatten_reg_286 == grp_fu_349_p2) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_423_p2 = ((zext_ln31_1_fu_419_p1 == add18_fu_337_p2) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_531_p2 = (($signed(zext_ln30_2_fu_511_p1) < $signed(image_w)) ? 1'b1 : 1'b0);

assign icmp_ln78_1_fu_568_p2 = (($signed(sub61_fu_360_p2) < $signed(zext_ln30_2_fu_511_p1)) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_562_p2 = ((tmp_fu_552_p4 != 11'd0) ? 1'b1 : 1'b0);

assign kernel_output_V_fu_1307_p4 = {{add_ln691_23_fu_1301_p2[24:10]}};

assign line_buffer_V_0_address0 = zext_ln31_reg_1386;

assign line_buffer_V_1_address0 = line_buffer_V_1_addr_reg_1400;

assign line_buffer_V_1_address1 = zext_ln31_fu_523_p1;

assign line_buffer_V_2_address0 = line_buffer_V_2_addr_reg_1406;

assign line_buffer_V_2_address1 = zext_ln31_fu_523_p1;

assign line_buffer_V_3_address0 = line_buffer_V_3_addr_reg_1412;

assign line_buffer_V_3_address1 = zext_ln31_fu_523_p1;

assign line_buffer_V_4_address0 = line_buffer_V_4_addr_reg_1418;

assign line_buffer_V_4_address1 = zext_ln31_fu_523_p1;

assign or_ln34_fu_542_p2 = (xor_ln34_fu_536_p2 | select_ln30_1_fu_462_p3);

assign rev52_fu_380_p2 = (slt_fu_375_p2 ^ 1'd1);

assign rev54_fu_407_p2 = (slt53_fu_402_p2 ^ 1'd1);

assign rev58_fu_456_p2 = (slt57_fu_451_p2 ^ 1'd1);

assign rev60_fu_491_p2 = (slt59_fu_486_p2 ^ 1'd1);

assign select_ln30_1_fu_462_p3 = ((icmp_ln31_fu_423_p2[0:0] == 1'b1) ? rev58_fu_456_p2 : rev52_fu_380_p2);

assign select_ln30_2_fu_503_p3 = ((icmp_ln31_fu_423_p2[0:0] == 1'b1) ? and_ln78_3_fu_497_p2 : and_ln78_fu_413_p2);

assign select_ln30_3_fu_515_p3 = ((icmp_ln31_fu_423_p2[0:0] == 1'b1) ? add_ln30_1_fu_433_p2 : h_reg_297);

assign select_ln30_fu_443_p3 = ((icmp_ln31_fu_423_p2[0:0] == 1'b1) ? 12'd0 : w_reg_308);

assign shl_ln1345_10_fu_923_p3 = {{sliding_window_V_2_2}, {5'd0}};

assign shl_ln1345_11_fu_935_p3 = {{sliding_window_V_2_3}, {5'd0}};

assign shl_ln1345_12_fu_947_p3 = {{sliding_window_V_2_4}, {5'd0}};

assign shl_ln1345_13_fu_959_p3 = {{line_buffer_V_3_load_reg_1445}, {4'd0}};

assign shl_ln1345_14_fu_970_p3 = {{sliding_window_V_3_1}, {4'd0}};

assign shl_ln1345_15_fu_982_p3 = {{sliding_window_V_3_2}, {5'd0}};

assign shl_ln1345_16_fu_994_p3 = {{sliding_window_V_3_3}, {5'd0}};

assign shl_ln1345_17_fu_1006_p3 = {{sliding_window_V_3_4}, {5'd0}};

assign shl_ln1345_18_fu_1018_p3 = {{line_buffer_V_4_load_reg_1451}, {4'd0}};

assign shl_ln1345_19_fu_1029_p3 = {{sliding_window_V_4_1}, {3'd0}};

assign shl_ln1345_1_fu_805_p3 = {{sliding_window_V_0_2}, {4'd0}};

assign shl_ln1345_20_fu_1041_p3 = {{sliding_window_V_4_2}, {4'd0}};

assign shl_ln1345_21_fu_1053_p3 = {{sliding_window_V_4_3}, {4'd0}};

assign shl_ln1345_22_fu_1065_p3 = {{sliding_window_V_4_4}, {4'd0}};

assign shl_ln1345_23_fu_1077_p3 = {{input_stream_element_data_V_1_reg_319}, {3'd0}};

assign shl_ln1345_2_fu_817_p3 = {{sliding_window_V_0_3}, {4'd0}};

assign shl_ln1345_3_fu_829_p3 = {{sliding_window_V_0_4}, {4'd0}};

assign shl_ln1345_4_fu_841_p3 = {{line_buffer_V_1_load_reg_1433}, {3'd0}};

assign shl_ln1345_5_fu_852_p3 = {{sliding_window_V_1_1}, {4'd0}};

assign shl_ln1345_6_fu_864_p3 = {{sliding_window_V_1_2}, {5'd0}};

assign shl_ln1345_7_fu_876_p3 = {{sliding_window_V_1_3}, {5'd0}};

assign shl_ln1345_8_fu_888_p3 = {{sliding_window_V_1_4}, {5'd0}};

assign shl_ln1345_9_fu_900_p3 = {{line_buffer_V_2_load_reg_1439}, {4'd0}};

assign shl_ln1345_s_fu_911_p3 = {{sliding_window_V_2_1}, {4'd0}};

assign shl_ln_fu_793_p3 = {{sliding_window_V_0_1}, {3'd0}};

assign slt53_fu_402_p2 = (($signed(sub_fu_355_p2) < $signed(zext_ln30_1_fu_371_p1)) ? 1'b1 : 1'b0);

assign slt57_fu_451_p2 = (($signed(zext_ln30_fu_439_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign slt59_fu_486_p2 = (($signed(sub_fu_355_p2) < $signed(zext_ln30_fu_439_p1)) ? 1'b1 : 1'b0);

assign slt_fu_375_p2 = (($signed(zext_ln30_1_fu_371_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign stream_out_TDATA = kernel_output_V_fu_1307_p4;

assign stream_out_TKEEP = 2'd0;

assign stream_out_TLAST = 1'd0;

assign stream_out_TSTRB = 2'd0;

assign stream_out_TUSER = 1'd0;

assign sub61_fu_360_p2 = (image_w + 32'd1);

assign sub_fu_355_p2 = (image_h + 32'd1);

assign tmp_1_fu_386_p4 = {{h_reg_297[30:1]}};

assign tmp_2_fu_470_p4 = {{add_ln30_1_fu_433_p2[30:1]}};

assign tmp_fu_552_p4 = {{select_ln30_fu_443_p3[11:1]}};

assign xor_ln34_fu_536_p2 = (icmp_ln34_fu_531_p2 ^ 1'd1);

assign xor_ln78_fu_573_p2 = (icmp_ln78_1_fu_568_p2 ^ 1'd1);

assign zext_ln215_10_fu_919_p1 = shl_ln1345_s_fu_911_p3;

assign zext_ln215_11_fu_931_p1 = shl_ln1345_10_fu_923_p3;

assign zext_ln215_12_fu_943_p1 = shl_ln1345_11_fu_935_p3;

assign zext_ln215_13_fu_955_p1 = shl_ln1345_12_fu_947_p3;

assign zext_ln215_14_fu_966_p1 = shl_ln1345_13_fu_959_p3;

assign zext_ln215_15_fu_978_p1 = shl_ln1345_14_fu_970_p3;

assign zext_ln215_16_fu_990_p1 = shl_ln1345_15_fu_982_p3;

assign zext_ln215_17_fu_1002_p1 = shl_ln1345_16_fu_994_p3;

assign zext_ln215_18_fu_1014_p1 = shl_ln1345_17_fu_1006_p3;

assign zext_ln215_19_fu_1025_p1 = shl_ln1345_18_fu_1018_p3;

assign zext_ln215_1_fu_813_p1 = shl_ln1345_1_fu_805_p3;

assign zext_ln215_20_fu_1037_p1 = shl_ln1345_19_fu_1029_p3;

assign zext_ln215_21_fu_1049_p1 = shl_ln1345_20_fu_1041_p3;

assign zext_ln215_22_fu_1061_p1 = shl_ln1345_21_fu_1053_p3;

assign zext_ln215_23_fu_1073_p1 = shl_ln1345_22_fu_1065_p3;

assign zext_ln215_2_fu_825_p1 = shl_ln1345_2_fu_817_p3;

assign zext_ln215_3_fu_837_p1 = shl_ln1345_3_fu_829_p3;

assign zext_ln215_4_fu_848_p1 = shl_ln1345_4_fu_841_p3;

assign zext_ln215_5_fu_860_p1 = shl_ln1345_5_fu_852_p3;

assign zext_ln215_6_fu_872_p1 = shl_ln1345_6_fu_864_p3;

assign zext_ln215_7_fu_884_p1 = shl_ln1345_7_fu_876_p3;

assign zext_ln215_8_fu_896_p1 = shl_ln1345_8_fu_888_p3;

assign zext_ln215_9_fu_907_p1 = shl_ln1345_9_fu_900_p3;

assign zext_ln215_fu_801_p1 = shl_ln_fu_793_p3;

assign zext_ln30_1_fu_371_p1 = h_reg_297;

assign zext_ln30_2_fu_511_p1 = select_ln30_fu_443_p3;

assign zext_ln30_fu_439_p1 = add_ln30_1_fu_433_p2;

assign zext_ln31_1_fu_419_p1 = w_reg_308;

assign zext_ln31_fu_523_p1 = select_ln30_fu_443_p3;

assign zext_ln691_10_fu_1169_p1 = add_ln691_11_fu_1163_p2;

assign zext_ln691_11_fu_1179_p1 = add_ln691_12_fu_1173_p2;

assign zext_ln691_12_fu_1189_p1 = add_ln691_13_fu_1183_p2;

assign zext_ln691_13_fu_1199_p1 = add_ln691_14_fu_1193_p2;

assign zext_ln691_14_fu_1289_p1 = add_ln691_15_reg_1472_pp0_iter3_reg;

assign zext_ln691_15_fu_1215_p1 = add_ln691_16_fu_1209_p2;

assign zext_ln691_16_fu_1225_p1 = add_ln691_17_fu_1219_p2;

assign zext_ln691_17_fu_1235_p1 = add_ln691_18_fu_1229_p2;

assign zext_ln691_18_fu_1245_p1 = add_ln691_19_fu_1239_p2;

assign zext_ln691_19_fu_1255_p1 = add_ln691_20_fu_1249_p2;

assign zext_ln691_1_fu_1095_p1 = add_ln691_fu_1089_p2;

assign zext_ln691_20_fu_1292_p1 = add_ln691_21_reg_1477_pp0_iter3_reg;

assign zext_ln691_2_fu_1105_p1 = add_ln691_1_fu_1099_p2;

assign zext_ln691_3_fu_1115_p1 = add_ln691_2_fu_1109_p2;

assign zext_ln691_4_fu_1125_p1 = add_ln691_3_fu_1119_p2;

assign zext_ln691_5_fu_1265_p1 = add_ln691_4_reg_1457;

assign zext_ln691_6_fu_1141_p1 = add_ln691_5_fu_1135_p2;

assign zext_ln691_7_fu_1268_p1 = add_ln691_6_reg_1462;

assign zext_ln691_8_fu_1271_p1 = add_ln691_8_reg_1467;

assign zext_ln691_9_fu_1286_p1 = add_ln691_10_reg_1482;

assign zext_ln691_fu_1085_p1 = shl_ln1345_23_fu_1077_p3;

always @ (posedge ap_clk) begin
    zext_ln31_reg_1386[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    add_ln691_4_reg_1457[2:0] <= 3'b000;
    add_ln691_6_reg_1462[4:0] <= 5'b00000;
    add_ln691_8_reg_1467[3:0] <= 4'b0000;
    add_ln691_15_reg_1472[3:0] <= 4'b0000;
    add_ln691_15_reg_1472_pp0_iter3_reg[3:0] <= 4'b0000;
    add_ln691_21_reg_1477[2:0] <= 3'b000;
    add_ln691_21_reg_1477_pp0_iter3_reg[2:0] <= 3'b000;
    add_ln691_10_reg_1482[2:0] <= 3'b000;
end

endmodule //GaussianUnit_Gaussian
