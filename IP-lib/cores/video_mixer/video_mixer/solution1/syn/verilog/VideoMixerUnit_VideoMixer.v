// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module VideoMixerUnit_VideoMixer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        video_stream_in_TDATA,
        video_stream_in_TVALID,
        video_stream_in_TREADY,
        video_stream_in_TKEEP,
        video_stream_in_TSTRB,
        video_stream_in_TUSER,
        video_stream_in_TLAST,
        overlay_stream_in_TDATA,
        overlay_stream_in_TVALID,
        overlay_stream_in_TREADY,
        overlay_stream_in_TKEEP,
        overlay_stream_in_TSTRB,
        overlay_stream_in_TUSER,
        overlay_stream_in_TLAST,
        video_stream_out_TDATA,
        video_stream_out_TVALID,
        video_stream_out_TREADY,
        video_stream_out_TKEEP,
        video_stream_out_TSTRB,
        video_stream_out_TUSER,
        video_stream_out_TLAST,
        image_h,
        image_w
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] video_stream_in_TDATA;
input   video_stream_in_TVALID;
output   video_stream_in_TREADY;
input  [2:0] video_stream_in_TKEEP;
input  [2:0] video_stream_in_TSTRB;
input  [0:0] video_stream_in_TUSER;
input  [0:0] video_stream_in_TLAST;
input  [7:0] overlay_stream_in_TDATA;
input   overlay_stream_in_TVALID;
output   overlay_stream_in_TREADY;
input  [0:0] overlay_stream_in_TKEEP;
input  [0:0] overlay_stream_in_TSTRB;
input  [0:0] overlay_stream_in_TUSER;
input  [0:0] overlay_stream_in_TLAST;
output  [23:0] video_stream_out_TDATA;
output   video_stream_out_TVALID;
input   video_stream_out_TREADY;
output  [2:0] video_stream_out_TKEEP;
output  [2:0] video_stream_out_TSTRB;
output  [0:0] video_stream_out_TUSER;
output  [0:0] video_stream_out_TLAST;
input  [11:0] image_h;
input  [11:0] image_w;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg video_stream_in_TREADY;
reg overlay_stream_in_TREADY;
reg video_stream_out_TVALID;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    video_stream_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln26_fu_225_p2;
reg    overlay_stream_in_TDATA_blk_n;
reg    video_stream_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln26_reg_413;
reg   [11:0] j_V_reg_154;
wire   [11:0] zext_ln708_fu_175_p1;
wire   [0:0] cmp_i3_fu_179_p2;
wire   [11:0] i_V_1_fu_185_p2;
reg   [11:0] i_V_1_reg_377;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln25_fu_191_p2;
wire   [0:0] cmp_i_i101_fu_196_p2;
reg   [0:0] cmp_i_i101_reg_386;
wire   [11:0] zext_ln357_fu_210_p1;
wire   [0:0] cmp_i_i65_fu_214_p2;
reg   [0:0] cmp_i_i65_reg_401;
wire   [11:0] j_V_1_fu_219_p2;
reg    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
reg   [23:0] input_video_element_data_V_reg_417;
reg   [0:0] tmp_i_i117_user_reg_425;
reg   [0:0] tmp_i_i117_last_reg_430;
wire   [0:0] icmp_ln886_fu_246_p2;
reg   [0:0] icmp_ln886_reg_435;
wire   [0:0] and_ln31_fu_251_p2;
reg   [0:0] and_ln31_reg_441;
wire   [0:0] icmp_ln870_fu_256_p2;
reg   [0:0] icmp_ln870_reg_447;
wire   [0:0] icmp_ln870_1_fu_262_p2;
reg   [0:0] icmp_ln870_1_reg_452;
wire   [0:0] icmp_ln870_2_fu_267_p2;
reg   [0:0] icmp_ln870_2_reg_457;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [11:0] i_V_reg_143;
wire    ap_CS_fsm_state5;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] p_Result_s_fu_165_p4;
wire   [10:0] p_Result_1_fu_201_p4;
wire   [23:0] output_video_element_data_V_fu_272_p3;
wire   [0:0] and_ln39_fu_278_p2;
wire   [0:0] or_ln39_fu_289_p2;
wire   [0:0] or_ln39_1_fu_294_p2;
wire   [23:0] select_ln31_fu_282_p3;
wire   [0:0] xor_ln37_fu_306_p2;
wire   [0:0] and_ln870_1_fu_316_p2;
wire   [0:0] and_ln870_fu_311_p2;
wire   [0:0] and_ln870_2_fu_320_p2;
wire   [23:0] select_ln39_fu_299_p3;
wire   [0:0] or_ln886_fu_333_p2;
wire   [0:0] xor_ln886_fu_337_p2;
wire   [0:0] and_ln886_fu_343_p2;
wire   [23:0] select_ln870_fu_326_p3;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln25_fu_191_p2 == 1'd0) & (cmp_i3_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln25_fu_191_p2 == 1'd0) & (cmp_i3_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_V_reg_143 <= i_V_1_reg_377;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_V_reg_143 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_225_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_V_reg_154 <= j_V_1_fu_219_p2;
    end else if (((icmp_ln25_fu_191_p2 == 1'd0) & (cmp_i3_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_V_reg_154 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_225_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln31_reg_441 <= and_ln31_fu_251_p2;
        icmp_ln870_1_reg_452 <= icmp_ln870_1_fu_262_p2;
        icmp_ln870_2_reg_457 <= icmp_ln870_2_fu_267_p2;
        icmp_ln870_reg_447 <= icmp_ln870_fu_256_p2;
        icmp_ln886_reg_435 <= icmp_ln886_fu_246_p2;
        input_video_element_data_V_reg_417 <= video_stream_in_TDATA;
        tmp_i_i117_last_reg_430 <= video_stream_in_TLAST;
        tmp_i_i117_user_reg_425 <= video_stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_191_p2 == 1'd0) & (cmp_i3_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        cmp_i_i101_reg_386 <= cmp_i_i101_fu_196_p2;
        cmp_i_i65_reg_401 <= cmp_i_i65_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_1_reg_377 <= i_V_1_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln26_reg_413 <= icmp_ln26_fu_225_p2;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_225_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_225_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        overlay_stream_in_TDATA_blk_n = overlay_stream_in_TVALID;
    end else begin
        overlay_stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_225_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        overlay_stream_in_TREADY = 1'b1;
    end else begin
        overlay_stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_225_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        video_stream_in_TDATA_blk_n = video_stream_in_TVALID;
    end else begin
        video_stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_225_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        video_stream_in_TREADY = 1'b1;
    end else begin
        video_stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_413 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        video_stream_out_TDATA_blk_n = video_stream_out_TREADY;
    end else begin
        video_stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_413 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        video_stream_out_TVALID = 1'b1;
    end else begin
        video_stream_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln25_fu_191_p2 == 1'd0) & (cmp_i3_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln25_fu_191_p2 == 1'd0) & (cmp_i3_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln26_fu_225_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln26_fu_225_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln31_fu_251_p2 = (icmp_ln886_fu_246_p2 & cmp_i_i101_reg_386);

assign and_ln39_fu_278_p2 = (icmp_ln870_1_reg_452 & cmp_i_i101_reg_386);

assign and_ln870_1_fu_316_p2 = (icmp_ln870_2_reg_457 & cmp_i_i65_reg_401);

assign and_ln870_2_fu_320_p2 = (and_ln870_fu_311_p2 & and_ln870_1_fu_316_p2);

assign and_ln870_fu_311_p2 = (xor_ln37_fu_306_p2 & cmp_i_i101_reg_386);

assign and_ln886_fu_343_p2 = (xor_ln886_fu_337_p2 & cmp_i_i65_reg_401);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln26_reg_413 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (video_stream_out_TREADY == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln26_fu_225_p2 == 1'd0) & (overlay_stream_in_TVALID == 1'b0)) | ((icmp_ln26_fu_225_p2 == 1'd0) & (video_stream_in_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln26_reg_413 == 1'd0) & (video_stream_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln26_fu_225_p2 == 1'd0) & (overlay_stream_in_TVALID == 1'b0)) | ((icmp_ln26_fu_225_p2 == 1'd0) & (video_stream_in_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln26_reg_413 == 1'd0) & (video_stream_out_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln26_fu_225_p2 == 1'd0) & (overlay_stream_in_TVALID == 1'b0)) | ((icmp_ln26_fu_225_p2 == 1'd0) & (video_stream_in_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = (((icmp_ln26_fu_225_p2 == 1'd0) & (overlay_stream_in_TVALID == 1'b0)) | ((icmp_ln26_fu_225_p2 == 1'd0) & (video_stream_in_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln26_reg_413 == 1'd0) & (video_stream_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln26_reg_413 == 1'd0) & (video_stream_out_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cmp_i3_fu_179_p2 = ((image_w == 12'd0) ? 1'b1 : 1'b0);

assign cmp_i_i101_fu_196_p2 = ((i_V_reg_143 < zext_ln708_fu_175_p1) ? 1'b1 : 1'b0);

assign cmp_i_i65_fu_214_p2 = ((i_V_reg_143 == zext_ln708_fu_175_p1) ? 1'b1 : 1'b0);

assign i_V_1_fu_185_p2 = (i_V_reg_143 + 12'd1);

assign icmp_ln25_fu_191_p2 = ((i_V_reg_143 == image_h) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_225_p2 = ((j_V_reg_154 == image_w) ? 1'b1 : 1'b0);

assign icmp_ln870_1_fu_262_p2 = ((j_V_reg_154 == zext_ln357_fu_210_p1) ? 1'b1 : 1'b0);

assign icmp_ln870_2_fu_267_p2 = ((j_V_reg_154 != zext_ln357_fu_210_p1) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_256_p2 = ((overlay_stream_in_TDATA == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_246_p2 = ((j_V_reg_154 > zext_ln357_fu_210_p1) ? 1'b1 : 1'b0);

assign j_V_1_fu_219_p2 = (j_V_reg_154 + 12'd1);

assign or_ln39_1_fu_294_p2 = (or_ln39_fu_289_p2 | and_ln31_reg_441);

assign or_ln39_fu_289_p2 = (cmp_i_i65_reg_401 | and_ln39_fu_278_p2);

assign or_ln886_fu_333_p2 = (icmp_ln886_reg_435 | cmp_i_i101_reg_386);

assign output_video_element_data_V_fu_272_p3 = ((icmp_ln870_reg_447[0:0] == 1'b1) ? 24'd65535 : input_video_element_data_V_reg_417);

assign p_Result_1_fu_201_p4 = {{image_w[11:1]}};

assign p_Result_s_fu_165_p4 = {{image_h[11:1]}};

assign select_ln31_fu_282_p3 = ((and_ln31_reg_441[0:0] == 1'b1) ? output_video_element_data_V_fu_272_p3 : 24'd16777215);

assign select_ln39_fu_299_p3 = ((or_ln39_1_fu_294_p2[0:0] == 1'b1) ? select_ln31_fu_282_p3 : input_video_element_data_V_reg_417);

assign select_ln870_fu_326_p3 = ((and_ln870_2_fu_320_p2[0:0] == 1'b1) ? input_video_element_data_V_reg_417 : select_ln39_fu_299_p3);

assign video_stream_out_TDATA = ((and_ln886_fu_343_p2[0:0] == 1'b1) ? input_video_element_data_V_reg_417 : select_ln870_fu_326_p3);

assign video_stream_out_TKEEP = 3'd0;

assign video_stream_out_TLAST = tmp_i_i117_last_reg_430;

assign video_stream_out_TSTRB = 3'd0;

assign video_stream_out_TUSER = tmp_i_i117_user_reg_425;

assign xor_ln37_fu_306_p2 = (icmp_ln886_reg_435 ^ 1'd1);

assign xor_ln886_fu_337_p2 = (or_ln886_fu_333_p2 ^ 1'd1);

assign zext_ln357_fu_210_p1 = p_Result_1_fu_201_p4;

assign zext_ln708_fu_175_p1 = p_Result_s_fu_165_p4;

endmodule //VideoMixerUnit_VideoMixer
