-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity NonMaximalSuppresionUnit_NonMaximalSuppresion is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    image_w : IN STD_LOGIC_VECTOR (31 downto 0);
    image_h : IN STD_LOGIC_VECTOR (31 downto 0);
    alpha : IN STD_LOGIC_VECTOR (15 downto 0);
    beta : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of NonMaximalSuppresionUnit_NonMaximalSuppresion is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max_response_reg_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal line_buffer_V_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_1_ce0 : STD_LOGIC;
    signal line_buffer_V_1_we0 : STD_LOGIC;
    signal line_buffer_V_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_1_ce1 : STD_LOGIC;
    signal line_buffer_V_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_V_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_0_ce0 : STD_LOGIC;
    signal line_buffer_V_0_we0 : STD_LOGIC;
    signal line_buffer_V_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_2_ce0 : STD_LOGIC;
    signal line_buffer_V_2_we0 : STD_LOGIC;
    signal line_buffer_V_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_2_ce1 : STD_LOGIC;
    signal line_buffer_V_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sliding_window_V_0_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_0_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_1_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_1_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_2_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sliding_window_V_2_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln34_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal and_ln85_1_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_1_reg_938_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_228 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_reg_239 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_reg_250 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_stream_element_data_V_1_reg_261 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_stream_element_data_V_1_reg_261_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_predicate_op71_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_stream_element_data_V_1_reg_261_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input_stream_element_data_V_1_reg_261_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input_stream_element_data_V_1_reg_261_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input_stream_element_data_V_1_reg_261_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add19_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln34_fu_313_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln34_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_2_fu_479_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_2_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_2_reg_892_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_2_reg_892_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_2_reg_892_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_2_reg_892_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_2_reg_892_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_2_reg_892_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_4_fu_505_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln35_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_902 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln38_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_element_data_V_2_reg_911 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_V_1_addr_reg_916 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_V_2_addr_reg_922 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln79_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_928_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_928_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_928_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_928_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_928_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_928_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_reg_933 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_reg_933_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_reg_933_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_reg_933_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_reg_933_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_reg_933_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_1_reg_933_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_1_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_1_reg_938_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_1_reg_938_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_1_reg_938_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_1_reg_938_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_1_reg_938_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_590_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_buffer_V_2_load_reg_947 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln99_1_fu_636_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln99_1_reg_954 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln886_1_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_reg_963 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_reg_963_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_reg_963_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_reg_963_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_reg_963_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_1_reg_963_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln99_3_fu_702_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln99_3_reg_968 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln99_5_fu_747_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln99_5_reg_974 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln886_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_stream_element_data_V_fu_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_2_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_334_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal slt45_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev46_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_1_fu_398_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln35_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln34_1_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt49_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev50_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev44_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_435_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal slt51_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_mid1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp37_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_3_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev52_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_mid1_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_3_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_408_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln34_3_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln38_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln38_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_1_fu_427_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_540_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln85_1_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln85_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln85_2_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_3_fu_493_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_2_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln99_fu_622_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln886_3_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_4_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln99_2_fu_690_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln886_5_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_6_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln99_4_fu_734_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln886_7_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln886_8_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln99_6_fu_760_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_771_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1494_fu_779_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_817_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_2_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_1_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal binary_response_V_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_stream_element_data_V_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_817_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_817_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_817_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_74 : BOOLEAN;
    signal ap_enable_state4_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_96 : BOOLEAN;
    signal ap_enable_state5_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_99 : BOOLEAN;
    signal ap_enable_operation_76 : BOOLEAN;
    signal ap_enable_operation_98 : BOOLEAN;
    signal ap_enable_operation_100 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_303_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_303_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_817_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_817_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_251 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component NonMaximalSuppresionUnit_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component NonMaximalSuppresionUnit_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NonMaximalSuppresionUnit_NonMaximalSuppresion_line_buffer_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component NonMaximalSuppresionUnit_NonMaximalSuppresion_line_buffer_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    line_buffer_V_1_U : component NonMaximalSuppresionUnit_NonMaximalSuppresion_line_buffer_V_1
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_1_address0,
        ce0 => line_buffer_V_1_ce0,
        we0 => line_buffer_V_1_we0,
        d0 => line_buffer_V_2_q1,
        address1 => line_buffer_V_1_address1,
        ce1 => line_buffer_V_1_ce1,
        q1 => line_buffer_V_1_q1);

    line_buffer_V_0_U : component NonMaximalSuppresionUnit_NonMaximalSuppresion_line_buffer_V_0
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_0_address0,
        ce0 => line_buffer_V_0_ce0,
        we0 => line_buffer_V_0_we0,
        d0 => line_buffer_V_1_q1);

    line_buffer_V_2_U : component NonMaximalSuppresionUnit_NonMaximalSuppresion_line_buffer_V_1
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_V_2_address0,
        ce0 => line_buffer_V_2_ce0,
        we0 => line_buffer_V_2_we0,
        d0 => ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4,
        address1 => line_buffer_V_2_address1,
        ce1 => line_buffer_V_2_ce1,
        q1 => line_buffer_V_2_q1);

    mul_32ns_32ns_64_2_1_U1 : component NonMaximalSuppresionUnit_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        din1 => grp_fu_303_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_303_p2);

    mul_mul_16ns_16ns_32_4_1_U2 : component NonMaximalSuppresionUnit_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_817_p0,
        din1 => grp_fu_817_p1,
        ce => grp_fu_817_ce,
        dout => grp_fu_817_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    h_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_393_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                h_reg_239 <= select_ln34_4_fu_505_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                h_reg_239 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_393_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_228 <= add_ln34_fu_313_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_228 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    input_stream_element_data_V_1_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_251)) then
                if (((or_ln38_reg_907 = ap_const_lv1_1) and (icmp_ln34_reg_888 = ap_const_lv1_0))) then 
                    input_stream_element_data_V_1_reg_261 <= ap_const_lv16_0;
                elsif (((or_ln38_reg_907 = ap_const_lv1_0) and (icmp_ln34_reg_888 = ap_const_lv1_0))) then 
                    input_stream_element_data_V_1_reg_261 <= input_stream_element_data_V_2_reg_911;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    input_stream_element_data_V_1_reg_261 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261;
                end if;
            end if; 
        end if;
    end process;

    input_stream_element_data_V_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                input_stream_element_data_V_fu_114 <= max_response_reg_V;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln886_fu_644_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_stream_element_data_V_fu_114 <= ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4;
            end if; 
        end if;
    end process;

    w_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_393_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_reg_250 <= add_ln35_fu_590_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                w_reg_250 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_393_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln85_1_reg_938 <= and_ln85_1_fu_584_p2;
                icmp_ln79_1_reg_933 <= icmp_ln79_1_fu_556_p2;
                icmp_ln79_reg_928 <= icmp_ln79_fu_550_p2;
                line_buffer_V_1_addr_reg_916 <= zext_ln35_fu_513_p1(11 - 1 downto 0);
                line_buffer_V_2_addr_reg_922 <= zext_ln35_fu_513_p1(11 - 1 downto 0);
                or_ln38_reg_907 <= or_ln38_fu_530_p2;
                select_ln34_2_reg_892 <= select_ln34_2_fu_479_p3;
                    zext_ln35_reg_902(11 downto 0) <= zext_ln35_fu_513_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln85_1_reg_938_pp0_iter1_reg <= and_ln85_1_reg_938;
                icmp_ln34_reg_888 <= icmp_ln34_fu_393_p2;
                icmp_ln79_1_reg_933_pp0_iter1_reg <= icmp_ln79_1_reg_933;
                icmp_ln79_reg_928_pp0_iter1_reg <= icmp_ln79_reg_928;
                icmp_ln886_1_reg_963 <= icmp_ln886_1_fu_661_p2;
                select_ln34_2_reg_892_pp0_iter1_reg <= select_ln34_2_reg_892;
                select_ln99_1_reg_954 <= select_ln99_1_fu_636_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln85_1_reg_938_pp0_iter2_reg <= and_ln85_1_reg_938_pp0_iter1_reg;
                and_ln85_1_reg_938_pp0_iter3_reg <= and_ln85_1_reg_938_pp0_iter2_reg;
                and_ln85_1_reg_938_pp0_iter4_reg <= and_ln85_1_reg_938_pp0_iter3_reg;
                and_ln85_1_reg_938_pp0_iter5_reg <= and_ln85_1_reg_938_pp0_iter4_reg;
                and_ln85_1_reg_938_pp0_iter6_reg <= and_ln85_1_reg_938_pp0_iter5_reg;
                icmp_ln79_1_reg_933_pp0_iter2_reg <= icmp_ln79_1_reg_933_pp0_iter1_reg;
                icmp_ln79_1_reg_933_pp0_iter3_reg <= icmp_ln79_1_reg_933_pp0_iter2_reg;
                icmp_ln79_1_reg_933_pp0_iter4_reg <= icmp_ln79_1_reg_933_pp0_iter3_reg;
                icmp_ln79_1_reg_933_pp0_iter5_reg <= icmp_ln79_1_reg_933_pp0_iter4_reg;
                icmp_ln79_1_reg_933_pp0_iter6_reg <= icmp_ln79_1_reg_933_pp0_iter5_reg;
                icmp_ln79_reg_928_pp0_iter2_reg <= icmp_ln79_reg_928_pp0_iter1_reg;
                icmp_ln79_reg_928_pp0_iter3_reg <= icmp_ln79_reg_928_pp0_iter2_reg;
                icmp_ln79_reg_928_pp0_iter4_reg <= icmp_ln79_reg_928_pp0_iter3_reg;
                icmp_ln79_reg_928_pp0_iter5_reg <= icmp_ln79_reg_928_pp0_iter4_reg;
                icmp_ln79_reg_928_pp0_iter6_reg <= icmp_ln79_reg_928_pp0_iter5_reg;
                icmp_ln886_1_reg_963_pp0_iter2_reg <= icmp_ln886_1_reg_963;
                icmp_ln886_1_reg_963_pp0_iter3_reg <= icmp_ln886_1_reg_963_pp0_iter2_reg;
                icmp_ln886_1_reg_963_pp0_iter4_reg <= icmp_ln886_1_reg_963_pp0_iter3_reg;
                icmp_ln886_1_reg_963_pp0_iter5_reg <= icmp_ln886_1_reg_963_pp0_iter4_reg;
                icmp_ln886_1_reg_963_pp0_iter6_reg <= icmp_ln886_1_reg_963_pp0_iter5_reg;
                input_stream_element_data_V_1_reg_261_pp0_iter2_reg <= input_stream_element_data_V_1_reg_261;
                input_stream_element_data_V_1_reg_261_pp0_iter3_reg <= input_stream_element_data_V_1_reg_261_pp0_iter2_reg;
                input_stream_element_data_V_1_reg_261_pp0_iter4_reg <= input_stream_element_data_V_1_reg_261_pp0_iter3_reg;
                input_stream_element_data_V_1_reg_261_pp0_iter5_reg <= input_stream_element_data_V_1_reg_261_pp0_iter4_reg;
                input_stream_element_data_V_1_reg_261_pp0_iter6_reg <= input_stream_element_data_V_1_reg_261_pp0_iter5_reg;
                select_ln34_2_reg_892_pp0_iter2_reg <= select_ln34_2_reg_892_pp0_iter1_reg;
                select_ln34_2_reg_892_pp0_iter3_reg <= select_ln34_2_reg_892_pp0_iter2_reg;
                select_ln34_2_reg_892_pp0_iter4_reg <= select_ln34_2_reg_892_pp0_iter3_reg;
                select_ln34_2_reg_892_pp0_iter5_reg <= select_ln34_2_reg_892_pp0_iter4_reg;
                select_ln34_2_reg_892_pp0_iter6_reg <= select_ln34_2_reg_892_pp0_iter5_reg;
                select_ln99_3_reg_968 <= select_ln99_3_fu_702_p3;
                select_ln99_5_reg_974 <= select_ln99_5_fu_747_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_393_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln38_fu_530_p2 = ap_const_lv1_0))) then
                input_stream_element_data_V_2_reg_911 <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                line_buffer_V_2_load_reg_947 <= line_buffer_V_2_q1;
                sliding_window_V_0_1 <= sliding_window_V_0_2;
                sliding_window_V_0_2 <= line_buffer_V_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln886_fu_644_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                max_response_reg_V <= ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                sliding_window_V_1_1 <= sliding_window_V_1_2;
                sliding_window_V_1_2 <= line_buffer_V_2_load_reg_947;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                sliding_window_V_2_1 <= sliding_window_V_2_2;
                sliding_window_V_2_2 <= input_stream_element_data_V_1_reg_261_pp0_iter2_reg;
            end if;
        end if;
    end process;
    zext_ln35_reg_902(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln34_fu_393_p2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln34_fu_393_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln34_fu_393_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add19_fu_282_p2 <= std_logic_vector(unsigned(image_w) + unsigned(ap_const_lv32_1));
    add_fu_276_p2 <= std_logic_vector(unsigned(image_h) + unsigned(ap_const_lv32_1));
    add_ln34_1_fu_398_p2 <= std_logic_vector(unsigned(h_reg_239) + unsigned(ap_const_lv31_1));
    add_ln34_fu_313_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_228) + unsigned(ap_const_lv64_1));
    add_ln35_fu_590_p2 <= std_logic_vector(unsigned(select_ln34_fu_408_p3) + unsigned(ap_const_lv12_1));
    and_ln79_1_fu_797_p2 <= (select_ln34_2_reg_892_pp0_iter6_reg and and_ln79_2_fu_793_p2);
    and_ln79_2_fu_793_p2 <= (icmp_ln79_reg_928_pp0_iter6_reg and icmp_ln79_1_reg_933_pp0_iter6_reg);
    and_ln79_3_fu_473_p2 <= (notrhs_mid1_fu_451_p2 and icmp37_fu_445_p2);
    and_ln79_fu_372_p2 <= (notrhs_fu_350_p2 and icmp_fu_344_p2);
    and_ln85_1_fu_584_p2 <= (select_ln34_3_fu_493_p3 and and_ln85_2_fu_578_p2);
    and_ln85_2_fu_578_p2 <= (xor_ln85_fu_572_p2 and icmp_ln85_fu_561_p2);
    and_ln85_3_fu_487_p2 <= (rev52_fu_467_p2 and notlhs1_mid1_fu_456_p2);
    and_ln85_fu_378_p2 <= (rev46_fu_366_p2 and notlhs1_fu_355_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_in_TVALID, stream_out_TREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, and_ln85_1_reg_938_pp0_iter6_reg, ap_predicate_op71_read_state4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op71_read_state4 = ap_const_boolean_1)) or ((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln85_1_reg_938_pp0_iter6_reg) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_in_TVALID, stream_out_TREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, and_ln85_1_reg_938_pp0_iter6_reg, ap_predicate_op71_read_state4, ap_block_state11_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op71_read_state4 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln85_1_reg_938_pp0_iter6_reg)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_in_TVALID, stream_out_TREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, and_ln85_1_reg_938_pp0_iter6_reg, ap_predicate_op71_read_state4, ap_block_state11_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op71_read_state4 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln85_1_reg_938_pp0_iter6_reg)))));
    end process;

        ap_block_state10_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_io_assign_proc : process(stream_out_TREADY, and_ln85_1_reg_938_pp0_iter6_reg)
    begin
                ap_block_state11_io <= ((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln85_1_reg_938_pp0_iter6_reg));
    end process;


    ap_block_state11_pp0_stage0_iter7_assign_proc : process(stream_out_TREADY, and_ln85_1_reg_938_pp0_iter6_reg)
    begin
                ap_block_state11_pp0_stage0_iter7 <= ((stream_out_TREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln85_1_reg_938_pp0_iter6_reg));
    end process;


    ap_block_state4_pp0_stage0_iter0_assign_proc : process(stream_in_TVALID, ap_predicate_op71_read_state4)
    begin
                ap_block_state4_pp0_stage0_iter0 <= ((stream_in_TVALID = ap_const_logic_0) and (ap_predicate_op71_read_state4 = ap_const_boolean_1));
    end process;

        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_251_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_251 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln34_fu_393_p2)
    begin
        if ((icmp_ln34_fu_393_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

        ap_enable_operation_100 <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_enable_operation_74_assign_proc : process(icmp_ln34_fu_393_p2)
    begin
                ap_enable_operation_74 <= (icmp_ln34_fu_393_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_76_assign_proc : process(icmp_ln34_fu_393_p2)
    begin
                ap_enable_operation_76 <= (icmp_ln34_fu_393_p2 = ap_const_lv1_0);
    end process;

        ap_enable_operation_96 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_98 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_99 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state4_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state4_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state5_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state5_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4_assign_proc : process(icmp_ln34_reg_888, or_ln38_reg_907, input_stream_element_data_V_2_reg_911, ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261)
    begin
        if ((icmp_ln34_reg_888 = ap_const_lv1_0)) then
            if ((or_ln38_reg_907 = ap_const_lv1_1)) then 
                ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 <= ap_const_lv16_0;
            elsif ((or_ln38_reg_907 = ap_const_lv1_0)) then 
                ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 <= input_stream_element_data_V_2_reg_911;
            else 
                ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261;
            end if;
        else 
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261 <= "XXXXXXXXXXXXXXXX";

    ap_predicate_op71_read_state4_assign_proc : process(icmp_ln34_fu_393_p2, or_ln38_fu_530_p2)
    begin
                ap_predicate_op71_read_state4 <= ((icmp_ln34_fu_393_p2 = ap_const_lv1_0) and (or_ln38_fu_530_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= input_stream_element_data_V_fu_114;
    binary_response_V_fu_788_p2 <= (icmp_ln886_1_reg_963_pp0_iter6_reg and icmp_ln1494_fu_783_p2);
    grp_fu_303_p0 <= grp_fu_303_p00(32 - 1 downto 0);
    grp_fu_303_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_276_p2),64));
    grp_fu_303_p1 <= grp_fu_303_p10(32 - 1 downto 0);
    grp_fu_303_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add19_fu_282_p2),64));

    grp_fu_817_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_817_ce <= ap_const_logic_1;
        else 
            grp_fu_817_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_817_p0 <= grp_fu_817_p00(16 - 1 downto 0);
    grp_fu_817_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln99_6_fu_760_p3),32));
    grp_fu_817_p1 <= grp_fu_817_p10(16 - 1 downto 0);
    grp_fu_817_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(alpha),32));
    icmp37_fu_445_p2 <= "0" when (tmp_1_fu_435_p4 = ap_const_lv30_0) else "1";
    icmp_fu_344_p2 <= "0" when (tmp_fu_334_p4 = ap_const_lv30_0) else "1";
    icmp_ln1494_fu_783_p2 <= "1" when (unsigned(zext_ln1494_fu_779_p1) > unsigned(grp_fu_817_p2)) else "0";
    icmp_ln34_fu_393_p2 <= "1" when (indvar_flatten_reg_228 = grp_fu_303_p2) else "0";
    icmp_ln35_fu_388_p2 <= "1" when (zext_ln35_1_fu_384_p1 = add19_fu_282_p2) else "0";
    icmp_ln38_fu_519_p2 <= "1" when (signed(zext_ln34_3_fu_501_p1) < signed(image_w)) else "0";
    icmp_ln79_1_fu_556_p2 <= "1" when (signed(zext_ln34_3_fu_501_p1) < signed(image_w)) else "0";
    icmp_ln79_fu_550_p2 <= "0" when (tmp_2_fu_540_p4 = ap_const_lv11_0) else "1";
    icmp_ln85_1_fu_567_p2 <= "1" when (signed(image_w) < signed(zext_ln34_3_fu_501_p1)) else "0";
    icmp_ln85_fu_561_p2 <= "0" when (select_ln34_fu_408_p3 = ap_const_lv12_0) else "1";
    icmp_ln886_1_fu_661_p2 <= "1" when (unsigned(ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4) > unsigned(beta)) else "0";
    icmp_ln886_2_fu_616_p2 <= "1" when (unsigned(sliding_window_V_0_2) > unsigned(sliding_window_V_0_1)) else "0";
    icmp_ln886_3_fu_630_p2 <= "1" when (unsigned(line_buffer_V_1_q1) > unsigned(select_ln99_fu_622_p3)) else "0";
    icmp_ln886_4_fu_685_p2 <= "1" when (unsigned(sliding_window_V_1_1) > unsigned(select_ln99_1_reg_954)) else "0";
    icmp_ln886_5_fu_697_p2 <= "1" when (unsigned(line_buffer_V_2_load_reg_947) > unsigned(select_ln99_2_fu_690_p3)) else "0";
    icmp_ln886_6_fu_729_p2 <= "1" when (unsigned(sliding_window_V_2_1) > unsigned(select_ln99_3_reg_968)) else "0";
    icmp_ln886_7_fu_741_p2 <= "1" when (unsigned(sliding_window_V_2_2) > unsigned(select_ln99_4_fu_734_p3)) else "0";
    icmp_ln886_8_fu_755_p2 <= "1" when (unsigned(input_stream_element_data_V_1_reg_261_pp0_iter3_reg) > unsigned(select_ln99_5_reg_974)) else "0";
    icmp_ln886_fu_644_p2 <= "1" when (unsigned(ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4) > unsigned(input_stream_element_data_V_fu_114)) else "0";
    line_buffer_V_0_address0 <= zext_ln35_reg_902(11 - 1 downto 0);

    line_buffer_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_1_address0 <= line_buffer_V_1_addr_reg_916;
    line_buffer_V_1_address1 <= zext_ln35_fu_513_p1(11 - 1 downto 0);

    line_buffer_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_V_2_address0 <= line_buffer_V_2_addr_reg_922;
    line_buffer_V_2_address1 <= zext_ln35_fu_513_p1(11 - 1 downto 0);

    line_buffer_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_V_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    notlhs1_fu_355_p2 <= "0" when (h_reg_239 = ap_const_lv31_0) else "1";
    notlhs1_mid1_fu_456_p2 <= "0" when (add_ln34_1_fu_398_p2 = ap_const_lv31_0) else "1";
    notrhs_fu_350_p2 <= "1" when (signed(zext_ln34_2_fu_319_p1) < signed(image_h)) else "0";
    notrhs_mid1_fu_451_p2 <= "1" when (signed(zext_ln34_1_fu_404_p1) < signed(image_h)) else "0";
    or_ln38_fu_530_p2 <= (xor_ln38_fu_524_p2 or select_ln34_1_fu_427_p3);
    output_stream_element_data_V_fu_802_p2 <= (binary_response_V_fu_788_p2 and and_ln79_1_fu_797_p2);
    rev44_fu_328_p2 <= (slt_fu_323_p2 xor ap_const_lv1_1);
    rev46_fu_366_p2 <= (slt45_fu_361_p2 xor ap_const_lv1_1);
    rev50_fu_421_p2 <= (slt49_fu_416_p2 xor ap_const_lv1_1);
    rev52_fu_467_p2 <= (slt51_fu_462_p2 xor ap_const_lv1_1);
    select_ln34_1_fu_427_p3 <= 
        rev50_fu_421_p2 when (icmp_ln35_fu_388_p2(0) = '1') else 
        rev44_fu_328_p2;
    select_ln34_2_fu_479_p3 <= 
        and_ln79_3_fu_473_p2 when (icmp_ln35_fu_388_p2(0) = '1') else 
        and_ln79_fu_372_p2;
    select_ln34_3_fu_493_p3 <= 
        and_ln85_3_fu_487_p2 when (icmp_ln35_fu_388_p2(0) = '1') else 
        and_ln85_fu_378_p2;
    select_ln34_4_fu_505_p3 <= 
        add_ln34_1_fu_398_p2 when (icmp_ln35_fu_388_p2(0) = '1') else 
        h_reg_239;
    select_ln34_fu_408_p3 <= 
        ap_const_lv12_0 when (icmp_ln35_fu_388_p2(0) = '1') else 
        w_reg_250;
    select_ln99_1_fu_636_p3 <= 
        line_buffer_V_1_q1 when (icmp_ln886_3_fu_630_p2(0) = '1') else 
        select_ln99_fu_622_p3;
    select_ln99_2_fu_690_p3 <= 
        sliding_window_V_1_1 when (icmp_ln886_4_fu_685_p2(0) = '1') else 
        select_ln99_1_reg_954;
    select_ln99_3_fu_702_p3 <= 
        line_buffer_V_2_load_reg_947 when (icmp_ln886_5_fu_697_p2(0) = '1') else 
        select_ln99_2_fu_690_p3;
    select_ln99_4_fu_734_p3 <= 
        sliding_window_V_2_1 when (icmp_ln886_6_fu_729_p2(0) = '1') else 
        select_ln99_3_reg_968;
    select_ln99_5_fu_747_p3 <= 
        sliding_window_V_2_2 when (icmp_ln886_7_fu_741_p2(0) = '1') else 
        select_ln99_4_fu_734_p3;
    select_ln99_6_fu_760_p3 <= 
        input_stream_element_data_V_1_reg_261_pp0_iter3_reg when (icmp_ln886_8_fu_755_p2(0) = '1') else 
        select_ln99_5_reg_974;
    select_ln99_fu_622_p3 <= 
        sliding_window_V_0_2 when (icmp_ln886_2_fu_616_p2(0) = '1') else 
        sliding_window_V_0_1;
    shl_ln_fu_771_p3 <= (input_stream_element_data_V_1_reg_261_pp0_iter6_reg & ap_const_lv15_0);
    slt45_fu_361_p2 <= "1" when (signed(image_h) < signed(zext_ln34_2_fu_319_p1)) else "0";
    slt49_fu_416_p2 <= "1" when (signed(zext_ln34_1_fu_404_p1) < signed(image_h)) else "0";
    slt51_fu_462_p2 <= "1" when (signed(image_h) < signed(zext_ln34_1_fu_404_p1)) else "0";
    slt_fu_323_p2 <= "1" when (signed(zext_ln34_2_fu_319_p1) < signed(image_h)) else "0";

    stream_in_TDATA_blk_n_assign_proc : process(stream_in_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln34_fu_393_p2, or_ln38_fu_530_p2)
    begin
        if (((icmp_ln34_fu_393_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln38_fu_530_p2 = ap_const_lv1_0))) then 
            stream_in_TDATA_blk_n <= stream_in_TVALID;
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op71_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op71_read_state4 = ap_const_boolean_1))) then 
            stream_in_TREADY <= ap_const_logic_1;
        else 
            stream_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_TDATA <= 
        ap_const_lv8_FF when (output_stream_element_data_V_fu_802_p2(0) = '1') else 
        ap_const_lv8_0;

    stream_out_TDATA_blk_n_assign_proc : process(stream_out_TREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, and_ln85_1_reg_938_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln85_1_reg_938_pp0_iter6_reg) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            stream_out_TDATA_blk_n <= stream_out_TREADY;
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TKEEP <= ap_const_lv1_0;
    stream_out_TLAST <= ap_const_lv1_0;
    stream_out_TSTRB <= ap_const_lv1_0;
    stream_out_TUSER <= ap_const_lv1_0;

    stream_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter7, and_ln85_1_reg_938_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln85_1_reg_938_pp0_iter6_reg) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            stream_out_TVALID <= ap_const_logic_1;
        else 
            stream_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_435_p4 <= add_ln34_1_fu_398_p2(30 downto 1);
    tmp_2_fu_540_p4 <= select_ln34_fu_408_p3(11 downto 1);
    tmp_fu_334_p4 <= h_reg_239(30 downto 1);
    xor_ln38_fu_524_p2 <= (icmp_ln38_fu_519_p2 xor ap_const_lv1_1);
    xor_ln85_fu_572_p2 <= (icmp_ln85_1_fu_567_p2 xor ap_const_lv1_1);
    zext_ln1494_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_771_p3),32));
    zext_ln34_1_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_398_p2),32));
    zext_ln34_2_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_239),32));
    zext_ln34_3_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_fu_408_p3),32));
    zext_ln35_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_250),32));
    zext_ln35_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_fu_408_p3),64));
end behav;
