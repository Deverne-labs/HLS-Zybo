// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module NonMaximalSuppresionUnit_NonMaximalSuppresion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        image_w,
        image_h,
        alpha,
        beta,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state12 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [1:0] stream_in_TKEEP;
input  [1:0] stream_in_TSTRB;
input  [0:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
output  [7:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [0:0] stream_out_TKEEP;
output  [0:0] stream_out_TSTRB;
output  [0:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
input  [31:0] image_w;
input  [31:0] image_h;
input  [15:0] alpha;
input  [15:0] beta;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_TREADY;
reg stream_out_TVALID;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] max_response_reg_V;
wire   [10:0] line_buffer_V_1_address0;
reg    line_buffer_V_1_ce0;
reg    line_buffer_V_1_we0;
wire   [10:0] line_buffer_V_1_address1;
reg    line_buffer_V_1_ce1;
wire   [15:0] line_buffer_V_1_q1;
wire   [10:0] line_buffer_V_0_address0;
reg    line_buffer_V_0_ce0;
reg    line_buffer_V_0_we0;
wire   [10:0] line_buffer_V_2_address0;
reg    line_buffer_V_2_ce0;
reg    line_buffer_V_2_we0;
wire   [10:0] line_buffer_V_2_address1;
reg    line_buffer_V_2_ce1;
wire   [15:0] line_buffer_V_2_q1;
reg   [15:0] sliding_window_V_0_1;
reg   [15:0] sliding_window_V_0_2;
reg   [15:0] sliding_window_V_1_1;
reg   [15:0] sliding_window_V_1_2;
reg   [15:0] sliding_window_V_2_1;
reg   [15:0] sliding_window_V_2_2;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln34_fu_393_p2;
wire   [0:0] or_ln38_fu_530_p2;
reg    stream_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] and_ln85_1_reg_938;
reg   [0:0] and_ln85_1_reg_938_pp0_iter6_reg;
reg   [63:0] indvar_flatten_reg_228;
reg   [30:0] h_reg_239;
reg   [11:0] w_reg_250;
reg   [15:0] input_stream_element_data_V_1_reg_261;
reg   [15:0] input_stream_element_data_V_1_reg_261_pp0_iter2_reg;
reg    ap_predicate_op71_read_state4;
reg    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
reg    ap_block_state11_pp0_stage0_iter7;
reg    ap_block_state11_io;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] input_stream_element_data_V_1_reg_261_pp0_iter3_reg;
reg   [15:0] input_stream_element_data_V_1_reg_261_pp0_iter4_reg;
reg   [15:0] input_stream_element_data_V_1_reg_261_pp0_iter5_reg;
reg   [15:0] input_stream_element_data_V_1_reg_261_pp0_iter6_reg;
wire   [31:0] add_fu_276_p2;
wire   [31:0] add19_fu_282_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [63:0] grp_fu_303_p2;
wire   [63:0] add_ln34_fu_313_p2;
reg   [0:0] icmp_ln34_reg_888;
wire   [0:0] select_ln34_2_fu_479_p3;
reg   [0:0] select_ln34_2_reg_892;
reg   [0:0] select_ln34_2_reg_892_pp0_iter1_reg;
reg   [0:0] select_ln34_2_reg_892_pp0_iter2_reg;
reg   [0:0] select_ln34_2_reg_892_pp0_iter3_reg;
reg   [0:0] select_ln34_2_reg_892_pp0_iter4_reg;
reg   [0:0] select_ln34_2_reg_892_pp0_iter5_reg;
reg   [0:0] select_ln34_2_reg_892_pp0_iter6_reg;
wire   [30:0] select_ln34_4_fu_505_p3;
wire   [63:0] zext_ln35_fu_513_p1;
reg   [63:0] zext_ln35_reg_902;
reg   [0:0] or_ln38_reg_907;
reg   [15:0] input_stream_element_data_V_2_reg_911;
reg   [10:0] line_buffer_V_1_addr_reg_916;
reg   [10:0] line_buffer_V_2_addr_reg_922;
wire   [0:0] icmp_ln79_fu_550_p2;
reg   [0:0] icmp_ln79_reg_928;
reg   [0:0] icmp_ln79_reg_928_pp0_iter1_reg;
reg   [0:0] icmp_ln79_reg_928_pp0_iter2_reg;
reg   [0:0] icmp_ln79_reg_928_pp0_iter3_reg;
reg   [0:0] icmp_ln79_reg_928_pp0_iter4_reg;
reg   [0:0] icmp_ln79_reg_928_pp0_iter5_reg;
reg   [0:0] icmp_ln79_reg_928_pp0_iter6_reg;
wire   [0:0] icmp_ln79_1_fu_556_p2;
reg   [0:0] icmp_ln79_1_reg_933;
reg   [0:0] icmp_ln79_1_reg_933_pp0_iter1_reg;
reg   [0:0] icmp_ln79_1_reg_933_pp0_iter2_reg;
reg   [0:0] icmp_ln79_1_reg_933_pp0_iter3_reg;
reg   [0:0] icmp_ln79_1_reg_933_pp0_iter4_reg;
reg   [0:0] icmp_ln79_1_reg_933_pp0_iter5_reg;
reg   [0:0] icmp_ln79_1_reg_933_pp0_iter6_reg;
wire   [0:0] and_ln85_1_fu_584_p2;
reg   [0:0] and_ln85_1_reg_938_pp0_iter1_reg;
reg   [0:0] and_ln85_1_reg_938_pp0_iter2_reg;
reg   [0:0] and_ln85_1_reg_938_pp0_iter3_reg;
reg   [0:0] and_ln85_1_reg_938_pp0_iter4_reg;
reg   [0:0] and_ln85_1_reg_938_pp0_iter5_reg;
wire   [11:0] add_ln35_fu_590_p2;
reg   [15:0] line_buffer_V_2_load_reg_947;
reg    ap_enable_reg_pp0_iter1;
wire   [15:0] select_ln99_1_fu_636_p3;
reg   [15:0] select_ln99_1_reg_954;
wire   [0:0] icmp_ln886_1_fu_661_p2;
reg   [0:0] icmp_ln886_1_reg_963;
reg   [0:0] icmp_ln886_1_reg_963_pp0_iter2_reg;
reg   [0:0] icmp_ln886_1_reg_963_pp0_iter3_reg;
reg   [0:0] icmp_ln886_1_reg_963_pp0_iter4_reg;
reg   [0:0] icmp_ln886_1_reg_963_pp0_iter5_reg;
reg   [0:0] icmp_ln886_1_reg_963_pp0_iter6_reg;
wire   [15:0] select_ln99_3_fu_702_p3;
reg   [15:0] select_ln99_3_reg_968;
wire   [15:0] select_ln99_5_fu_747_p3;
reg   [15:0] select_ln99_5_reg_974;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [15:0] ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4;
wire   [15:0] ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261;
wire   [0:0] icmp_ln886_fu_644_p2;
reg   [15:0] input_stream_element_data_V_fu_114;
wire    ap_CS_fsm_state12;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_303_p0;
wire   [31:0] grp_fu_303_p1;
wire   [31:0] zext_ln34_2_fu_319_p1;
wire   [0:0] slt_fu_323_p2;
wire   [29:0] tmp_fu_334_p4;
wire   [0:0] slt45_fu_361_p2;
wire   [0:0] notrhs_fu_350_p2;
wire   [0:0] icmp_fu_344_p2;
wire   [0:0] rev46_fu_366_p2;
wire   [0:0] notlhs1_fu_355_p2;
wire   [31:0] zext_ln35_1_fu_384_p1;
wire   [30:0] add_ln34_1_fu_398_p2;
wire   [0:0] icmp_ln35_fu_388_p2;
wire   [31:0] zext_ln34_1_fu_404_p1;
wire   [0:0] slt49_fu_416_p2;
wire   [0:0] rev50_fu_421_p2;
wire   [0:0] rev44_fu_328_p2;
wire   [29:0] tmp_1_fu_435_p4;
wire   [0:0] slt51_fu_462_p2;
wire   [0:0] notrhs_mid1_fu_451_p2;
wire   [0:0] icmp37_fu_445_p2;
wire   [0:0] and_ln79_3_fu_473_p2;
wire   [0:0] and_ln79_fu_372_p2;
wire   [0:0] rev52_fu_467_p2;
wire   [0:0] notlhs1_mid1_fu_456_p2;
wire   [0:0] and_ln85_3_fu_487_p2;
wire   [0:0] and_ln85_fu_378_p2;
wire   [11:0] select_ln34_fu_408_p3;
wire   [31:0] zext_ln34_3_fu_501_p1;
wire   [0:0] icmp_ln38_fu_519_p2;
wire   [0:0] xor_ln38_fu_524_p2;
wire   [0:0] select_ln34_1_fu_427_p3;
wire   [10:0] tmp_2_fu_540_p4;
wire   [0:0] icmp_ln85_1_fu_567_p2;
wire   [0:0] icmp_ln85_fu_561_p2;
wire   [0:0] xor_ln85_fu_572_p2;
wire   [0:0] and_ln85_2_fu_578_p2;
wire   [0:0] select_ln34_3_fu_493_p3;
wire   [0:0] icmp_ln886_2_fu_616_p2;
wire   [15:0] select_ln99_fu_622_p3;
wire   [0:0] icmp_ln886_3_fu_630_p2;
wire   [0:0] icmp_ln886_4_fu_685_p2;
wire   [15:0] select_ln99_2_fu_690_p3;
wire   [0:0] icmp_ln886_5_fu_697_p2;
wire   [0:0] icmp_ln886_6_fu_729_p2;
wire   [15:0] select_ln99_4_fu_734_p3;
wire   [0:0] icmp_ln886_7_fu_741_p2;
wire   [0:0] icmp_ln886_8_fu_755_p2;
wire   [15:0] select_ln99_6_fu_760_p3;
wire   [30:0] shl_ln_fu_771_p3;
wire   [31:0] zext_ln1494_fu_779_p1;
wire   [31:0] grp_fu_817_p2;
wire   [0:0] icmp_ln1494_fu_783_p2;
wire   [0:0] and_ln79_2_fu_793_p2;
wire   [0:0] and_ln79_1_fu_797_p2;
wire   [0:0] binary_response_V_fu_788_p2;
wire   [0:0] output_stream_element_data_V_fu_802_p2;
wire   [15:0] grp_fu_817_p0;
wire   [15:0] grp_fu_817_p1;
reg    grp_fu_817_ce;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_74;
reg    ap_enable_state4_pp0_iter0_stage0;
wire    ap_enable_operation_96;
reg    ap_enable_state5_pp0_iter1_stage0;
wire    ap_enable_operation_99;
reg    ap_enable_operation_76;
wire    ap_enable_operation_98;
wire    ap_enable_operation_100;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_303_p00;
wire   [63:0] grp_fu_303_p10;
wire   [31:0] grp_fu_817_p00;
wire   [31:0] grp_fu_817_p10;
reg    ap_condition_251;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 max_response_reg_V = 16'd0;
#0 sliding_window_V_0_1 = 16'd0;
#0 sliding_window_V_0_2 = 16'd0;
#0 sliding_window_V_1_1 = 16'd0;
#0 sliding_window_V_1_2 = 16'd0;
#0 sliding_window_V_2_1 = 16'd0;
#0 sliding_window_V_2_2 = 16'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

NonMaximalSuppresionUnit_NonMaximalSuppresion_line_buffer_V_1 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_1_address0),
    .ce0(line_buffer_V_1_ce0),
    .we0(line_buffer_V_1_we0),
    .d0(line_buffer_V_2_q1),
    .address1(line_buffer_V_1_address1),
    .ce1(line_buffer_V_1_ce1),
    .q1(line_buffer_V_1_q1)
);

NonMaximalSuppresionUnit_NonMaximalSuppresion_line_buffer_V_0 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_0_address0),
    .ce0(line_buffer_V_0_ce0),
    .we0(line_buffer_V_0_we0),
    .d0(line_buffer_V_1_q1)
);

NonMaximalSuppresionUnit_NonMaximalSuppresion_line_buffer_V_1 #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
line_buffer_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_V_2_address0),
    .ce0(line_buffer_V_2_ce0),
    .we0(line_buffer_V_2_we0),
    .d0(ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4),
    .address1(line_buffer_V_2_address1),
    .ce1(line_buffer_V_2_ce1),
    .q1(line_buffer_V_2_q1)
);

NonMaximalSuppresionUnit_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_303_p0),
    .din1(grp_fu_303_p1),
    .ce(1'b1),
    .dout(grp_fu_303_p2)
);

NonMaximalSuppresionUnit_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_817_p0),
    .din1(grp_fu_817_p1),
    .ce(grp_fu_817_ce),
    .dout(grp_fu_817_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_393_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_reg_239 <= select_ln34_4_fu_505_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        h_reg_239 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_393_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_228 <= add_ln34_fu_313_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_228 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_251)) begin
        if (((or_ln38_reg_907 == 1'd1) & (icmp_ln34_reg_888 == 1'd0))) begin
            input_stream_element_data_V_1_reg_261 <= 16'd0;
        end else if (((or_ln38_reg_907 == 1'd0) & (icmp_ln34_reg_888 == 1'd0))) begin
            input_stream_element_data_V_1_reg_261 <= input_stream_element_data_V_2_reg_911;
        end else if ((1'b1 == 1'b1)) begin
            input_stream_element_data_V_1_reg_261 <= ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_stream_element_data_V_fu_114 <= max_response_reg_V;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln886_fu_644_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_stream_element_data_V_fu_114 <= ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_393_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_reg_250 <= add_ln35_fu_590_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        w_reg_250 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_393_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln85_1_reg_938 <= and_ln85_1_fu_584_p2;
        icmp_ln79_1_reg_933 <= icmp_ln79_1_fu_556_p2;
        icmp_ln79_reg_928 <= icmp_ln79_fu_550_p2;
        line_buffer_V_1_addr_reg_916 <= zext_ln35_fu_513_p1;
        line_buffer_V_2_addr_reg_922 <= zext_ln35_fu_513_p1;
        or_ln38_reg_907 <= or_ln38_fu_530_p2;
        select_ln34_2_reg_892 <= select_ln34_2_fu_479_p3;
        zext_ln35_reg_902[11 : 0] <= zext_ln35_fu_513_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln85_1_reg_938_pp0_iter1_reg <= and_ln85_1_reg_938;
        icmp_ln34_reg_888 <= icmp_ln34_fu_393_p2;
        icmp_ln79_1_reg_933_pp0_iter1_reg <= icmp_ln79_1_reg_933;
        icmp_ln79_reg_928_pp0_iter1_reg <= icmp_ln79_reg_928;
        icmp_ln886_1_reg_963 <= icmp_ln886_1_fu_661_p2;
        select_ln34_2_reg_892_pp0_iter1_reg <= select_ln34_2_reg_892;
        select_ln99_1_reg_954 <= select_ln99_1_fu_636_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln85_1_reg_938_pp0_iter2_reg <= and_ln85_1_reg_938_pp0_iter1_reg;
        and_ln85_1_reg_938_pp0_iter3_reg <= and_ln85_1_reg_938_pp0_iter2_reg;
        and_ln85_1_reg_938_pp0_iter4_reg <= and_ln85_1_reg_938_pp0_iter3_reg;
        and_ln85_1_reg_938_pp0_iter5_reg <= and_ln85_1_reg_938_pp0_iter4_reg;
        and_ln85_1_reg_938_pp0_iter6_reg <= and_ln85_1_reg_938_pp0_iter5_reg;
        icmp_ln79_1_reg_933_pp0_iter2_reg <= icmp_ln79_1_reg_933_pp0_iter1_reg;
        icmp_ln79_1_reg_933_pp0_iter3_reg <= icmp_ln79_1_reg_933_pp0_iter2_reg;
        icmp_ln79_1_reg_933_pp0_iter4_reg <= icmp_ln79_1_reg_933_pp0_iter3_reg;
        icmp_ln79_1_reg_933_pp0_iter5_reg <= icmp_ln79_1_reg_933_pp0_iter4_reg;
        icmp_ln79_1_reg_933_pp0_iter6_reg <= icmp_ln79_1_reg_933_pp0_iter5_reg;
        icmp_ln79_reg_928_pp0_iter2_reg <= icmp_ln79_reg_928_pp0_iter1_reg;
        icmp_ln79_reg_928_pp0_iter3_reg <= icmp_ln79_reg_928_pp0_iter2_reg;
        icmp_ln79_reg_928_pp0_iter4_reg <= icmp_ln79_reg_928_pp0_iter3_reg;
        icmp_ln79_reg_928_pp0_iter5_reg <= icmp_ln79_reg_928_pp0_iter4_reg;
        icmp_ln79_reg_928_pp0_iter6_reg <= icmp_ln79_reg_928_pp0_iter5_reg;
        icmp_ln886_1_reg_963_pp0_iter2_reg <= icmp_ln886_1_reg_963;
        icmp_ln886_1_reg_963_pp0_iter3_reg <= icmp_ln886_1_reg_963_pp0_iter2_reg;
        icmp_ln886_1_reg_963_pp0_iter4_reg <= icmp_ln886_1_reg_963_pp0_iter3_reg;
        icmp_ln886_1_reg_963_pp0_iter5_reg <= icmp_ln886_1_reg_963_pp0_iter4_reg;
        icmp_ln886_1_reg_963_pp0_iter6_reg <= icmp_ln886_1_reg_963_pp0_iter5_reg;
        input_stream_element_data_V_1_reg_261_pp0_iter2_reg <= input_stream_element_data_V_1_reg_261;
        input_stream_element_data_V_1_reg_261_pp0_iter3_reg <= input_stream_element_data_V_1_reg_261_pp0_iter2_reg;
        input_stream_element_data_V_1_reg_261_pp0_iter4_reg <= input_stream_element_data_V_1_reg_261_pp0_iter3_reg;
        input_stream_element_data_V_1_reg_261_pp0_iter5_reg <= input_stream_element_data_V_1_reg_261_pp0_iter4_reg;
        input_stream_element_data_V_1_reg_261_pp0_iter6_reg <= input_stream_element_data_V_1_reg_261_pp0_iter5_reg;
        select_ln34_2_reg_892_pp0_iter2_reg <= select_ln34_2_reg_892_pp0_iter1_reg;
        select_ln34_2_reg_892_pp0_iter3_reg <= select_ln34_2_reg_892_pp0_iter2_reg;
        select_ln34_2_reg_892_pp0_iter4_reg <= select_ln34_2_reg_892_pp0_iter3_reg;
        select_ln34_2_reg_892_pp0_iter5_reg <= select_ln34_2_reg_892_pp0_iter4_reg;
        select_ln34_2_reg_892_pp0_iter6_reg <= select_ln34_2_reg_892_pp0_iter5_reg;
        select_ln99_3_reg_968 <= select_ln99_3_fu_702_p3;
        select_ln99_5_reg_974 <= select_ln99_5_fu_747_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_393_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln38_fu_530_p2 == 1'd0))) begin
        input_stream_element_data_V_2_reg_911 <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_2_load_reg_947 <= line_buffer_V_2_q1;
        sliding_window_V_0_1 <= sliding_window_V_0_2;
        sliding_window_V_0_2 <= line_buffer_V_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln886_fu_644_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_response_reg_V <= ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sliding_window_V_1_1 <= sliding_window_V_1_2;
        sliding_window_V_1_2 <= line_buffer_V_2_load_reg_947;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        sliding_window_V_2_1 <= sliding_window_V_2_2;
        sliding_window_V_2_2 <= input_stream_element_data_V_1_reg_261_pp0_iter2_reg;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_393_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln34_reg_888 == 1'd0)) begin
        if ((or_ln38_reg_907 == 1'd1)) begin
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 = 16'd0;
        end else if ((or_ln38_reg_907 == 1'd0)) begin
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 = input_stream_element_data_V_2_reg_911;
        end else begin
            ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 = ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261;
        end
    end else begin
        ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 = ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_817_ce = 1'b1;
    end else begin
        grp_fu_817_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_ce0 = 1'b1;
    end else begin
        line_buffer_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_0_we0 = 1'b1;
    end else begin
        line_buffer_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_ce0 = 1'b1;
    end else begin
        line_buffer_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_ce1 = 1'b1;
    end else begin
        line_buffer_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_1_we0 = 1'b1;
    end else begin
        line_buffer_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_2_ce0 = 1'b1;
    end else begin
        line_buffer_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_2_ce1 = 1'b1;
    end else begin
        line_buffer_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_V_2_we0 = 1'b1;
    end else begin
        line_buffer_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_393_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln38_fu_530_p2 == 1'd0))) begin
        stream_in_TDATA_blk_n = stream_in_TVALID;
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op71_read_state4 == 1'b1))) begin
        stream_in_TREADY = 1'b1;
    end else begin
        stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln85_1_reg_938_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        stream_out_TDATA_blk_n = stream_out_TREADY;
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln85_1_reg_938_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        stream_out_TVALID = 1'b1;
    end else begin
        stream_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln34_fu_393_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln34_fu_393_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add19_fu_282_p2 = (image_w + 32'd1);

assign add_fu_276_p2 = (image_h + 32'd1);

assign add_ln34_1_fu_398_p2 = (h_reg_239 + 31'd1);

assign add_ln34_fu_313_p2 = (indvar_flatten_reg_228 + 64'd1);

assign add_ln35_fu_590_p2 = (select_ln34_fu_408_p3 + 12'd1);

assign and_ln79_1_fu_797_p2 = (select_ln34_2_reg_892_pp0_iter6_reg & and_ln79_2_fu_793_p2);

assign and_ln79_2_fu_793_p2 = (icmp_ln79_reg_928_pp0_iter6_reg & icmp_ln79_1_reg_933_pp0_iter6_reg);

assign and_ln79_3_fu_473_p2 = (notrhs_mid1_fu_451_p2 & icmp37_fu_445_p2);

assign and_ln79_fu_372_p2 = (notrhs_fu_350_p2 & icmp_fu_344_p2);

assign and_ln85_1_fu_584_p2 = (select_ln34_3_fu_493_p3 & and_ln85_2_fu_578_p2);

assign and_ln85_2_fu_578_p2 = (xor_ln85_fu_572_p2 & icmp_ln85_fu_561_p2);

assign and_ln85_3_fu_487_p2 = (rev52_fu_467_p2 & notlhs1_mid1_fu_456_p2);

assign and_ln85_fu_378_p2 = (rev46_fu_366_p2 & notlhs1_fu_355_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (stream_in_TVALID == 1'b0) & (ap_predicate_op71_read_state4 == 1'b1)) | ((stream_out_TREADY == 1'b0) & (1'd1 == and_ln85_1_reg_938_pp0_iter6_reg) & (ap_enable_reg_pp0_iter7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (stream_in_TVALID == 1'b0) & (ap_predicate_op71_read_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((stream_out_TREADY == 1'b0) & (1'd1 == and_ln85_1_reg_938_pp0_iter6_reg)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (stream_in_TVALID == 1'b0) & (ap_predicate_op71_read_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((stream_out_TREADY == 1'b0) & (1'd1 == and_ln85_1_reg_938_pp0_iter6_reg)))));
end

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((stream_out_TREADY == 1'b0) & (1'd1 == and_ln85_1_reg_938_pp0_iter6_reg));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter7 = ((stream_out_TREADY == 1'b0) & (1'd1 == and_ln85_1_reg_938_pp0_iter6_reg));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter0 = ((stream_in_TVALID == 1'b0) & (ap_predicate_op71_read_state4 == 1'b1));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_251 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_operation_100 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_74 = (icmp_ln34_fu_393_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_76 = (icmp_ln34_fu_393_p2 == 1'd0);
end

assign ap_enable_operation_96 = (1'b1 == 1'b1);

assign ap_enable_operation_98 = (1'b1 == 1'b1);

assign ap_enable_operation_99 = (1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state4_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state5_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_phi_reg_pp0_iter1_input_stream_element_data_V_1_reg_261 = 'bx;

always @ (*) begin
    ap_predicate_op71_read_state4 = ((icmp_ln34_fu_393_p2 == 1'd0) & (or_ln38_fu_530_p2 == 1'd0));
end

assign ap_return = input_stream_element_data_V_fu_114;

assign binary_response_V_fu_788_p2 = (icmp_ln886_1_reg_963_pp0_iter6_reg & icmp_ln1494_fu_783_p2);

assign grp_fu_303_p0 = grp_fu_303_p00;

assign grp_fu_303_p00 = add_fu_276_p2;

assign grp_fu_303_p1 = grp_fu_303_p10;

assign grp_fu_303_p10 = add19_fu_282_p2;

assign grp_fu_817_p0 = grp_fu_817_p00;

assign grp_fu_817_p00 = select_ln99_6_fu_760_p3;

assign grp_fu_817_p1 = grp_fu_817_p10;

assign grp_fu_817_p10 = alpha;

assign icmp37_fu_445_p2 = ((tmp_1_fu_435_p4 != 30'd0) ? 1'b1 : 1'b0);

assign icmp_fu_344_p2 = ((tmp_fu_334_p4 != 30'd0) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_783_p2 = ((zext_ln1494_fu_779_p1 > grp_fu_817_p2) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_393_p2 = ((indvar_flatten_reg_228 == grp_fu_303_p2) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_388_p2 = ((zext_ln35_1_fu_384_p1 == add19_fu_282_p2) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_519_p2 = (($signed(zext_ln34_3_fu_501_p1) < $signed(image_w)) ? 1'b1 : 1'b0);

assign icmp_ln79_1_fu_556_p2 = (($signed(zext_ln34_3_fu_501_p1) < $signed(image_w)) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_550_p2 = ((tmp_2_fu_540_p4 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln85_1_fu_567_p2 = (($signed(image_w) < $signed(zext_ln34_3_fu_501_p1)) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_561_p2 = ((select_ln34_fu_408_p3 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln886_1_fu_661_p2 = ((ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 > beta) ? 1'b1 : 1'b0);

assign icmp_ln886_2_fu_616_p2 = ((sliding_window_V_0_2 > sliding_window_V_0_1) ? 1'b1 : 1'b0);

assign icmp_ln886_3_fu_630_p2 = ((line_buffer_V_1_q1 > select_ln99_fu_622_p3) ? 1'b1 : 1'b0);

assign icmp_ln886_4_fu_685_p2 = ((sliding_window_V_1_1 > select_ln99_1_reg_954) ? 1'b1 : 1'b0);

assign icmp_ln886_5_fu_697_p2 = ((line_buffer_V_2_load_reg_947 > select_ln99_2_fu_690_p3) ? 1'b1 : 1'b0);

assign icmp_ln886_6_fu_729_p2 = ((sliding_window_V_2_1 > select_ln99_3_reg_968) ? 1'b1 : 1'b0);

assign icmp_ln886_7_fu_741_p2 = ((sliding_window_V_2_2 > select_ln99_4_fu_734_p3) ? 1'b1 : 1'b0);

assign icmp_ln886_8_fu_755_p2 = ((input_stream_element_data_V_1_reg_261_pp0_iter3_reg > select_ln99_5_reg_974) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_644_p2 = ((ap_phi_mux_input_stream_element_data_V_1_phi_fu_264_p4 > input_stream_element_data_V_fu_114) ? 1'b1 : 1'b0);

assign line_buffer_V_0_address0 = zext_ln35_reg_902;

assign line_buffer_V_1_address0 = line_buffer_V_1_addr_reg_916;

assign line_buffer_V_1_address1 = zext_ln35_fu_513_p1;

assign line_buffer_V_2_address0 = line_buffer_V_2_addr_reg_922;

assign line_buffer_V_2_address1 = zext_ln35_fu_513_p1;

assign notlhs1_fu_355_p2 = ((h_reg_239 != 31'd0) ? 1'b1 : 1'b0);

assign notlhs1_mid1_fu_456_p2 = ((add_ln34_1_fu_398_p2 != 31'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_350_p2 = (($signed(zext_ln34_2_fu_319_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign notrhs_mid1_fu_451_p2 = (($signed(zext_ln34_1_fu_404_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign or_ln38_fu_530_p2 = (xor_ln38_fu_524_p2 | select_ln34_1_fu_427_p3);

assign output_stream_element_data_V_fu_802_p2 = (binary_response_V_fu_788_p2 & and_ln79_1_fu_797_p2);

assign rev44_fu_328_p2 = (slt_fu_323_p2 ^ 1'd1);

assign rev46_fu_366_p2 = (slt45_fu_361_p2 ^ 1'd1);

assign rev50_fu_421_p2 = (slt49_fu_416_p2 ^ 1'd1);

assign rev52_fu_467_p2 = (slt51_fu_462_p2 ^ 1'd1);

assign select_ln34_1_fu_427_p3 = ((icmp_ln35_fu_388_p2[0:0] == 1'b1) ? rev50_fu_421_p2 : rev44_fu_328_p2);

assign select_ln34_2_fu_479_p3 = ((icmp_ln35_fu_388_p2[0:0] == 1'b1) ? and_ln79_3_fu_473_p2 : and_ln79_fu_372_p2);

assign select_ln34_3_fu_493_p3 = ((icmp_ln35_fu_388_p2[0:0] == 1'b1) ? and_ln85_3_fu_487_p2 : and_ln85_fu_378_p2);

assign select_ln34_4_fu_505_p3 = ((icmp_ln35_fu_388_p2[0:0] == 1'b1) ? add_ln34_1_fu_398_p2 : h_reg_239);

assign select_ln34_fu_408_p3 = ((icmp_ln35_fu_388_p2[0:0] == 1'b1) ? 12'd0 : w_reg_250);

assign select_ln99_1_fu_636_p3 = ((icmp_ln886_3_fu_630_p2[0:0] == 1'b1) ? line_buffer_V_1_q1 : select_ln99_fu_622_p3);

assign select_ln99_2_fu_690_p3 = ((icmp_ln886_4_fu_685_p2[0:0] == 1'b1) ? sliding_window_V_1_1 : select_ln99_1_reg_954);

assign select_ln99_3_fu_702_p3 = ((icmp_ln886_5_fu_697_p2[0:0] == 1'b1) ? line_buffer_V_2_load_reg_947 : select_ln99_2_fu_690_p3);

assign select_ln99_4_fu_734_p3 = ((icmp_ln886_6_fu_729_p2[0:0] == 1'b1) ? sliding_window_V_2_1 : select_ln99_3_reg_968);

assign select_ln99_5_fu_747_p3 = ((icmp_ln886_7_fu_741_p2[0:0] == 1'b1) ? sliding_window_V_2_2 : select_ln99_4_fu_734_p3);

assign select_ln99_6_fu_760_p3 = ((icmp_ln886_8_fu_755_p2[0:0] == 1'b1) ? input_stream_element_data_V_1_reg_261_pp0_iter3_reg : select_ln99_5_reg_974);

assign select_ln99_fu_622_p3 = ((icmp_ln886_2_fu_616_p2[0:0] == 1'b1) ? sliding_window_V_0_2 : sliding_window_V_0_1);

assign shl_ln_fu_771_p3 = {{input_stream_element_data_V_1_reg_261_pp0_iter6_reg}, {15'd0}};

assign slt45_fu_361_p2 = (($signed(image_h) < $signed(zext_ln34_2_fu_319_p1)) ? 1'b1 : 1'b0);

assign slt49_fu_416_p2 = (($signed(zext_ln34_1_fu_404_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign slt51_fu_462_p2 = (($signed(image_h) < $signed(zext_ln34_1_fu_404_p1)) ? 1'b1 : 1'b0);

assign slt_fu_323_p2 = (($signed(zext_ln34_2_fu_319_p1) < $signed(image_h)) ? 1'b1 : 1'b0);

assign stream_out_TDATA = ((output_stream_element_data_V_fu_802_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign stream_out_TKEEP = 1'd0;

assign stream_out_TLAST = 1'd0;

assign stream_out_TSTRB = 1'd0;

assign stream_out_TUSER = 1'd0;

assign tmp_1_fu_435_p4 = {{add_ln34_1_fu_398_p2[30:1]}};

assign tmp_2_fu_540_p4 = {{select_ln34_fu_408_p3[11:1]}};

assign tmp_fu_334_p4 = {{h_reg_239[30:1]}};

assign xor_ln38_fu_524_p2 = (icmp_ln38_fu_519_p2 ^ 1'd1);

assign xor_ln85_fu_572_p2 = (icmp_ln85_1_fu_567_p2 ^ 1'd1);

assign zext_ln1494_fu_779_p1 = shl_ln_fu_771_p3;

assign zext_ln34_1_fu_404_p1 = add_ln34_1_fu_398_p2;

assign zext_ln34_2_fu_319_p1 = h_reg_239;

assign zext_ln34_3_fu_501_p1 = select_ln34_fu_408_p3;

assign zext_ln35_1_fu_384_p1 = w_reg_250;

assign zext_ln35_fu_513_p1 = select_ln34_fu_408_p3;

always @ (posedge ap_clk) begin
    zext_ln35_reg_902[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //NonMaximalSuppresionUnit_NonMaximalSuppresion
