// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DataMoverUnit_mm2s_32bits_M2S_FormatLocalBuffer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        axi_elt_dma_buffer_V_address0,
        axi_elt_dma_buffer_V_ce0,
        axi_elt_dma_buffer_V_q0,
        stream_elt_dma_buffer_V_address0,
        stream_elt_dma_buffer_V_ce0,
        stream_elt_dma_buffer_V_we0,
        stream_elt_dma_buffer_V_d0,
        stream_elt_dma_buffer_V_address1,
        stream_elt_dma_buffer_V_ce1,
        stream_elt_dma_buffer_V_we1,
        stream_elt_dma_buffer_V_d1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [8:0] axi_elt_dma_buffer_V_address0;
output   axi_elt_dma_buffer_V_ce0;
input  [31:0] axi_elt_dma_buffer_V_q0;
output  [10:0] stream_elt_dma_buffer_V_address0;
output   stream_elt_dma_buffer_V_ce0;
output   stream_elt_dma_buffer_V_we0;
output  [7:0] stream_elt_dma_buffer_V_d0;
output  [10:0] stream_elt_dma_buffer_V_address1;
output   stream_elt_dma_buffer_V_ce1;
output   stream_elt_dma_buffer_V_we1;
output  [7:0] stream_elt_dma_buffer_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg axi_elt_dma_buffer_V_ce0;
reg[10:0] stream_elt_dma_buffer_V_address0;
reg stream_elt_dma_buffer_V_ce0;
reg stream_elt_dma_buffer_V_we0;
reg[7:0] stream_elt_dma_buffer_V_d0;
reg[10:0] stream_elt_dma_buffer_V_address1;
reg stream_elt_dma_buffer_V_ce1;
reg stream_elt_dma_buffer_V_we1;
reg[7:0] stream_elt_dma_buffer_V_d1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] axi_bf_idx_reg_104;
wire   [9:0] add_ln39_fu_115_p2;
reg   [9:0] add_ln39_reg_215;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln39_fu_121_p2;
reg   [0:0] icmp_ln39_reg_220;
wire   [8:0] trunc_ln324_fu_127_p1;
reg   [8:0] trunc_ln324_reg_224;
wire   [10:0] shl_ln_fu_141_p3;
reg   [10:0] shl_ln_reg_234;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] p_Result_2_i_reg_240;
reg   [7:0] p_Result_3_i_reg_245;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [9:0] ap_phi_mux_axi_bf_idx_phi_fu_108_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln324_fu_131_p1;
wire   [31:0] zext_ln329_fu_148_p1;
wire    ap_block_pp0_stage1;
wire   [31:0] zext_ln329_1_fu_170_p1;
wire   [31:0] zext_ln329_2_fu_200_p1;
wire   [31:0] zext_ln329_3_fu_210_p1;
wire   [7:0] trunc_ln674_fu_136_p1;
wire   [10:0] or_ln329_fu_164_p2;
wire   [10:0] or_ln329_1_fu_195_p2;
wire   [10:0] or_ln329_2_fu_205_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        axi_bf_idx_reg_104 <= add_ln39_reg_215;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        axi_bf_idx_reg_104 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln39_reg_215 <= add_ln39_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln39_reg_220 <= icmp_ln39_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Result_2_i_reg_240 <= {{axi_elt_dma_buffer_V_q0[23:16]}};
        p_Result_3_i_reg_245 <= {{axi_elt_dma_buffer_V_q0[31:24]}};
        shl_ln_reg_234[10 : 2] <= shl_ln_fu_141_p3[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_121_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln324_reg_224 <= trunc_ln324_fu_127_p1;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_121_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln39_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_axi_bf_idx_phi_fu_108_p4 = add_ln39_reg_215;
    end else begin
        ap_phi_mux_axi_bf_idx_phi_fu_108_p4 = axi_bf_idx_reg_104;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_elt_dma_buffer_V_ce0 = 1'b1;
    end else begin
        axi_elt_dma_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        stream_elt_dma_buffer_V_address0 = zext_ln329_3_fu_210_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        stream_elt_dma_buffer_V_address0 = zext_ln329_1_fu_170_p1;
    end else begin
        stream_elt_dma_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        stream_elt_dma_buffer_V_address1 = zext_ln329_2_fu_200_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        stream_elt_dma_buffer_V_address1 = zext_ln329_fu_148_p1;
    end else begin
        stream_elt_dma_buffer_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        stream_elt_dma_buffer_V_ce0 = 1'b1;
    end else begin
        stream_elt_dma_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        stream_elt_dma_buffer_V_ce1 = 1'b1;
    end else begin
        stream_elt_dma_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        stream_elt_dma_buffer_V_d0 = p_Result_3_i_reg_245;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        stream_elt_dma_buffer_V_d0 = {{axi_elt_dma_buffer_V_q0[15:8]}};
    end else begin
        stream_elt_dma_buffer_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        stream_elt_dma_buffer_V_d1 = p_Result_2_i_reg_240;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        stream_elt_dma_buffer_V_d1 = trunc_ln674_fu_136_p1;
    end else begin
        stream_elt_dma_buffer_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln39_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln39_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        stream_elt_dma_buffer_V_we0 = 1'b1;
    end else begin
        stream_elt_dma_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln39_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln39_reg_220 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        stream_elt_dma_buffer_V_we1 = 1'b1;
    end else begin
        stream_elt_dma_buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln39_fu_121_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln39_fu_121_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln39_fu_115_p2 = (ap_phi_mux_axi_bf_idx_phi_fu_108_p4 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign axi_elt_dma_buffer_V_address0 = zext_ln324_fu_131_p1;

assign icmp_ln39_fu_121_p2 = ((ap_phi_mux_axi_bf_idx_phi_fu_108_p4 == 10'd512) ? 1'b1 : 1'b0);

assign or_ln329_1_fu_195_p2 = (shl_ln_reg_234 | 11'd2);

assign or_ln329_2_fu_205_p2 = (shl_ln_reg_234 | 11'd3);

assign or_ln329_fu_164_p2 = (shl_ln_fu_141_p3 | 11'd1);

assign shl_ln_fu_141_p3 = {{trunc_ln324_reg_224}, {2'd0}};

assign trunc_ln324_fu_127_p1 = ap_phi_mux_axi_bf_idx_phi_fu_108_p4[8:0];

assign trunc_ln674_fu_136_p1 = axi_elt_dma_buffer_V_q0[7:0];

assign zext_ln324_fu_131_p1 = trunc_ln324_fu_127_p1;

assign zext_ln329_1_fu_170_p1 = or_ln329_fu_164_p2;

assign zext_ln329_2_fu_200_p1 = or_ln329_1_fu_195_p2;

assign zext_ln329_3_fu_210_p1 = or_ln329_2_fu_205_p2;

assign zext_ln329_fu_148_p1 = shl_ln_fu_141_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_234[1:0] <= 2'b00;
end

endmodule //DataMoverUnit_mm2s_32bits_M2S_FormatLocalBuffer
