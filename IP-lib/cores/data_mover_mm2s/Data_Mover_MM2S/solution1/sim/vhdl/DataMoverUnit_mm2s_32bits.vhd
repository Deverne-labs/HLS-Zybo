-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DataMoverUnit_mm2s_32bits is
generic (
    C_M_AXI_MM_VIDEO_IN_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MM_VIDEO_IN_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_IN_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_IN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MM_VIDEO_IN_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_IN_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_IN_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_IN_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MM_VIDEO_IN_USER_VALUE : INTEGER := 0;
    C_M_AXI_MM_VIDEO_IN_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MM_VIDEO_IN_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_MM_video_in_AWVALID : OUT STD_LOGIC;
    m_axi_MM_video_in_AWREADY : IN STD_LOGIC;
    m_axi_MM_video_in_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_ADDR_WIDTH-1 downto 0);
    m_axi_MM_video_in_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_ID_WIDTH-1 downto 0);
    m_axi_MM_video_in_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MM_video_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_AWUSER_WIDTH-1 downto 0);
    m_axi_MM_video_in_WVALID : OUT STD_LOGIC;
    m_axi_MM_video_in_WREADY : IN STD_LOGIC;
    m_axi_MM_video_in_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_DATA_WIDTH-1 downto 0);
    m_axi_MM_video_in_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_DATA_WIDTH/8-1 downto 0);
    m_axi_MM_video_in_WLAST : OUT STD_LOGIC;
    m_axi_MM_video_in_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_ID_WIDTH-1 downto 0);
    m_axi_MM_video_in_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_WUSER_WIDTH-1 downto 0);
    m_axi_MM_video_in_ARVALID : OUT STD_LOGIC;
    m_axi_MM_video_in_ARREADY : IN STD_LOGIC;
    m_axi_MM_video_in_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_ADDR_WIDTH-1 downto 0);
    m_axi_MM_video_in_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_ID_WIDTH-1 downto 0);
    m_axi_MM_video_in_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_MM_video_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_ARUSER_WIDTH-1 downto 0);
    m_axi_MM_video_in_RVALID : IN STD_LOGIC;
    m_axi_MM_video_in_RREADY : OUT STD_LOGIC;
    m_axi_MM_video_in_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_DATA_WIDTH-1 downto 0);
    m_axi_MM_video_in_RLAST : IN STD_LOGIC;
    m_axi_MM_video_in_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_ID_WIDTH-1 downto 0);
    m_axi_MM_video_in_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_RUSER_WIDTH-1 downto 0);
    m_axi_MM_video_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_BVALID : IN STD_LOGIC;
    m_axi_MM_video_in_BREADY : OUT STD_LOGIC;
    m_axi_MM_video_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_ID_WIDTH-1 downto 0);
    m_axi_MM_video_in_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MM_VIDEO_IN_BUSER_WIDTH-1 downto 0);
    MM_video_in_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    STR_video_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    STR_video_out_TVALID : OUT STD_LOGIC;
    STR_video_out_TREADY : IN STD_LOGIC;
    STR_video_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    STR_video_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    STR_video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    STR_video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    image_w : IN STD_LOGIC_VECTOR (31 downto 0);
    image_h : IN STD_LOGIC_VECTOR (31 downto 0);
    mm2s_line_buffer_size : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of DataMoverUnit_mm2s_32bits is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DataMoverUnit_mm2s_32bits_DataMoverUnit_mm2s_32bits,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu5ev-sfvc784-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=1847,HLS_SYN_LUT=1884,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_800 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal MM_video_in_AWREADY : STD_LOGIC;
    signal MM_video_in_WREADY : STD_LOGIC;
    signal MM_video_in_ARVALID : STD_LOGIC;
    signal MM_video_in_ARREADY : STD_LOGIC;
    signal MM_video_in_RVALID : STD_LOGIC;
    signal MM_video_in_RREADY : STD_LOGIC;
    signal MM_video_in_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal MM_video_in_RLAST : STD_LOGIC;
    signal MM_video_in_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal MM_video_in_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MM_video_in_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MM_video_in_BVALID : STD_LOGIC;
    signal MM_video_in_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal MM_video_in_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal MM_video_in_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWVALID : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WVALID : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WLAST : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARVALID : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_RREADY : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_BREADY : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TKEEP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TVALID : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TREADY : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_ap_start : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_ap_done : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_ap_ready : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_ap_idle : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_ap_continue : STD_LOGIC;
    signal grp_DataMover_mm2s_32bits_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_DataMover_mm2s_32bits_fu_96_ap_ready : STD_LOGIC;
    signal ap_sync_grp_DataMover_mm2s_32bits_fu_96_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_done : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal regslice_both_STR_video_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal STR_video_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_STR_video_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STR_video_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_STR_video_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_STR_video_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STR_video_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_STR_video_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_STR_video_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STR_video_out_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_STR_video_out_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_STR_video_out_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_STR_video_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_STR_video_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_STR_video_out_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component DataMoverUnit_mm2s_32bits_DataMover_mm2s_32bits IS
    port (
        m_axi_MM_video_in_AWVALID : OUT STD_LOGIC;
        m_axi_MM_video_in_AWREADY : IN STD_LOGIC;
        m_axi_MM_video_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_MM_video_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_MM_video_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_in_WVALID : OUT STD_LOGIC;
        m_axi_MM_video_in_WREADY : IN STD_LOGIC;
        m_axi_MM_video_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_in_WLAST : OUT STD_LOGIC;
        m_axi_MM_video_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_in_ARVALID : OUT STD_LOGIC;
        m_axi_MM_video_in_ARREADY : IN STD_LOGIC;
        m_axi_MM_video_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_MM_video_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_MM_video_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_in_RVALID : IN STD_LOGIC;
        m_axi_MM_video_in_RREADY : OUT STD_LOGIC;
        m_axi_MM_video_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_in_RLAST : IN STD_LOGIC;
        m_axi_MM_video_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_in_BVALID : IN STD_LOGIC;
        m_axi_MM_video_in_BREADY : OUT STD_LOGIC;
        m_axi_MM_video_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        MM_video_in_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        STR_video_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        STR_video_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
        STR_video_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        STR_video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        STR_video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        image_w : IN STD_LOGIC_VECTOR (31 downto 0);
        image_h : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        MM_video_in_2_ap_vld : IN STD_LOGIC;
        image_w_ap_vld : IN STD_LOGIC;
        STR_video_out_TVALID : OUT STD_LOGIC;
        STR_video_out_TREADY : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component DataMoverUnit_mm2s_32bits_MM_video_in_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DataMoverUnit_mm2s_32bits_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    MM_video_in_m_axi_U : component DataMoverUnit_mm2s_32bits_MM_video_in_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 64,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MM_VIDEO_IN_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MM_VIDEO_IN_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MM_VIDEO_IN_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MM_VIDEO_IN_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MM_VIDEO_IN_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MM_VIDEO_IN_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MM_VIDEO_IN_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MM_VIDEO_IN_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MM_VIDEO_IN_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MM_VIDEO_IN_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MM_VIDEO_IN_CACHE_VALUE)
    port map (
        AWVALID => m_axi_MM_video_in_AWVALID,
        AWREADY => m_axi_MM_video_in_AWREADY,
        AWADDR => m_axi_MM_video_in_AWADDR,
        AWID => m_axi_MM_video_in_AWID,
        AWLEN => m_axi_MM_video_in_AWLEN,
        AWSIZE => m_axi_MM_video_in_AWSIZE,
        AWBURST => m_axi_MM_video_in_AWBURST,
        AWLOCK => m_axi_MM_video_in_AWLOCK,
        AWCACHE => m_axi_MM_video_in_AWCACHE,
        AWPROT => m_axi_MM_video_in_AWPROT,
        AWQOS => m_axi_MM_video_in_AWQOS,
        AWREGION => m_axi_MM_video_in_AWREGION,
        AWUSER => m_axi_MM_video_in_AWUSER,
        WVALID => m_axi_MM_video_in_WVALID,
        WREADY => m_axi_MM_video_in_WREADY,
        WDATA => m_axi_MM_video_in_WDATA,
        WSTRB => m_axi_MM_video_in_WSTRB,
        WLAST => m_axi_MM_video_in_WLAST,
        WID => m_axi_MM_video_in_WID,
        WUSER => m_axi_MM_video_in_WUSER,
        ARVALID => m_axi_MM_video_in_ARVALID,
        ARREADY => m_axi_MM_video_in_ARREADY,
        ARADDR => m_axi_MM_video_in_ARADDR,
        ARID => m_axi_MM_video_in_ARID,
        ARLEN => m_axi_MM_video_in_ARLEN,
        ARSIZE => m_axi_MM_video_in_ARSIZE,
        ARBURST => m_axi_MM_video_in_ARBURST,
        ARLOCK => m_axi_MM_video_in_ARLOCK,
        ARCACHE => m_axi_MM_video_in_ARCACHE,
        ARPROT => m_axi_MM_video_in_ARPROT,
        ARQOS => m_axi_MM_video_in_ARQOS,
        ARREGION => m_axi_MM_video_in_ARREGION,
        ARUSER => m_axi_MM_video_in_ARUSER,
        RVALID => m_axi_MM_video_in_RVALID,
        RREADY => m_axi_MM_video_in_RREADY,
        RDATA => m_axi_MM_video_in_RDATA,
        RLAST => m_axi_MM_video_in_RLAST,
        RID => m_axi_MM_video_in_RID,
        RUSER => m_axi_MM_video_in_RUSER,
        RRESP => m_axi_MM_video_in_RRESP,
        BVALID => m_axi_MM_video_in_BVALID,
        BREADY => m_axi_MM_video_in_BREADY,
        BRESP => m_axi_MM_video_in_BRESP,
        BID => m_axi_MM_video_in_BID,
        BUSER => m_axi_MM_video_in_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => MM_video_in_ARVALID,
        I_ARREADY => MM_video_in_ARREADY,
        I_ARADDR => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARADDR,
        I_ARID => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARID,
        I_ARLEN => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARLEN,
        I_ARSIZE => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARSIZE,
        I_ARLOCK => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARLOCK,
        I_ARCACHE => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARCACHE,
        I_ARQOS => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARQOS,
        I_ARPROT => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARPROT,
        I_ARUSER => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARUSER,
        I_ARBURST => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARBURST,
        I_ARREGION => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARREGION,
        I_RVALID => MM_video_in_RVALID,
        I_RREADY => MM_video_in_RREADY,
        I_RDATA => MM_video_in_RDATA,
        I_RID => MM_video_in_RID,
        I_RUSER => MM_video_in_RUSER,
        I_RRESP => MM_video_in_RRESP,
        I_RLAST => MM_video_in_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => MM_video_in_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => MM_video_in_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => MM_video_in_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => MM_video_in_BRESP,
        I_BID => MM_video_in_BID,
        I_BUSER => MM_video_in_BUSER);

    grp_DataMover_mm2s_32bits_fu_96 : component DataMoverUnit_mm2s_32bits_DataMover_mm2s_32bits
    port map (
        m_axi_MM_video_in_AWVALID => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWVALID,
        m_axi_MM_video_in_AWREADY => ap_const_logic_0,
        m_axi_MM_video_in_AWADDR => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWADDR,
        m_axi_MM_video_in_AWID => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWID,
        m_axi_MM_video_in_AWLEN => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWLEN,
        m_axi_MM_video_in_AWSIZE => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWSIZE,
        m_axi_MM_video_in_AWBURST => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWBURST,
        m_axi_MM_video_in_AWLOCK => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWLOCK,
        m_axi_MM_video_in_AWCACHE => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWCACHE,
        m_axi_MM_video_in_AWPROT => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWPROT,
        m_axi_MM_video_in_AWQOS => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWQOS,
        m_axi_MM_video_in_AWREGION => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWREGION,
        m_axi_MM_video_in_AWUSER => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_AWUSER,
        m_axi_MM_video_in_WVALID => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WVALID,
        m_axi_MM_video_in_WREADY => ap_const_logic_0,
        m_axi_MM_video_in_WDATA => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WDATA,
        m_axi_MM_video_in_WSTRB => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WSTRB,
        m_axi_MM_video_in_WLAST => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WLAST,
        m_axi_MM_video_in_WID => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WID,
        m_axi_MM_video_in_WUSER => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_WUSER,
        m_axi_MM_video_in_ARVALID => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARVALID,
        m_axi_MM_video_in_ARREADY => MM_video_in_ARREADY,
        m_axi_MM_video_in_ARADDR => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARADDR,
        m_axi_MM_video_in_ARID => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARID,
        m_axi_MM_video_in_ARLEN => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARLEN,
        m_axi_MM_video_in_ARSIZE => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARSIZE,
        m_axi_MM_video_in_ARBURST => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARBURST,
        m_axi_MM_video_in_ARLOCK => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARLOCK,
        m_axi_MM_video_in_ARCACHE => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARCACHE,
        m_axi_MM_video_in_ARPROT => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARPROT,
        m_axi_MM_video_in_ARQOS => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARQOS,
        m_axi_MM_video_in_ARREGION => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARREGION,
        m_axi_MM_video_in_ARUSER => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARUSER,
        m_axi_MM_video_in_RVALID => MM_video_in_RVALID,
        m_axi_MM_video_in_RREADY => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_RREADY,
        m_axi_MM_video_in_RDATA => MM_video_in_RDATA,
        m_axi_MM_video_in_RLAST => MM_video_in_RLAST,
        m_axi_MM_video_in_RID => MM_video_in_RID,
        m_axi_MM_video_in_RUSER => MM_video_in_RUSER,
        m_axi_MM_video_in_RRESP => MM_video_in_RRESP,
        m_axi_MM_video_in_BVALID => ap_const_logic_0,
        m_axi_MM_video_in_BREADY => grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_BREADY,
        m_axi_MM_video_in_BRESP => ap_const_lv2_0,
        m_axi_MM_video_in_BID => ap_const_lv1_0,
        m_axi_MM_video_in_BUSER => ap_const_lv1_0,
        MM_video_in_2 => MM_video_in_offset,
        STR_video_out_TDATA => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TDATA,
        STR_video_out_TKEEP => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TKEEP,
        STR_video_out_TSTRB => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TSTRB,
        STR_video_out_TUSER => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TUSER,
        STR_video_out_TLAST => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TLAST,
        image_w => image_w,
        image_h => image_h,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        MM_video_in_2_ap_vld => ap_const_logic_1,
        image_w_ap_vld => ap_const_logic_1,
        STR_video_out_TVALID => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TVALID,
        STR_video_out_TREADY => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TREADY,
        ap_start => grp_DataMover_mm2s_32bits_fu_96_ap_start,
        ap_done => grp_DataMover_mm2s_32bits_fu_96_ap_done,
        ap_ready => grp_DataMover_mm2s_32bits_fu_96_ap_ready,
        ap_idle => grp_DataMover_mm2s_32bits_fu_96_ap_idle,
        ap_continue => grp_DataMover_mm2s_32bits_fu_96_ap_continue);

    regslice_both_STR_video_out_V_data_V_U : component DataMoverUnit_mm2s_32bits_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TDATA,
        vld_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TVALID,
        ack_in => STR_video_out_TREADY_int_regslice,
        data_out => STR_video_out_TDATA,
        vld_out => regslice_both_STR_video_out_V_data_V_U_vld_out,
        ack_out => STR_video_out_TREADY,
        apdone_blk => regslice_both_STR_video_out_V_data_V_U_apdone_blk);

    regslice_both_STR_video_out_V_keep_V_U : component DataMoverUnit_mm2s_32bits_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TKEEP,
        vld_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TVALID,
        ack_in => regslice_both_STR_video_out_V_keep_V_U_ack_in_dummy,
        data_out => STR_video_out_TKEEP,
        vld_out => regslice_both_STR_video_out_V_keep_V_U_vld_out,
        ack_out => STR_video_out_TREADY,
        apdone_blk => regslice_both_STR_video_out_V_keep_V_U_apdone_blk);

    regslice_both_STR_video_out_V_strb_V_U : component DataMoverUnit_mm2s_32bits_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TSTRB,
        vld_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TVALID,
        ack_in => regslice_both_STR_video_out_V_strb_V_U_ack_in_dummy,
        data_out => STR_video_out_TSTRB,
        vld_out => regslice_both_STR_video_out_V_strb_V_U_vld_out,
        ack_out => STR_video_out_TREADY,
        apdone_blk => regslice_both_STR_video_out_V_strb_V_U_apdone_blk);

    regslice_both_STR_video_out_V_user_V_U : component DataMoverUnit_mm2s_32bits_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TUSER,
        vld_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TVALID,
        ack_in => regslice_both_STR_video_out_V_user_V_U_ack_in_dummy,
        data_out => STR_video_out_TUSER,
        vld_out => regslice_both_STR_video_out_V_user_V_U_vld_out,
        ack_out => STR_video_out_TREADY,
        apdone_blk => regslice_both_STR_video_out_V_user_V_U_apdone_blk);

    regslice_both_STR_video_out_V_last_V_U : component DataMoverUnit_mm2s_32bits_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TLAST,
        vld_in => grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TVALID,
        ack_in => regslice_both_STR_video_out_V_last_V_U_ack_in_dummy,
        data_out => STR_video_out_TLAST,
        vld_out => regslice_both_STR_video_out_V_last_V_U_vld_out,
        ack_out => STR_video_out_TREADY,
        apdone_blk => regslice_both_STR_video_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_done <= ap_const_logic_0;
                elsif ((grp_DataMover_mm2s_32bits_fu_96_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_ready <= ap_const_logic_0;
                elsif ((grp_DataMover_mm2s_32bits_fu_96_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_DataMover_mm2s_32bits_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_DataMover_mm2s_32bits_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_DataMover_mm2s_32bits_fu_96_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_DataMover_mm2s_32bits_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_DataMover_mm2s_32bits_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_DataMover_mm2s_32bits_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state3, regslice_both_STR_video_out_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((regslice_both_STR_video_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    MM_video_in_ARVALID_assign_proc : process(ap_CS_fsm_state1, grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARVALID, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MM_video_in_ARVALID <= grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_ARVALID;
        else 
            MM_video_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    MM_video_in_RREADY_assign_proc : process(ap_CS_fsm_state1, grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_RREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MM_video_in_RREADY <= grp_DataMover_mm2s_32bits_fu_96_m_axi_MM_video_in_RREADY;
        else 
            MM_video_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    STR_video_out_TVALID <= regslice_both_STR_video_out_V_data_V_U_vld_out;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_DataMover_mm2s_32bits_fu_96_ap_ready, ap_sync_grp_DataMover_mm2s_32bits_fu_96_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_DataMover_mm2s_32bits_fu_96_ap_ready and ap_sync_grp_DataMover_mm2s_32bits_fu_96_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, regslice_both_STR_video_out_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_STR_video_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, regslice_both_STR_video_out_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_STR_video_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_DataMover_mm2s_32bits_fu_96_ap_done <= (grp_DataMover_mm2s_32bits_fu_96_ap_done or ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_done);
    ap_sync_grp_DataMover_mm2s_32bits_fu_96_ap_ready <= (grp_DataMover_mm2s_32bits_fu_96_ap_ready or ap_sync_reg_grp_DataMover_mm2s_32bits_fu_96_ap_ready);
    grp_DataMover_mm2s_32bits_fu_96_STR_video_out_TREADY <= (ap_CS_fsm_state2 and STR_video_out_TREADY_int_regslice);

    grp_DataMover_mm2s_32bits_fu_96_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_DataMover_mm2s_32bits_fu_96_ap_continue <= ap_const_logic_1;
        else 
            grp_DataMover_mm2s_32bits_fu_96_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_DataMover_mm2s_32bits_fu_96_ap_start <= grp_DataMover_mm2s_32bits_fu_96_ap_start_reg;
    mm2s_line_buffer_size <= ap_const_lv16_800;
end behav;
