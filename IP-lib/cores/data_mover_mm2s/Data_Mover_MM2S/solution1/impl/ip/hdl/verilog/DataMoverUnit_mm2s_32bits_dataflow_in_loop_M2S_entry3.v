// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DataMoverUnit_mm2s_32bits_dataflow_in_loop_M2S_entry3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        MM_video_in_2,
        image_w,
        i,
        MM_video_in_2_out_din,
        MM_video_in_2_out_full_n,
        MM_video_in_2_out_write,
        image_w_out_din,
        image_w_out_full_n,
        image_w_out_write,
        i_out_din,
        i_out_full_n,
        i_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] MM_video_in_2;
input  [31:0] image_w;
input  [30:0] i;
output  [31:0] MM_video_in_2_out_din;
input   MM_video_in_2_out_full_n;
output   MM_video_in_2_out_write;
output  [31:0] image_w_out_din;
input   image_w_out_full_n;
output   image_w_out_write;
output  [30:0] i_out_din;
input   i_out_full_n;
output   i_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg MM_video_in_2_out_write;
reg image_w_out_write;
reg i_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    MM_video_in_2_out_blk_n;
reg    image_w_out_blk_n;
reg    i_out_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (i_out_full_n == 1'b0) | (image_w_out_full_n == 1'b0) | (1'b0 == MM_video_in_2_out_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        MM_video_in_2_out_blk_n = MM_video_in_2_out_full_n;
    end else begin
        MM_video_in_2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (i_out_full_n == 1'b0) | (image_w_out_full_n == 1'b0) | (1'b0 == MM_video_in_2_out_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        MM_video_in_2_out_write = 1'b1;
    end else begin
        MM_video_in_2_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (i_out_full_n == 1'b0) | (image_w_out_full_n == 1'b0) | (1'b0 == MM_video_in_2_out_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (i_out_full_n == 1'b0) | (image_w_out_full_n == 1'b0) | (1'b0 == MM_video_in_2_out_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_out_blk_n = i_out_full_n;
    end else begin
        i_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (i_out_full_n == 1'b0) | (image_w_out_full_n == 1'b0) | (1'b0 == MM_video_in_2_out_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_out_write = 1'b1;
    end else begin
        i_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        image_w_out_blk_n = image_w_out_full_n;
    end else begin
        image_w_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (i_out_full_n == 1'b0) | (image_w_out_full_n == 1'b0) | (1'b0 == MM_video_in_2_out_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        image_w_out_write = 1'b1;
    end else begin
        image_w_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MM_video_in_2_out_din = MM_video_in_2;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (i_out_full_n == 1'b0) | (image_w_out_full_n == 1'b0) | (1'b0 == MM_video_in_2_out_full_n) | (ap_done_reg == 1'b1));
end

assign i_out_din = i;

assign image_w_out_din = image_w;

endmodule //DataMoverUnit_mm2s_32bits_dataflow_in_loop_M2S_entry3
