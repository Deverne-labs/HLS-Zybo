-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DataMoverUnit_mm2s_32bits_EmptyLocalBuffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    STR_video_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    STR_video_out_TVALID : OUT STD_LOGIC;
    STR_video_out_TREADY : IN STD_LOGIC;
    STR_video_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    STR_video_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    STR_video_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    STR_video_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    image_w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    image_w_empty_n : IN STD_LOGIC;
    image_w_read : OUT STD_LOGIC;
    i_dout : IN STD_LOGIC_VECTOR (30 downto 0);
    i_empty_n : IN STD_LOGIC;
    i_read : OUT STD_LOGIC;
    stream_elt_dma_buffer_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    stream_elt_dma_buffer_V_ce0 : OUT STD_LOGIC;
    stream_elt_dma_buffer_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of DataMoverUnit_mm2s_32bits_EmptyLocalBuffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal STR_video_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln27_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal image_w_blk_n : STD_LOGIC;
    signal i_blk_n : STD_LOGIC;
    signal bf_idx_reg_103 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_w_read_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_i_i_i_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_i_i_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_fu_126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln27_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_191 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal zext_ln324_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln324_fu_137_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln32_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bf_idx_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_132_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                bf_idx_reg_103 <= add_ln27_fu_126_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                bf_idx_reg_103 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_132_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln32_reg_191 <= and_ln32_fu_152_p2;
                icmp_ln33_reg_196 <= icmp_ln33_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln22_reg_167 <= icmp_ln22_fu_114_p2;
                image_w_read_reg_162 <= image_w_dout;
                sub_i_i_i_reg_172 <= sub_i_i_i_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln27_reg_182 <= icmp_ln27_fu_132_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, image_w_empty_n, i_empty_n, ap_enable_reg_pp0_iter0, icmp_ln27_fu_132_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln27_fu_132_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln27_fu_132_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    STR_video_out_TDATA <= stream_elt_dma_buffer_V_q0;

    STR_video_out_TDATA_blk_n_assign_proc : process(STR_video_out_TREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln27_reg_182)
    begin
        if (((icmp_ln27_reg_182 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            STR_video_out_TDATA_blk_n <= STR_video_out_TREADY;
        else 
            STR_video_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    STR_video_out_TKEEP <= ap_const_lv1_0;
    STR_video_out_TLAST <= icmp_ln33_reg_196;
    STR_video_out_TSTRB <= ap_const_lv1_0;
    STR_video_out_TUSER <= and_ln32_reg_191;

    STR_video_out_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln27_reg_182, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln27_reg_182 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            STR_video_out_TVALID <= ap_const_logic_1;
        else 
            STR_video_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    add_ln27_fu_126_p2 <= std_logic_vector(unsigned(bf_idx_reg_103) + unsigned(ap_const_lv32_1));
    and_ln32_fu_152_p2 <= (icmp_ln32_fu_146_p2 and icmp_ln22_reg_167);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(STR_video_out_TREADY, ap_enable_reg_pp0_iter1, icmp_ln27_reg_182)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln27_reg_182 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_0 = STR_video_out_TREADY));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(STR_video_out_TREADY, ap_enable_reg_pp0_iter1, icmp_ln27_reg_182, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln27_reg_182 = ap_const_lv1_0) and (ap_const_logic_0 = STR_video_out_TREADY))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(STR_video_out_TREADY, ap_enable_reg_pp0_iter1, icmp_ln27_reg_182, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or ((icmp_ln27_reg_182 = ap_const_lv1_0) and (ap_const_logic_0 = STR_video_out_TREADY))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, image_w_empty_n, i_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(STR_video_out_TREADY, icmp_ln27_reg_182)
    begin
                ap_block_state3_io <= ((icmp_ln27_reg_182 = ap_const_lv1_0) and (ap_const_logic_0 = STR_video_out_TREADY));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(STR_video_out_TREADY, icmp_ln27_reg_182)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln27_reg_182 = ap_const_lv1_0) and (ap_const_logic_0 = STR_video_out_TREADY));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln27_fu_132_p2)
    begin
        if ((icmp_ln27_fu_132_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_blk_n <= i_empty_n;
        else 
            i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_w_empty_n, i_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_read <= ap_const_logic_1;
        else 
            i_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln22_fu_114_p2 <= "1" when (i_dout = ap_const_lv31_0) else "0";
    icmp_ln27_fu_132_p2 <= "1" when (bf_idx_reg_103 = image_w_read_reg_162) else "0";
    icmp_ln32_fu_146_p2 <= "1" when (bf_idx_reg_103 = ap_const_lv32_0) else "0";
    icmp_ln33_fu_157_p2 <= "1" when (bf_idx_reg_103 = sub_i_i_i_reg_172) else "0";

    image_w_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_w_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_w_blk_n <= image_w_empty_n;
        else 
            image_w_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    image_w_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_w_empty_n, i_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_w_read <= ap_const_logic_1;
        else 
            image_w_read <= ap_const_logic_0;
        end if; 
    end process;

    stream_elt_dma_buffer_V_address0 <= zext_ln324_fu_141_p1(11 - 1 downto 0);

    stream_elt_dma_buffer_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_elt_dma_buffer_V_ce0 <= ap_const_logic_1;
        else 
            stream_elt_dma_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_i_i_i_fu_120_p2 <= std_logic_vector(unsigned(image_w_dout) + unsigned(ap_const_lv32_FFFFFFFF));
    trunc_ln324_fu_137_p1 <= bf_idx_reg_103(11 - 1 downto 0);
    zext_ln324_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln324_fu_137_p1),32));
end behav;
