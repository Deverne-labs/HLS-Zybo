-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DataMoverUnit_mm2s_32bits_DMAReadMM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_MM_video_in_AWVALID : OUT STD_LOGIC;
    m_axi_MM_video_in_AWREADY : IN STD_LOGIC;
    m_axi_MM_video_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_in_WVALID : OUT STD_LOGIC;
    m_axi_MM_video_in_WREADY : IN STD_LOGIC;
    m_axi_MM_video_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_WLAST : OUT STD_LOGIC;
    m_axi_MM_video_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_in_ARVALID : OUT STD_LOGIC;
    m_axi_MM_video_in_ARREADY : IN STD_LOGIC;
    m_axi_MM_video_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_in_RVALID : IN STD_LOGIC;
    m_axi_MM_video_in_RREADY : OUT STD_LOGIC;
    m_axi_MM_video_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_in_RLAST : IN STD_LOGIC;
    m_axi_MM_video_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_BVALID : IN STD_LOGIC;
    m_axi_MM_video_in_BREADY : OUT STD_LOGIC;
    m_axi_MM_video_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    MM_video_in_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    MM_video_in_2_empty_n : IN STD_LOGIC;
    MM_video_in_2_read : OUT STD_LOGIC;
    image_w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    image_w_empty_n : IN STD_LOGIC;
    image_w_read : OUT STD_LOGIC;
    i_dout : IN STD_LOGIC_VECTOR (30 downto 0);
    i_empty_n : IN STD_LOGIC;
    i_read : OUT STD_LOGIC;
    axi_elt_dma_buffer_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    axi_elt_dma_buffer_V_ce0 : OUT STD_LOGIC;
    axi_elt_dma_buffer_V_we0 : OUT STD_LOGIC;
    axi_elt_dma_buffer_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_w_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    image_w_out_full_n : IN STD_LOGIC;
    image_w_out_write : OUT STD_LOGIC;
    i_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
    i_out_full_n : IN STD_LOGIC;
    i_out_write : OUT STD_LOGIC );
end;


architecture behav of DataMoverUnit_mm2s_32bits_DMAReadMM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal MM_video_in_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal MM_video_in_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln54_1_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal MM_video_in_2_blk_n : STD_LOGIC;
    signal image_w_blk_n : STD_LOGIC;
    signal i_blk_n : STD_LOGIC;
    signal image_w_out_blk_n : STD_LOGIC;
    signal i_out_blk_n : STD_LOGIC;
    signal bf_idx_reg_136 : STD_LOGIC_VECTOR (28 downto 0);
    signal MM_video_in_2_read_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln53_1_i_reg_289 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln53_2_i_reg_294 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_fu_181_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal empty_reg_299 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln54_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln53_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln53_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_33_fu_231_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal empty_33_reg_313 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln1_i_reg_318 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln54_fu_260_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln54_1_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_1_reg_334_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln57_fu_271_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln57_reg_338 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln57_reg_338_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal MM_video_in_addr_read_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln57_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln54_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sub_ln53_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_185_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln53_fu_201_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln53_1_fu_204_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln53_1_fu_210_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal burst_size_fu_213_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_i_i_i_i_fu_224_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_34_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    bf_idx_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                bf_idx_reg_136 <= ap_const_lv29_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                bf_idx_reg_136 <= add_ln54_fu_260_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                MM_video_in_2_read_reg_279 <= MM_video_in_2_dout;
                empty_reg_299 <= empty_fu_181_p1;
                icmp_ln54_reg_304 <= icmp_ln54_fu_195_p2;
                tmp_reg_284 <= image_w_dout(31 downto 31);
                trunc_ln53_1_i_reg_289 <= sub_ln53_fu_155_p2(31 downto 2);
                trunc_ln53_2_i_reg_294 <= image_w_dout(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_reg_334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                MM_video_in_addr_read_reg_343 <= m_axi_MM_video_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln54_reg_304 = ap_const_lv1_1))) then
                empty_33_reg_313 <= empty_33_fu_231_p1;
                trunc_ln1_i_reg_318 <= empty_34_fu_235_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln54_1_reg_334 <= icmp_ln54_1_fu_266_p2;
                icmp_ln54_1_reg_334_pp0_iter1_reg <= icmp_ln54_1_reg_334;
                trunc_ln57_reg_338_pp0_iter1_reg <= trunc_ln57_reg_338;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sext_ln53_reg_308 <= sext_ln53_fu_220_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_fu_266_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln57_reg_338 <= trunc_ln57_fu_271_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_MM_video_in_ARREADY, MM_video_in_2_empty_n, image_w_empty_n, i_empty_n, image_w_out_full_n, i_out_full_n, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, icmp_ln54_reg_304, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln54_1_fu_266_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_const_logic_0 = MM_video_in_2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (i_out_full_n = ap_const_logic_0) or (image_w_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln54_reg_304 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_MM_video_in_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln54_1_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln54_1_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    MM_video_in_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, MM_video_in_2_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MM_video_in_2_blk_n <= MM_video_in_2_empty_n;
        else 
            MM_video_in_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    MM_video_in_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, MM_video_in_2_empty_n, image_w_empty_n, i_empty_n, image_w_out_full_n, i_out_full_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_const_logic_0 = MM_video_in_2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (i_out_full_n = ap_const_logic_0) or (image_w_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            MM_video_in_2_read <= ap_const_logic_1;
        else 
            MM_video_in_2_read <= ap_const_logic_0;
        end if; 
    end process;


    MM_video_in_blk_n_AR_assign_proc : process(m_axi_MM_video_in_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            MM_video_in_blk_n_AR <= m_axi_MM_video_in_ARREADY;
        else 
            MM_video_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    MM_video_in_blk_n_R_assign_proc : process(m_axi_MM_video_in_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln54_1_reg_334)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_reg_334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            MM_video_in_blk_n_R <= m_axi_MM_video_in_RVALID;
        else 
            MM_video_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln54_fu_260_p2 <= std_logic_vector(unsigned(bf_idx_reg_136) + unsigned(ap_const_lv29_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_MM_video_in_RVALID, ap_enable_reg_pp0_iter1, icmp_ln54_1_reg_334)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_MM_video_in_RVALID = ap_const_logic_0) and (icmp_ln54_1_reg_334 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_MM_video_in_RVALID, ap_enable_reg_pp0_iter1, icmp_ln54_1_reg_334)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_MM_video_in_RVALID = ap_const_logic_0) and (icmp_ln54_1_reg_334 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, MM_video_in_2_empty_n, image_w_empty_n, i_empty_n, image_w_out_full_n, i_out_full_n)
    begin
                ap_block_state1 <= ((i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_const_logic_0 = MM_video_in_2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (i_out_full_n = ap_const_logic_0) or (image_w_out_full_n = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(m_axi_MM_video_in_RVALID, icmp_ln54_1_reg_334)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((m_axi_MM_video_in_RVALID = ap_const_logic_0) and (icmp_ln54_1_reg_334 = ap_const_lv1_0));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln54_1_fu_266_p2)
    begin
        if ((icmp_ln54_1_fu_266_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    axi_elt_dma_buffer_V_address0 <= zext_ln57_fu_275_p1(9 - 1 downto 0);

    axi_elt_dma_buffer_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            axi_elt_dma_buffer_V_ce0 <= ap_const_logic_1;
        else 
            axi_elt_dma_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    axi_elt_dma_buffer_V_d0 <= MM_video_in_addr_read_reg_343;

    axi_elt_dma_buffer_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln54_1_reg_334_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln54_1_reg_334_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            axi_elt_dma_buffer_V_we0 <= ap_const_logic_1;
        else 
            axi_elt_dma_buffer_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    burst_size_fu_213_p3 <= 
        sub_ln53_1_fu_204_p2 when (tmp_reg_284(0) = '1') else 
        zext_ln53_1_fu_210_p1;
    empty_33_fu_231_p1 <= burst_size_fu_213_p3(29 - 1 downto 0);
    empty_34_fu_235_p2 <= std_logic_vector(unsigned(mul_i_i_i_i_fu_224_p3) + unsigned(MM_video_in_2_read_reg_279));
    empty_fu_181_p1 <= i_dout(21 - 1 downto 0);

    i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_blk_n <= i_empty_n;
        else 
            i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_out_blk_n <= i_out_full_n;
        else 
            i_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    i_out_din <= i_dout;

    i_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, MM_video_in_2_empty_n, image_w_empty_n, i_empty_n, image_w_out_full_n, i_out_full_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_const_logic_0 = MM_video_in_2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (i_out_full_n = ap_const_logic_0) or (image_w_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_out_write <= ap_const_logic_1;
        else 
            i_out_write <= ap_const_logic_0;
        end if; 
    end process;


    i_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, MM_video_in_2_empty_n, image_w_empty_n, i_empty_n, image_w_out_full_n, i_out_full_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_const_logic_0 = MM_video_in_2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (i_out_full_n = ap_const_logic_0) or (image_w_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_read <= ap_const_logic_1;
        else 
            i_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln54_1_fu_266_p2 <= "1" when (bf_idx_reg_136 = empty_33_reg_313) else "0";
    icmp_ln54_fu_195_p2 <= "1" when (signed(tmp_1_fu_185_p4) > signed(ap_const_lv30_0)) else "0";

    image_w_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_w_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_w_blk_n <= image_w_empty_n;
        else 
            image_w_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    image_w_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_w_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_w_out_blk_n <= image_w_out_full_n;
        else 
            image_w_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    image_w_out_din <= image_w_dout;

    image_w_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, MM_video_in_2_empty_n, image_w_empty_n, i_empty_n, image_w_out_full_n, i_out_full_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_const_logic_0 = MM_video_in_2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (i_out_full_n = ap_const_logic_0) or (image_w_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_w_out_write <= ap_const_logic_1;
        else 
            image_w_out_write <= ap_const_logic_0;
        end if; 
    end process;


    image_w_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, MM_video_in_2_empty_n, image_w_empty_n, i_empty_n, image_w_out_full_n, i_out_full_n)
    begin
        if ((not(((i_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (ap_const_logic_0 = MM_video_in_2_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (i_out_full_n = ap_const_logic_0) or (image_w_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_w_read <= ap_const_logic_1;
        else 
            image_w_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_MM_video_in_ARADDR <= sext_ln54_fu_250_p1;
    m_axi_MM_video_in_ARBURST <= ap_const_lv2_0;
    m_axi_MM_video_in_ARCACHE <= ap_const_lv4_0;
    m_axi_MM_video_in_ARID <= ap_const_lv1_0;
    m_axi_MM_video_in_ARLEN <= sext_ln53_reg_308;
    m_axi_MM_video_in_ARLOCK <= ap_const_lv2_0;
    m_axi_MM_video_in_ARPROT <= ap_const_lv3_0;
    m_axi_MM_video_in_ARQOS <= ap_const_lv4_0;
    m_axi_MM_video_in_ARREGION <= ap_const_lv4_0;
    m_axi_MM_video_in_ARSIZE <= ap_const_lv3_0;
    m_axi_MM_video_in_ARUSER <= ap_const_lv1_0;

    m_axi_MM_video_in_ARVALID_assign_proc : process(m_axi_MM_video_in_ARREADY, ap_CS_fsm_state3)
    begin
        if (((m_axi_MM_video_in_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_MM_video_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_MM_video_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_MM_video_in_AWADDR <= ap_const_lv32_0;
    m_axi_MM_video_in_AWBURST <= ap_const_lv2_0;
    m_axi_MM_video_in_AWCACHE <= ap_const_lv4_0;
    m_axi_MM_video_in_AWID <= ap_const_lv1_0;
    m_axi_MM_video_in_AWLEN <= ap_const_lv32_0;
    m_axi_MM_video_in_AWLOCK <= ap_const_lv2_0;
    m_axi_MM_video_in_AWPROT <= ap_const_lv3_0;
    m_axi_MM_video_in_AWQOS <= ap_const_lv4_0;
    m_axi_MM_video_in_AWREGION <= ap_const_lv4_0;
    m_axi_MM_video_in_AWSIZE <= ap_const_lv3_0;
    m_axi_MM_video_in_AWUSER <= ap_const_lv1_0;
    m_axi_MM_video_in_AWVALID <= ap_const_logic_0;
    m_axi_MM_video_in_BREADY <= ap_const_logic_0;

    m_axi_MM_video_in_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln54_1_reg_334, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_1_reg_334 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            m_axi_MM_video_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_MM_video_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_MM_video_in_WDATA <= ap_const_lv32_0;
    m_axi_MM_video_in_WID <= ap_const_lv1_0;
    m_axi_MM_video_in_WLAST <= ap_const_logic_0;
    m_axi_MM_video_in_WSTRB <= ap_const_lv4_0;
    m_axi_MM_video_in_WUSER <= ap_const_lv1_0;
    m_axi_MM_video_in_WVALID <= ap_const_logic_0;
    mul_i_i_i_i_fu_224_p3 <= (empty_reg_299 & ap_const_lv11_0);
        sext_ln53_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(burst_size_fu_213_p3),32));

        sext_ln54_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_i_reg_318),32));

    sub_ln53_1_fu_204_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln53_fu_201_p1));
    sub_ln53_fu_155_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(image_w_dout));
    tmp_1_fu_185_p4 <= image_w_dout(31 downto 2);
    trunc_ln57_fu_271_p1 <= bf_idx_reg_136(9 - 1 downto 0);
    zext_ln53_1_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln53_2_i_reg_294),31));
    zext_ln53_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln53_1_i_reg_289),31));
    zext_ln57_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln57_reg_338_pp0_iter1_reg),32));
end behav;
