-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ColorToGrayUnit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    image_w : IN STD_LOGIC_VECTOR (31 downto 0);
    image_h : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ColorToGrayUnit is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ColorToGrayUnit_ColorToGrayUnit,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=544,HLS_SYN_LUT=632,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv21_556 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010101010110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln64_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln64_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_354_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal icmp_ln64_reg_354_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_135 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_reg_146 : STD_LOGIC_VECTOR (30 downto 0);
    signal column_reg_157 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_i_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln64_fu_187_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln64_reg_354_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_354_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_1_fu_225_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln64_1_reg_358 : STD_LOGIC_VECTOR (30 downto 0);
    signal pixel_data_b_V_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_data_b_V_reg_363 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_2_fu_269_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_2_reg_368 : STD_LOGIC_VECTOR (8 downto 0);
    signal gray_element_int_user_V_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_element_int_user_V_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_element_int_user_V_reg_373_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_element_int_user_V_reg_373_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_element_int_user_V_reg_373_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_element_int_last_V_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_element_int_last_V_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_element_int_last_V_reg_378_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_element_int_last_V_reg_378_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_element_int_last_V_reg_378_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal column_1_fu_292_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_line_phi_fu_150_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_176_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln65_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln65_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_207_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln64_1_fu_219_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal pixel_data_r_V_fu_237_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_data_g_V_fu_247_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_1_fu_265_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln215_fu_261_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln77_fu_275_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln64_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_314_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_314_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_314_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal regslice_both_stream_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_stream_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_TVALID_int_regslice : STD_LOGIC;
    signal stream_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_stream_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_stream_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_stream_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_V_user_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_V_last_V_U_ack_in : STD_LOGIC;
    signal stream_out_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_out_TVALID_int_regslice : STD_LOGIC;
    signal stream_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_stream_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_V_last_V_U_vld_out : STD_LOGIC;
    signal grp_fu_176_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_314_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_314_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component ColorToGrayUnit_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ColorToGrayUnit_am_addmul_9ns_8ns_12ns_21_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component ColorToGrayUnit_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_2_1_U1 : component ColorToGrayUnit_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_176_p0,
        din1 => grp_fu_176_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    am_addmul_9ns_8ns_12ns_21_4_1_U2 : component ColorToGrayUnit_am_addmul_9ns_8ns_12ns_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_314_p0,
        din1 => grp_fu_314_p1,
        din2 => grp_fu_314_p2,
        ce => grp_fu_314_ce,
        dout => grp_fu_314_p3);

    regslice_both_stream_in_V_data_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_TDATA,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_stream_in_V_data_V_U_ack_in,
        data_out => stream_in_TDATA_int_regslice,
        vld_out => stream_in_TVALID_int_regslice,
        ack_out => stream_in_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_V_data_V_U_apdone_blk);

    regslice_both_stream_in_V_keep_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_TKEEP,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_stream_in_V_keep_V_U_ack_in,
        data_out => stream_in_TKEEP_int_regslice,
        vld_out => regslice_both_stream_in_V_keep_V_U_vld_out,
        ack_out => stream_in_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_V_keep_V_U_apdone_blk);

    regslice_both_stream_in_V_strb_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_TSTRB,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_stream_in_V_strb_V_U_ack_in,
        data_out => stream_in_TSTRB_int_regslice,
        vld_out => regslice_both_stream_in_V_strb_V_U_vld_out,
        ack_out => stream_in_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_V_strb_V_U_apdone_blk);

    regslice_both_stream_in_V_user_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_TUSER,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_stream_in_V_user_V_U_ack_in,
        data_out => stream_in_TUSER_int_regslice,
        vld_out => regslice_both_stream_in_V_user_V_U_vld_out,
        ack_out => stream_in_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_V_user_V_U_apdone_blk);

    regslice_both_stream_in_V_last_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_TLAST,
        vld_in => stream_in_TVALID,
        ack_in => regslice_both_stream_in_V_last_V_U_ack_in,
        data_out => stream_in_TLAST_int_regslice,
        vld_out => regslice_both_stream_in_V_last_V_U_vld_out,
        ack_out => stream_in_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_V_last_V_U_apdone_blk);

    regslice_both_stream_out_V_data_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_out_TDATA_int_regslice,
        vld_in => stream_out_TVALID_int_regslice,
        ack_in => stream_out_TREADY_int_regslice,
        data_out => stream_out_TDATA,
        vld_out => regslice_both_stream_out_V_data_V_U_vld_out,
        ack_out => stream_out_TREADY,
        apdone_blk => regslice_both_stream_out_V_data_V_U_apdone_blk);

    regslice_both_stream_out_V_keep_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => stream_out_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_V_keep_V_U_ack_in_dummy,
        data_out => stream_out_TKEEP,
        vld_out => regslice_both_stream_out_V_keep_V_U_vld_out,
        ack_out => stream_out_TREADY,
        apdone_blk => regslice_both_stream_out_V_keep_V_U_apdone_blk);

    regslice_both_stream_out_V_strb_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => stream_out_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_V_strb_V_U_ack_in_dummy,
        data_out => stream_out_TSTRB,
        vld_out => regslice_both_stream_out_V_strb_V_U_vld_out,
        ack_out => stream_out_TREADY,
        apdone_blk => regslice_both_stream_out_V_strb_V_U_apdone_blk);

    regslice_both_stream_out_V_user_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => gray_element_int_user_V_reg_373_pp0_iter3_reg,
        vld_in => stream_out_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_V_user_V_U_ack_in_dummy,
        data_out => stream_out_TUSER,
        vld_out => regslice_both_stream_out_V_user_V_U_vld_out,
        ack_out => stream_out_TREADY,
        apdone_blk => regslice_both_stream_out_V_user_V_U_apdone_blk);

    regslice_both_stream_out_V_last_V_U : component ColorToGrayUnit_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => gray_element_int_last_V_reg_378_pp0_iter3_reg,
        vld_in => stream_out_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_V_last_V_U_ack_in_dummy,
        data_out => stream_out_TLAST,
        vld_out => regslice_both_stream_out_V_last_V_U_vld_out,
        ack_out => stream_out_TREADY,
        apdone_blk => regslice_both_stream_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    column_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                column_reg_157 <= column_1_fu_292_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                column_reg_157 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_135 <= add_ln64_fu_187_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_135 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    line_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_354 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                line_reg_146 <= select_ln64_1_reg_358;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                line_reg_146 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gray_element_int_last_V_reg_378 <= gray_element_int_last_V_fu_287_p2;
                gray_element_int_user_V_reg_373 <= gray_element_int_user_V_fu_281_p2;
                pixel_data_b_V_reg_363 <= pixel_data_b_V_fu_257_p1;
                ret_2_reg_368 <= ret_2_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gray_element_int_last_V_reg_378_pp0_iter1_reg <= gray_element_int_last_V_reg_378;
                gray_element_int_user_V_reg_373_pp0_iter1_reg <= gray_element_int_user_V_reg_373;
                icmp_ln64_reg_354 <= icmp_ln64_fu_202_p2;
                icmp_ln64_reg_354_pp0_iter1_reg <= icmp_ln64_reg_354;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                gray_element_int_last_V_reg_378_pp0_iter2_reg <= gray_element_int_last_V_reg_378_pp0_iter1_reg;
                gray_element_int_last_V_reg_378_pp0_iter3_reg <= gray_element_int_last_V_reg_378_pp0_iter2_reg;
                gray_element_int_user_V_reg_373_pp0_iter2_reg <= gray_element_int_user_V_reg_373_pp0_iter1_reg;
                gray_element_int_user_V_reg_373_pp0_iter3_reg <= gray_element_int_user_V_reg_373_pp0_iter2_reg;
                icmp_ln64_reg_354_pp0_iter2_reg <= icmp_ln64_reg_354_pp0_iter1_reg;
                icmp_ln64_reg_354_pp0_iter3_reg <= icmp_ln64_reg_354_pp0_iter2_reg;
                icmp_ln64_reg_354_pp0_iter4_reg <= icmp_ln64_reg_354_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln64_1_reg_358 <= select_ln64_1_fu_225_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln64_fu_202_p2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_CS_fsm_state9, regslice_both_stream_out_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln64_fu_202_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln64_fu_202_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                if (((regslice_both_stream_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln64_1_fu_219_p2 <= std_logic_vector(unsigned(ap_phi_mux_line_phi_fu_150_p4) + unsigned(ap_const_lv31_1));
    add_ln64_fu_187_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_135) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln64_fu_202_p2, ap_enable_reg_pp0_iter4, icmp_ln64_reg_354_pp0_iter3_reg, ap_enable_reg_pp0_iter5, icmp_ln64_reg_354_pp0_iter4_reg, stream_in_TVALID_int_regslice, stream_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln64_reg_354_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (stream_out_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln64_reg_354_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (stream_out_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (stream_in_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln64_fu_202_p2, ap_enable_reg_pp0_iter4, icmp_ln64_reg_354_pp0_iter3_reg, ap_enable_reg_pp0_iter5, icmp_ln64_reg_354_pp0_iter4_reg, ap_block_state7_io, ap_block_state8_io, stream_in_TVALID_int_regslice, stream_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or ((icmp_ln64_reg_354_pp0_iter4_reg = ap_const_lv1_0) and (stream_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((icmp_ln64_reg_354_pp0_iter3_reg = ap_const_lv1_0) and (stream_out_TREADY_int_regslice = ap_const_logic_0)))) or ((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (stream_in_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln64_fu_202_p2, ap_enable_reg_pp0_iter4, icmp_ln64_reg_354_pp0_iter3_reg, ap_enable_reg_pp0_iter5, icmp_ln64_reg_354_pp0_iter4_reg, ap_block_state7_io, ap_block_state8_io, stream_in_TVALID_int_regslice, stream_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or ((icmp_ln64_reg_354_pp0_iter4_reg = ap_const_lv1_0) and (stream_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((icmp_ln64_reg_354_pp0_iter3_reg = ap_const_lv1_0) and (stream_out_TREADY_int_regslice = ap_const_logic_0)))) or ((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (stream_in_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(icmp_ln64_fu_202_p2, stream_in_TVALID_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (stream_in_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(icmp_ln64_reg_354_pp0_iter3_reg, stream_out_TREADY_int_regslice)
    begin
                ap_block_state7_io <= ((icmp_ln64_reg_354_pp0_iter3_reg = ap_const_lv1_0) and (stream_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter4_assign_proc : process(icmp_ln64_reg_354_pp0_iter3_reg, stream_out_TREADY_int_regslice)
    begin
                ap_block_state7_pp0_stage0_iter4 <= ((icmp_ln64_reg_354_pp0_iter3_reg = ap_const_lv1_0) and (stream_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state8_io_assign_proc : process(icmp_ln64_reg_354_pp0_iter4_reg, stream_out_TREADY_int_regslice)
    begin
                ap_block_state8_io <= ((icmp_ln64_reg_354_pp0_iter4_reg = ap_const_lv1_0) and (stream_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state8_pp0_stage0_iter5_assign_proc : process(icmp_ln64_reg_354_pp0_iter4_reg, stream_out_TREADY_int_regslice)
    begin
                ap_block_state8_pp0_stage0_iter5 <= ((icmp_ln64_reg_354_pp0_iter4_reg = ap_const_lv1_0) and (stream_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln64_fu_202_p2)
    begin
        if ((icmp_ln64_fu_202_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9, regslice_both_stream_out_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_stream_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_line_phi_fu_150_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln64_reg_354, line_reg_146, select_ln64_1_reg_358, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln64_reg_354 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_line_phi_fu_150_p4 <= select_ln64_1_reg_358;
        else 
            ap_phi_mux_line_phi_fu_150_p4 <= line_reg_146;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, regslice_both_stream_out_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_stream_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    column_1_fu_292_p2 <= std_logic_vector(unsigned(select_ln64_fu_207_p3) + unsigned(ap_const_lv31_1));
    gray_element_int_last_V_fu_287_p2 <= "1" when (zext_ln64_fu_215_p1 = sub_i_fu_182_p2) else "0";
    gray_element_int_user_V_fu_281_p2 <= "1" when (or_ln77_fu_275_p2 = ap_const_lv31_0) else "0";
    grp_fu_176_p0 <= grp_fu_176_p00(32 - 1 downto 0);
    grp_fu_176_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_h),64));
    grp_fu_176_p1 <= grp_fu_176_p10(32 - 1 downto 0);
    grp_fu_176_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_w),64));

    grp_fu_314_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_314_ce <= ap_const_logic_1;
        else 
            grp_fu_314_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_314_p0 <= grp_fu_314_p00(9 - 1 downto 0);
    grp_fu_314_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_2_reg_368),10));
    grp_fu_314_p1 <= grp_fu_314_p10(8 - 1 downto 0);
    grp_fu_314_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_data_b_V_reg_363),10));
    grp_fu_314_p2 <= ap_const_lv21_556(12 - 1 downto 0);
    icmp_ln64_fu_202_p2 <= "1" when (indvar_flatten_reg_135 = grp_fu_176_p2) else "0";
    icmp_ln65_fu_197_p2 <= "1" when (signed(zext_ln65_fu_193_p1) < signed(image_w)) else "0";
    or_ln77_fu_275_p2 <= (select_ln64_fu_207_p3 or select_ln64_1_fu_225_p3);
    pixel_data_b_V_fu_257_p1 <= stream_in_TDATA_int_regslice(8 - 1 downto 0);
    pixel_data_g_V_fu_247_p4 <= stream_in_TDATA_int_regslice(15 downto 8);
    pixel_data_r_V_fu_237_p4 <= stream_in_TDATA_int_regslice(23 downto 16);
    ret_2_fu_269_p2 <= std_logic_vector(unsigned(zext_ln215_1_fu_265_p1) + unsigned(zext_ln215_fu_261_p1));
    select_ln64_1_fu_225_p3 <= 
        ap_phi_mux_line_phi_fu_150_p4 when (icmp_ln65_fu_197_p2(0) = '1') else 
        add_ln64_1_fu_219_p2;
    select_ln64_fu_207_p3 <= 
        column_reg_157 when (icmp_ln65_fu_197_p2(0) = '1') else 
        ap_const_lv31_0;

    stream_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln64_fu_202_p2, stream_in_TVALID_int_regslice)
    begin
        if (((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_TDATA_blk_n <= stream_in_TVALID_int_regslice;
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_TREADY <= regslice_both_stream_in_V_data_V_U_ack_in;

    stream_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln64_fu_202_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln64_fu_202_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            stream_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    stream_out_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln64_reg_354_pp0_iter3_reg, ap_enable_reg_pp0_iter5, icmp_ln64_reg_354_pp0_iter4_reg, stream_out_TREADY_int_regslice)
    begin
        if ((((icmp_ln64_reg_354_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln64_reg_354_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            stream_out_TDATA_blk_n <= stream_out_TREADY_int_regslice;
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TDATA_int_regslice <= grp_fu_314_p3(19 downto 12);
    stream_out_TVALID <= regslice_both_stream_out_V_data_V_U_vld_out;

    stream_out_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln64_reg_354_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln64_reg_354_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            stream_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    sub_i_fu_182_p2 <= std_logic_vector(unsigned(image_w) + unsigned(ap_const_lv32_FFFFFFFF));
    zext_ln215_1_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_data_g_V_fu_247_p4),9));
    zext_ln215_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_data_r_V_fu_237_p4),9));
    zext_ln64_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln64_fu_207_p3),32));
    zext_ln65_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_reg_157),32));
end behav;
