// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ColorToGrayUnit_ColorToGray (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        image_w,
        image_h
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [2:0] stream_in_TKEEP;
input  [2:0] stream_in_TSTRB;
input  [0:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
output  [7:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [0:0] stream_out_TKEEP;
output  [0:0] stream_out_TSTRB;
output  [0:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
input  [31:0] image_w;
input  [31:0] image_h;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_TREADY;
reg stream_out_TVALID;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln64_fu_152_p2;
reg    stream_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln64_reg_252;
reg   [0:0] icmp_ln64_reg_252_pp0_iter3_reg;
reg   [63:0] indvar_flatten_reg_121;
wire   [63:0] grp_fu_140_p2;
wire    ap_CS_fsm_state2;
wire   [63:0] add_ln64_fu_146_p2;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_252_pp0_iter1_reg;
reg   [0:0] icmp_ln64_reg_252_pp0_iter2_reg;
reg   [0:0] tmp_i_i_user_reg_256;
reg   [0:0] tmp_i_i_user_reg_256_pp0_iter1_reg;
reg   [0:0] tmp_i_i_user_reg_256_pp0_iter2_reg;
reg   [0:0] tmp_i_i_user_reg_256_pp0_iter3_reg;
reg   [0:0] tmp_i_i_last_reg_261;
reg   [0:0] tmp_i_i_last_reg_261_pp0_iter1_reg;
reg   [0:0] tmp_i_i_last_reg_261_pp0_iter2_reg;
reg   [0:0] tmp_i_i_last_reg_261_pp0_iter3_reg;
wire   [7:0] pixel_data_b_V_fu_189_p1;
reg   [7:0] pixel_data_b_V_reg_266;
wire   [8:0] ret_2_fu_201_p2;
reg   [8:0] ret_2_reg_271;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_140_p0;
wire   [31:0] grp_fu_140_p1;
wire   [7:0] pixel_data_r_V_fu_169_p4;
wire   [7:0] pixel_data_g_V_fu_179_p4;
wire   [8:0] zext_ln215_1_fu_197_p1;
wire   [8:0] zext_ln215_fu_193_p1;
wire   [20:0] grp_fu_223_p3;
wire   [8:0] grp_fu_223_p0;
wire   [7:0] grp_fu_223_p1;
wire   [11:0] grp_fu_223_p2;
reg    grp_fu_223_ce;
wire    ap_CS_fsm_state8;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_140_p00;
wire   [63:0] grp_fu_140_p10;
wire   [9:0] grp_fu_223_p00;
wire   [9:0] grp_fu_223_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ColorToGrayUnit_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_140_p0),
    .din1(grp_fu_140_p1),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

ColorToGrayUnit_am_addmul_9ns_8ns_12ns_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 21 ))
am_addmul_9ns_8ns_12ns_21_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_223_p0),
    .din1(grp_fu_223_p1),
    .din2(grp_fu_223_p2),
    .ce(grp_fu_223_ce),
    .dout(grp_fu_223_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_121 <= add_ln64_fu_146_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_121 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_252 <= icmp_ln64_fu_152_p2;
        icmp_ln64_reg_252_pp0_iter1_reg <= icmp_ln64_reg_252;
        tmp_i_i_last_reg_261_pp0_iter1_reg <= tmp_i_i_last_reg_261;
        tmp_i_i_user_reg_256_pp0_iter1_reg <= tmp_i_i_user_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln64_reg_252_pp0_iter2_reg <= icmp_ln64_reg_252_pp0_iter1_reg;
        icmp_ln64_reg_252_pp0_iter3_reg <= icmp_ln64_reg_252_pp0_iter2_reg;
        tmp_i_i_last_reg_261_pp0_iter2_reg <= tmp_i_i_last_reg_261_pp0_iter1_reg;
        tmp_i_i_last_reg_261_pp0_iter3_reg <= tmp_i_i_last_reg_261_pp0_iter2_reg;
        tmp_i_i_user_reg_256_pp0_iter2_reg <= tmp_i_i_user_reg_256_pp0_iter1_reg;
        tmp_i_i_user_reg_256_pp0_iter3_reg <= tmp_i_i_user_reg_256_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixel_data_b_V_reg_266 <= pixel_data_b_V_fu_189_p1;
        ret_2_reg_271 <= ret_2_fu_201_p2;
        tmp_i_i_last_reg_261 <= stream_in_TLAST;
        tmp_i_i_user_reg_256 <= stream_in_TUSER;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_152_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_223_ce = 1'b1;
    end else begin
        grp_fu_223_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_TDATA_blk_n = stream_in_TVALID;
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_TREADY = 1'b1;
    end else begin
        stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_252_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        stream_out_TDATA_blk_n = stream_out_TREADY;
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_252_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_out_TVALID = 1'b1;
    end else begin
        stream_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln64_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((icmp_ln64_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln64_fu_146_p2 = (indvar_flatten_reg_121 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln64_reg_252_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (stream_out_TREADY == 1'b0)) | ((icmp_ln64_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (stream_in_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln64_reg_252_pp0_iter3_reg == 1'd0) & (stream_out_TREADY == 1'b0)))) | ((icmp_ln64_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (stream_in_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln64_reg_252_pp0_iter3_reg == 1'd0) & (stream_out_TREADY == 1'b0)))) | ((icmp_ln64_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (stream_in_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((icmp_ln64_fu_152_p2 == 1'd0) & (stream_in_TVALID == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((icmp_ln64_reg_252_pp0_iter3_reg == 1'd0) & (stream_out_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((icmp_ln64_reg_252_pp0_iter3_reg == 1'd0) & (stream_out_TREADY == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_140_p0 = grp_fu_140_p00;

assign grp_fu_140_p00 = image_h;

assign grp_fu_140_p1 = grp_fu_140_p10;

assign grp_fu_140_p10 = image_w;

assign grp_fu_223_p0 = grp_fu_223_p00;

assign grp_fu_223_p00 = ret_2_reg_271;

assign grp_fu_223_p1 = grp_fu_223_p10;

assign grp_fu_223_p10 = pixel_data_b_V_reg_266;

assign grp_fu_223_p2 = 21'd1366;

assign icmp_ln64_fu_152_p2 = ((indvar_flatten_reg_121 == grp_fu_140_p2) ? 1'b1 : 1'b0);

assign pixel_data_b_V_fu_189_p1 = stream_in_TDATA[7:0];

assign pixel_data_g_V_fu_179_p4 = {{stream_in_TDATA[15:8]}};

assign pixel_data_r_V_fu_169_p4 = {{stream_in_TDATA[23:16]}};

assign ret_2_fu_201_p2 = (zext_ln215_1_fu_197_p1 + zext_ln215_fu_193_p1);

assign stream_out_TDATA = {{grp_fu_223_p3[19:12]}};

assign stream_out_TKEEP = 1'd0;

assign stream_out_TLAST = tmp_i_i_last_reg_261_pp0_iter3_reg;

assign stream_out_TSTRB = 1'd0;

assign stream_out_TUSER = tmp_i_i_user_reg_256_pp0_iter3_reg;

assign zext_ln215_1_fu_197_p1 = pixel_data_g_V_fu_179_p4;

assign zext_ln215_fu_193_p1 = pixel_data_r_V_fu_169_p4;

endmodule //ColorToGrayUnit_ColorToGray
