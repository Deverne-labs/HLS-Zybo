// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DataMoverUnit_s2mm_32bits_DataMover_s2mm_32bits (
        m_axi_MM_video_out_AWVALID,
        m_axi_MM_video_out_AWREADY,
        m_axi_MM_video_out_AWADDR,
        m_axi_MM_video_out_AWID,
        m_axi_MM_video_out_AWLEN,
        m_axi_MM_video_out_AWSIZE,
        m_axi_MM_video_out_AWBURST,
        m_axi_MM_video_out_AWLOCK,
        m_axi_MM_video_out_AWCACHE,
        m_axi_MM_video_out_AWPROT,
        m_axi_MM_video_out_AWQOS,
        m_axi_MM_video_out_AWREGION,
        m_axi_MM_video_out_AWUSER,
        m_axi_MM_video_out_WVALID,
        m_axi_MM_video_out_WREADY,
        m_axi_MM_video_out_WDATA,
        m_axi_MM_video_out_WSTRB,
        m_axi_MM_video_out_WLAST,
        m_axi_MM_video_out_WID,
        m_axi_MM_video_out_WUSER,
        m_axi_MM_video_out_ARVALID,
        m_axi_MM_video_out_ARREADY,
        m_axi_MM_video_out_ARADDR,
        m_axi_MM_video_out_ARID,
        m_axi_MM_video_out_ARLEN,
        m_axi_MM_video_out_ARSIZE,
        m_axi_MM_video_out_ARBURST,
        m_axi_MM_video_out_ARLOCK,
        m_axi_MM_video_out_ARCACHE,
        m_axi_MM_video_out_ARPROT,
        m_axi_MM_video_out_ARQOS,
        m_axi_MM_video_out_ARREGION,
        m_axi_MM_video_out_ARUSER,
        m_axi_MM_video_out_RVALID,
        m_axi_MM_video_out_RREADY,
        m_axi_MM_video_out_RDATA,
        m_axi_MM_video_out_RLAST,
        m_axi_MM_video_out_RID,
        m_axi_MM_video_out_RUSER,
        m_axi_MM_video_out_RRESP,
        m_axi_MM_video_out_BVALID,
        m_axi_MM_video_out_BREADY,
        m_axi_MM_video_out_BRESP,
        m_axi_MM_video_out_BID,
        m_axi_MM_video_out_BUSER,
        STR_video_in_TDATA,
        STR_video_in_TKEEP,
        STR_video_in_TSTRB,
        STR_video_in_TUSER,
        STR_video_in_TLAST,
        ddr_buffer_out,
        image_w,
        image_h,
        invert_X,
        invert_Y,
        ap_clk,
        ap_rst,
        STR_video_in_TVALID,
        STR_video_in_TREADY,
        image_w_ap_vld,
        invert_X_ap_vld,
        ddr_buffer_out_ap_vld,
        image_h_ap_vld,
        invert_Y_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output   m_axi_MM_video_out_AWVALID;
input   m_axi_MM_video_out_AWREADY;
output  [31:0] m_axi_MM_video_out_AWADDR;
output  [0:0] m_axi_MM_video_out_AWID;
output  [31:0] m_axi_MM_video_out_AWLEN;
output  [2:0] m_axi_MM_video_out_AWSIZE;
output  [1:0] m_axi_MM_video_out_AWBURST;
output  [1:0] m_axi_MM_video_out_AWLOCK;
output  [3:0] m_axi_MM_video_out_AWCACHE;
output  [2:0] m_axi_MM_video_out_AWPROT;
output  [3:0] m_axi_MM_video_out_AWQOS;
output  [3:0] m_axi_MM_video_out_AWREGION;
output  [0:0] m_axi_MM_video_out_AWUSER;
output   m_axi_MM_video_out_WVALID;
input   m_axi_MM_video_out_WREADY;
output  [31:0] m_axi_MM_video_out_WDATA;
output  [3:0] m_axi_MM_video_out_WSTRB;
output   m_axi_MM_video_out_WLAST;
output  [0:0] m_axi_MM_video_out_WID;
output  [0:0] m_axi_MM_video_out_WUSER;
output   m_axi_MM_video_out_ARVALID;
input   m_axi_MM_video_out_ARREADY;
output  [31:0] m_axi_MM_video_out_ARADDR;
output  [0:0] m_axi_MM_video_out_ARID;
output  [31:0] m_axi_MM_video_out_ARLEN;
output  [2:0] m_axi_MM_video_out_ARSIZE;
output  [1:0] m_axi_MM_video_out_ARBURST;
output  [1:0] m_axi_MM_video_out_ARLOCK;
output  [3:0] m_axi_MM_video_out_ARCACHE;
output  [2:0] m_axi_MM_video_out_ARPROT;
output  [3:0] m_axi_MM_video_out_ARQOS;
output  [3:0] m_axi_MM_video_out_ARREGION;
output  [0:0] m_axi_MM_video_out_ARUSER;
input   m_axi_MM_video_out_RVALID;
output   m_axi_MM_video_out_RREADY;
input  [31:0] m_axi_MM_video_out_RDATA;
input   m_axi_MM_video_out_RLAST;
input  [0:0] m_axi_MM_video_out_RID;
input  [0:0] m_axi_MM_video_out_RUSER;
input  [1:0] m_axi_MM_video_out_RRESP;
input   m_axi_MM_video_out_BVALID;
output   m_axi_MM_video_out_BREADY;
input  [1:0] m_axi_MM_video_out_BRESP;
input  [0:0] m_axi_MM_video_out_BID;
input  [0:0] m_axi_MM_video_out_BUSER;
input  [7:0] STR_video_in_TDATA;
input  [0:0] STR_video_in_TKEEP;
input  [0:0] STR_video_in_TSTRB;
input  [0:0] STR_video_in_TUSER;
input  [0:0] STR_video_in_TLAST;
input  [31:0] ddr_buffer_out;
input  [31:0] image_w;
input  [31:0] image_h;
input  [0:0] invert_X;
input  [0:0] invert_Y;
input   ap_clk;
input   ap_rst;
input   STR_video_in_TVALID;
output   STR_video_in_TREADY;
input   image_w_ap_vld;
input   invert_X_ap_vld;
input   ddr_buffer_out_ap_vld;
input   image_h_ap_vld;
input   invert_Y_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire    dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWVALID;
wire   [31:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWADDR;
wire   [0:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWID;
wire   [31:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLEN;
wire   [2:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWSIZE;
wire   [1:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWBURST;
wire   [1:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLOCK;
wire   [3:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWCACHE;
wire   [2:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWPROT;
wire   [3:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWQOS;
wire   [3:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWREGION;
wire   [0:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWUSER;
wire    dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WVALID;
wire   [31:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WDATA;
wire   [3:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WSTRB;
wire    dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WLAST;
wire   [0:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WID;
wire   [0:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WUSER;
wire    dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARVALID;
wire   [31:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARADDR;
wire   [0:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARID;
wire   [31:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARLEN;
wire   [2:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARSIZE;
wire   [1:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARBURST;
wire   [1:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARLOCK;
wire   [3:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARCACHE;
wire   [2:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARPROT;
wire   [3:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARQOS;
wire   [3:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARREGION;
wire   [0:0] dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARUSER;
wire    dataflow_in_loop_S2M_U0_m_axi_MM_video_out_RREADY;
wire    dataflow_in_loop_S2M_U0_m_axi_MM_video_out_BREADY;
wire   [30:0] dataflow_in_loop_S2M_U0_DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0;
wire   [20:0] dataflow_in_loop_S2M_U0_image_h;
wire    dataflow_in_loop_S2M_U0_ap_start;
wire    dataflow_in_loop_S2M_U0_STR_video_in_TREADY;
wire    dataflow_in_loop_S2M_U0_ap_done;
wire    dataflow_in_loop_S2M_U0_ap_ready;
wire    dataflow_in_loop_S2M_U0_ap_idle;
reg    dataflow_in_loop_S2M_U0_ap_continue;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
reg   [31:0] loop_dataflow_input_count;
reg   [31:0] loop_dataflow_output_count;
wire   [31:0] bound_minus_1;
wire    dataflow_in_loop_S2M_U0_start_full_n;
wire    dataflow_in_loop_S2M_U0_start_write;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 loop_dataflow_input_count = 32'd0;
#0 loop_dataflow_output_count = 32'd0;
end

DataMoverUnit_s2mm_32bits_dataflow_in_loop_S2M dataflow_in_loop_S2M_U0(
    .STR_video_in_TDATA(STR_video_in_TDATA),
    .STR_video_in_TKEEP(STR_video_in_TKEEP),
    .STR_video_in_TSTRB(STR_video_in_TSTRB),
    .STR_video_in_TUSER(STR_video_in_TUSER),
    .STR_video_in_TLAST(STR_video_in_TLAST),
    .image_w(image_w),
    .invert_X(invert_X),
    .m_axi_MM_video_out_AWVALID(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWVALID),
    .m_axi_MM_video_out_AWREADY(m_axi_MM_video_out_AWREADY),
    .m_axi_MM_video_out_AWADDR(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWADDR),
    .m_axi_MM_video_out_AWID(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWID),
    .m_axi_MM_video_out_AWLEN(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLEN),
    .m_axi_MM_video_out_AWSIZE(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWSIZE),
    .m_axi_MM_video_out_AWBURST(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWBURST),
    .m_axi_MM_video_out_AWLOCK(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLOCK),
    .m_axi_MM_video_out_AWCACHE(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWCACHE),
    .m_axi_MM_video_out_AWPROT(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWPROT),
    .m_axi_MM_video_out_AWQOS(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWQOS),
    .m_axi_MM_video_out_AWREGION(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWREGION),
    .m_axi_MM_video_out_AWUSER(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWUSER),
    .m_axi_MM_video_out_WVALID(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WVALID),
    .m_axi_MM_video_out_WREADY(m_axi_MM_video_out_WREADY),
    .m_axi_MM_video_out_WDATA(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WDATA),
    .m_axi_MM_video_out_WSTRB(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WSTRB),
    .m_axi_MM_video_out_WLAST(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WLAST),
    .m_axi_MM_video_out_WID(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WID),
    .m_axi_MM_video_out_WUSER(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WUSER),
    .m_axi_MM_video_out_ARVALID(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARVALID),
    .m_axi_MM_video_out_ARREADY(1'b0),
    .m_axi_MM_video_out_ARADDR(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARADDR),
    .m_axi_MM_video_out_ARID(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARID),
    .m_axi_MM_video_out_ARLEN(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARLEN),
    .m_axi_MM_video_out_ARSIZE(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARSIZE),
    .m_axi_MM_video_out_ARBURST(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARBURST),
    .m_axi_MM_video_out_ARLOCK(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARLOCK),
    .m_axi_MM_video_out_ARCACHE(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARCACHE),
    .m_axi_MM_video_out_ARPROT(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARPROT),
    .m_axi_MM_video_out_ARQOS(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARQOS),
    .m_axi_MM_video_out_ARREGION(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARREGION),
    .m_axi_MM_video_out_ARUSER(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARUSER),
    .m_axi_MM_video_out_RVALID(1'b0),
    .m_axi_MM_video_out_RREADY(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_RREADY),
    .m_axi_MM_video_out_RDATA(32'd0),
    .m_axi_MM_video_out_RLAST(1'b0),
    .m_axi_MM_video_out_RID(1'd0),
    .m_axi_MM_video_out_RUSER(1'd0),
    .m_axi_MM_video_out_RRESP(2'd0),
    .m_axi_MM_video_out_BVALID(m_axi_MM_video_out_BVALID),
    .m_axi_MM_video_out_BREADY(dataflow_in_loop_S2M_U0_m_axi_MM_video_out_BREADY),
    .m_axi_MM_video_out_BRESP(m_axi_MM_video_out_BRESP),
    .m_axi_MM_video_out_BID(m_axi_MM_video_out_BID),
    .m_axi_MM_video_out_BUSER(m_axi_MM_video_out_BUSER),
    .ddr_buffer_out(ddr_buffer_out),
    .DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0(dataflow_in_loop_S2M_U0_DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0),
    .image_h(dataflow_in_loop_S2M_U0_image_h),
    .invert_Y(invert_Y),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .image_w_ap_vld(image_w_ap_vld),
    .invert_X_ap_vld(invert_X_ap_vld),
    .ddr_buffer_out_ap_vld(ddr_buffer_out_ap_vld),
    .DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_ap_vld(1'b0),
    .image_h_ap_vld(image_h_ap_vld),
    .invert_Y_ap_vld(invert_Y_ap_vld),
    .ap_start(dataflow_in_loop_S2M_U0_ap_start),
    .STR_video_in_TVALID(STR_video_in_TVALID),
    .STR_video_in_TREADY(dataflow_in_loop_S2M_U0_STR_video_in_TREADY),
    .ap_done(dataflow_in_loop_S2M_U0_ap_done),
    .ap_ready(dataflow_in_loop_S2M_U0_ap_ready),
    .ap_idle(dataflow_in_loop_S2M_U0_ap_idle),
    .ap_continue(dataflow_in_loop_S2M_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 32'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_S2M_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 32'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_S2M_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 32'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_S2M_U0_ap_continue == 1'b1) & (dataflow_in_loop_S2M_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 32'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_S2M_U0_ap_continue == 1'b1) & (dataflow_in_loop_S2M_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 32'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_S2M_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 32'd0) & (ap_start == 1'b0) & (dataflow_in_loop_S2M_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_S2M_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_S2M_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_S2M_U0_ap_continue = 1'b0;
    end
end

assign STR_video_in_TREADY = dataflow_in_loop_S2M_U0_STR_video_in_TREADY;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = dataflow_in_loop_S2M_U0_ap_done;

assign ap_sync_ready = dataflow_in_loop_S2M_U0_ap_ready;

assign bound_minus_1 = (image_h - 32'd1);

assign dataflow_in_loop_S2M_U0_DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0 = loop_dataflow_input_count;

assign dataflow_in_loop_S2M_U0_ap_start = ap_start;

assign dataflow_in_loop_S2M_U0_image_h = {{image_h[(21 - 32'd1):0]}};

assign dataflow_in_loop_S2M_U0_start_full_n = 1'b1;

assign dataflow_in_loop_S2M_U0_start_write = 1'b0;

assign m_axi_MM_video_out_ARADDR = 32'd0;

assign m_axi_MM_video_out_ARBURST = 2'd0;

assign m_axi_MM_video_out_ARCACHE = 4'd0;

assign m_axi_MM_video_out_ARID = 1'd0;

assign m_axi_MM_video_out_ARLEN = 32'd0;

assign m_axi_MM_video_out_ARLOCK = 2'd0;

assign m_axi_MM_video_out_ARPROT = 3'd0;

assign m_axi_MM_video_out_ARQOS = 4'd0;

assign m_axi_MM_video_out_ARREGION = 4'd0;

assign m_axi_MM_video_out_ARSIZE = 3'd0;

assign m_axi_MM_video_out_ARUSER = 1'd0;

assign m_axi_MM_video_out_ARVALID = 1'b0;

assign m_axi_MM_video_out_AWADDR = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWADDR;

assign m_axi_MM_video_out_AWBURST = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWBURST;

assign m_axi_MM_video_out_AWCACHE = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWCACHE;

assign m_axi_MM_video_out_AWID = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWID;

assign m_axi_MM_video_out_AWLEN = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLEN;

assign m_axi_MM_video_out_AWLOCK = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLOCK;

assign m_axi_MM_video_out_AWPROT = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWPROT;

assign m_axi_MM_video_out_AWQOS = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWQOS;

assign m_axi_MM_video_out_AWREGION = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWREGION;

assign m_axi_MM_video_out_AWSIZE = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWSIZE;

assign m_axi_MM_video_out_AWUSER = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWUSER;

assign m_axi_MM_video_out_AWVALID = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWVALID;

assign m_axi_MM_video_out_BREADY = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_BREADY;

assign m_axi_MM_video_out_RREADY = 1'b0;

assign m_axi_MM_video_out_WDATA = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WDATA;

assign m_axi_MM_video_out_WID = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WID;

assign m_axi_MM_video_out_WLAST = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WLAST;

assign m_axi_MM_video_out_WSTRB = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WSTRB;

assign m_axi_MM_video_out_WUSER = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WUSER;

assign m_axi_MM_video_out_WVALID = dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WVALID;

endmodule //DataMoverUnit_s2mm_32bits_DataMover_s2mm_32bits
