-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DataMoverUnit_s2mm_32bits_DMAWriteMM is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_MM_video_out_AWVALID : OUT STD_LOGIC;
    m_axi_MM_video_out_AWREADY : IN STD_LOGIC;
    m_axi_MM_video_out_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_WVALID : OUT STD_LOGIC;
    m_axi_MM_video_out_WREADY : IN STD_LOGIC;
    m_axi_MM_video_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_WLAST : OUT STD_LOGIC;
    m_axi_MM_video_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_ARVALID : OUT STD_LOGIC;
    m_axi_MM_video_out_ARREADY : IN STD_LOGIC;
    m_axi_MM_video_out_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_RVALID : IN STD_LOGIC;
    m_axi_MM_video_out_RREADY : OUT STD_LOGIC;
    m_axi_MM_video_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_RLAST : IN STD_LOGIC;
    m_axi_MM_video_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_BVALID : IN STD_LOGIC;
    m_axi_MM_video_out_BREADY : OUT STD_LOGIC;
    m_axi_MM_video_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ddr_buffer_out_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ddr_buffer_out_empty_n : IN STD_LOGIC;
    ddr_buffer_out_read : OUT STD_LOGIC;
    DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_dout : IN STD_LOGIC_VECTOR (20 downto 0);
    DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n : IN STD_LOGIC;
    DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read : OUT STD_LOGIC;
    image_h_dout : IN STD_LOGIC_VECTOR (20 downto 0);
    image_h_empty_n : IN STD_LOGIC;
    image_h_read : OUT STD_LOGIC;
    image_w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    image_w_empty_n : IN STD_LOGIC;
    image_w_read : OUT STD_LOGIC;
    invert_Y_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    invert_Y_empty_n : IN STD_LOGIC;
    invert_Y_read : OUT STD_LOGIC;
    axi_elt_dma_buffer_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    axi_elt_dma_buffer_V_ce0 : OUT STD_LOGIC;
    axi_elt_dma_buffer_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DataMoverUnit_s2mm_32bits_DMAWriteMM is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv30_3FFFFE00 : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111111000000000";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal MM_video_out_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal MM_video_out_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln63_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_476_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal MM_video_out_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal invert_Y_read_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln69_reg_456 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_456_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_buffer_out_blk_n : STD_LOGIC;
    signal DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_blk_n : STD_LOGIC;
    signal image_h_blk_n : STD_LOGIC;
    signal image_w_blk_n : STD_LOGIC;
    signal invert_Y_blk_n : STD_LOGIC;
    signal phi_ln332_1_reg_171 : STD_LOGIC_VECTOR (29 downto 0);
    signal phi_ln332_reg_182 : STD_LOGIC_VECTOR (29 downto 0);
    signal reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ddr_buffer_out_read_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read_reg_397 : STD_LOGIC_VECTOR (20 downto 0);
    signal image_h_read_reg_403 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln60_1_reg_417 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln60_2_reg_422 : STD_LOGIC_VECTOR (29 downto 0);
    signal burst_size_fu_245_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal burst_size_reg_427 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln332_3_reg_435 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln332_2_reg_440 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln69_fu_329_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln69_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln63_fu_367_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln63_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal zext_ln71_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln65_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln332_1_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln332_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal burst_size_cast23_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal burst_size_cast_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal sub_ln60_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln60_fu_233_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln60_1_fu_236_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln60_1_fu_242_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln332_4_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln332_2_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub2_i_i_i_fu_274_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub1_i_i_i_fu_278_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln332_fu_286_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln332_3_fu_292_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln332_1_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln69_fu_335_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln71_fu_344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln63_fu_373_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln65_fu_382_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_0)) or ((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    phi_ln332_1_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln332_1_reg_171 <= ap_const_lv30_0;
            elsif (((icmp_ln69_fu_339_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                phi_ln332_1_reg_171 <= add_ln69_fu_329_p2;
            end if; 
        end if;
    end process;

    phi_ln332_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                phi_ln332_reg_182 <= ap_const_lv30_0;
            elsif (((icmp_ln63_fu_377_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                phi_ln332_reg_182 <= add_ln63_fu_367_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read_reg_397 <= DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_dout;
                ddr_buffer_out_read_reg_391 <= ddr_buffer_out_dout;
                image_h_read_reg_403 <= image_h_dout;
                invert_Y_read_reg_408 <= invert_Y_dout;
                tmp_reg_412 <= image_w_dout(31 downto 31);
                trunc_ln60_1_reg_417 <= sub_ln60_fu_207_p2(31 downto 2);
                trunc_ln60_2_reg_422 <= image_w_dout(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                burst_size_reg_427 <= burst_size_fu_245_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln63_reg_476 <= icmp_ln63_fu_377_p2;
                icmp_ln63_reg_476_pp1_iter1_reg <= icmp_ln63_reg_476;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln69_reg_456 <= icmp_ln69_fu_339_p2;
                icmp_ln69_reg_456_pp0_iter1_reg <= icmp_ln69_reg_456;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln63_reg_476 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln69_reg_456 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_193 <= axi_elt_dma_buffer_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (invert_Y_read_reg_408 = ap_const_lv1_1))) then
                trunc_ln332_2_reg_440 <= add_ln332_1_fu_300_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (invert_Y_read_reg_408 = ap_const_lv1_0))) then
                trunc_ln332_3_reg_435 <= add_ln332_2_fu_259_p2(31 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_MM_video_out_AWREADY, m_axi_MM_video_out_BVALID, ddr_buffer_out_empty_n, DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n, image_h_empty_n, image_w_empty_n, invert_Y_empty_n, ap_CS_fsm_state12, ap_enable_reg_pp1_iter2, ap_CS_fsm_state11, invert_Y_read_reg_408, ap_CS_fsm_state3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln69_fu_339_p2, ap_enable_reg_pp1_iter0, icmp_ln63_fu_377_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ddr_buffer_out_empty_n = ap_const_logic_0) or (ap_const_logic_0 = DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (invert_Y_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (image_h_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (invert_Y_read_reg_408 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln69_fu_339_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln69_fu_339_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if ((not((((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_0)) or ((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln63_fu_377_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((icmp_ln63_fu_377_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_blk_n <= DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n;
        else 
            DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ddr_buffer_out_empty_n, DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n, image_h_empty_n, image_w_empty_n, invert_Y_empty_n)
    begin
        if ((not(((ddr_buffer_out_empty_n = ap_const_logic_0) or (ap_const_logic_0 = DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (invert_Y_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (image_h_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read <= ap_const_logic_1;
        else 
            DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read <= ap_const_logic_0;
        end if; 
    end process;


    MM_video_out_blk_n_AW_assign_proc : process(m_axi_MM_video_out_AWREADY, ap_CS_fsm_state12, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            MM_video_out_blk_n_AW <= m_axi_MM_video_out_AWREADY;
        else 
            MM_video_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    MM_video_out_blk_n_B_assign_proc : process(m_axi_MM_video_out_BVALID, ap_CS_fsm_state11, invert_Y_read_reg_408)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (invert_Y_read_reg_408 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (invert_Y_read_reg_408 = ap_const_lv1_1)))) then 
            MM_video_out_blk_n_B <= m_axi_MM_video_out_BVALID;
        else 
            MM_video_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    MM_video_out_blk_n_W_assign_proc : process(m_axi_MM_video_out_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln63_reg_476_pp1_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln69_reg_456_pp0_iter1_reg)
    begin
        if ((((icmp_ln69_reg_456_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln63_reg_476_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            MM_video_out_blk_n_W <= m_axi_MM_video_out_WREADY;
        else 
            MM_video_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    add_ln332_1_fu_300_p2 <= std_logic_vector(unsigned(ddr_buffer_out_read_reg_391) + unsigned(shl_ln332_3_fu_292_p3));
    add_ln332_2_fu_259_p2 <= std_logic_vector(unsigned(ddr_buffer_out_read_reg_391) + unsigned(shl_ln332_4_fu_252_p3));
    add_ln332_fu_286_p2 <= std_logic_vector(unsigned(sub1_i_i_i_fu_278_p3) + unsigned(ap_const_lv30_3FFFFE00));
    add_ln63_fu_367_p2 <= std_logic_vector(unsigned(phi_ln332_reg_182) + unsigned(ap_const_lv30_1));
    add_ln69_fu_329_p2 <= std_logic_vector(unsigned(phi_ln332_1_reg_171) + unsigned(ap_const_lv30_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ddr_buffer_out_empty_n, DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n, image_h_empty_n, image_w_empty_n, invert_Y_empty_n)
    begin
                ap_block_state1 <= ((ddr_buffer_out_empty_n = ap_const_logic_0) or (ap_const_logic_0 = DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (invert_Y_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (image_h_empty_n = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(m_axi_MM_video_out_BVALID, invert_Y_read_reg_408)
    begin
                ap_block_state11 <= (((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_0)) or ((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_1)));
    end process;

        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(m_axi_MM_video_out_WREADY, icmp_ln63_reg_476_pp1_iter1_reg)
    begin
                ap_block_state15_io <= ((m_axi_MM_video_out_WREADY = ap_const_logic_0) and (icmp_ln63_reg_476_pp1_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state15_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(m_axi_MM_video_out_WREADY, icmp_ln69_reg_456_pp0_iter1_reg)
    begin
                ap_block_state6_io <= ((m_axi_MM_video_out_WREADY = ap_const_logic_0) and (icmp_ln69_reg_456_pp0_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln69_fu_339_p2)
    begin
        if ((icmp_ln69_fu_339_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(icmp_ln63_fu_377_p2)
    begin
        if ((icmp_ln63_fu_377_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_MM_video_out_BVALID, ap_CS_fsm_state11, invert_Y_read_reg_408)
    begin
        if ((not((((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_0)) or ((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_MM_video_out_BVALID, ap_CS_fsm_state11, invert_Y_read_reg_408)
    begin
        if ((not((((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_0)) or ((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    axi_elt_dma_buffer_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, zext_ln71_fu_348_p1, zext_ln65_fu_386_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            axi_elt_dma_buffer_V_address0 <= zext_ln65_fu_386_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            axi_elt_dma_buffer_V_address0 <= zext_ln71_fu_348_p1(9 - 1 downto 0);
        else 
            axi_elt_dma_buffer_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    axi_elt_dma_buffer_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            axi_elt_dma_buffer_V_ce0 <= ap_const_logic_1;
        else 
            axi_elt_dma_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    burst_size_cast23_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(burst_size_reg_427),32));
    burst_size_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(burst_size_reg_427),32));
    burst_size_fu_245_p3 <= 
        sub_ln60_1_fu_236_p2 when (tmp_reg_412(0) = '1') else 
        zext_ln60_1_fu_242_p1;

    ddr_buffer_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ddr_buffer_out_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ddr_buffer_out_blk_n <= ddr_buffer_out_empty_n;
        else 
            ddr_buffer_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ddr_buffer_out_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ddr_buffer_out_empty_n, DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n, image_h_empty_n, image_w_empty_n, invert_Y_empty_n)
    begin
        if ((not(((ddr_buffer_out_empty_n = ap_const_logic_0) or (ap_const_logic_0 = DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (invert_Y_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (image_h_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ddr_buffer_out_read <= ap_const_logic_1;
        else 
            ddr_buffer_out_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln63_fu_377_p2 <= "1" when (signed(zext_ln63_fu_373_p1) < signed(burst_size_reg_427)) else "0";
    icmp_ln69_fu_339_p2 <= "1" when (signed(zext_ln69_fu_335_p1) < signed(burst_size_reg_427)) else "0";

    image_h_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_h_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_h_blk_n <= image_h_empty_n;
        else 
            image_h_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    image_h_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ddr_buffer_out_empty_n, DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n, image_h_empty_n, image_w_empty_n, invert_Y_empty_n)
    begin
        if ((not(((ddr_buffer_out_empty_n = ap_const_logic_0) or (ap_const_logic_0 = DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (invert_Y_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (image_h_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_h_read <= ap_const_logic_1;
        else 
            image_h_read <= ap_const_logic_0;
        end if; 
    end process;


    image_w_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, image_w_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_w_blk_n <= image_w_empty_n;
        else 
            image_w_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    image_w_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ddr_buffer_out_empty_n, DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n, image_h_empty_n, image_w_empty_n, invert_Y_empty_n)
    begin
        if ((not(((ddr_buffer_out_empty_n = ap_const_logic_0) or (ap_const_logic_0 = DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (invert_Y_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (image_h_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_w_read <= ap_const_logic_1;
        else 
            image_w_read <= ap_const_logic_0;
        end if; 
    end process;


    invert_Y_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, invert_Y_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            invert_Y_blk_n <= invert_Y_empty_n;
        else 
            invert_Y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    invert_Y_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ddr_buffer_out_empty_n, DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n, image_h_empty_n, image_w_empty_n, invert_Y_empty_n)
    begin
        if ((not(((ddr_buffer_out_empty_n = ap_const_logic_0) or (ap_const_logic_0 = DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (invert_Y_empty_n = ap_const_logic_0) or (image_w_empty_n = ap_const_logic_0) or (image_h_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            invert_Y_read <= ap_const_logic_1;
        else 
            invert_Y_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_MM_video_out_ARADDR <= ap_const_lv32_0;
    m_axi_MM_video_out_ARBURST <= ap_const_lv2_0;
    m_axi_MM_video_out_ARCACHE <= ap_const_lv4_0;
    m_axi_MM_video_out_ARID <= ap_const_lv1_0;
    m_axi_MM_video_out_ARLEN <= ap_const_lv32_0;
    m_axi_MM_video_out_ARLOCK <= ap_const_lv2_0;
    m_axi_MM_video_out_ARPROT <= ap_const_lv3_0;
    m_axi_MM_video_out_ARQOS <= ap_const_lv4_0;
    m_axi_MM_video_out_ARREGION <= ap_const_lv4_0;
    m_axi_MM_video_out_ARSIZE <= ap_const_lv3_0;
    m_axi_MM_video_out_ARUSER <= ap_const_lv1_0;
    m_axi_MM_video_out_ARVALID <= ap_const_logic_0;

    m_axi_MM_video_out_AWADDR_assign_proc : process(m_axi_MM_video_out_AWREADY, ap_CS_fsm_state12, ap_CS_fsm_state3, sext_ln332_1_fu_315_p1, sext_ln332_fu_353_p1)
    begin
        if ((m_axi_MM_video_out_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                m_axi_MM_video_out_AWADDR <= sext_ln332_fu_353_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_MM_video_out_AWADDR <= sext_ln332_1_fu_315_p1;
            else 
                m_axi_MM_video_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_MM_video_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_MM_video_out_AWBURST <= ap_const_lv2_0;
    m_axi_MM_video_out_AWCACHE <= ap_const_lv4_0;
    m_axi_MM_video_out_AWID <= ap_const_lv1_0;

    m_axi_MM_video_out_AWLEN_assign_proc : process(m_axi_MM_video_out_AWREADY, ap_CS_fsm_state12, ap_CS_fsm_state3, burst_size_cast23_fu_325_p1, burst_size_cast_fu_363_p1)
    begin
        if ((m_axi_MM_video_out_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                m_axi_MM_video_out_AWLEN <= burst_size_cast_fu_363_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_MM_video_out_AWLEN <= burst_size_cast23_fu_325_p1;
            else 
                m_axi_MM_video_out_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_MM_video_out_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_MM_video_out_AWLOCK <= ap_const_lv2_0;
    m_axi_MM_video_out_AWPROT <= ap_const_lv3_0;
    m_axi_MM_video_out_AWQOS <= ap_const_lv4_0;
    m_axi_MM_video_out_AWREGION <= ap_const_lv4_0;
    m_axi_MM_video_out_AWSIZE <= ap_const_lv3_0;
    m_axi_MM_video_out_AWUSER <= ap_const_lv1_0;

    m_axi_MM_video_out_AWVALID_assign_proc : process(m_axi_MM_video_out_AWREADY, ap_CS_fsm_state12, ap_CS_fsm_state3)
    begin
        if ((((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((m_axi_MM_video_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            m_axi_MM_video_out_AWVALID <= ap_const_logic_1;
        else 
            m_axi_MM_video_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_MM_video_out_BREADY_assign_proc : process(m_axi_MM_video_out_BVALID, ap_CS_fsm_state11, invert_Y_read_reg_408)
    begin
        if (((not((((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_0)) or ((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (invert_Y_read_reg_408 = ap_const_lv1_0)) or (not((((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_0)) or ((m_axi_MM_video_out_BVALID = ap_const_logic_0) and (invert_Y_read_reg_408 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state11) and (invert_Y_read_reg_408 = ap_const_lv1_1)))) then 
            m_axi_MM_video_out_BREADY <= ap_const_logic_1;
        else 
            m_axi_MM_video_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_MM_video_out_RREADY <= ap_const_logic_0;
    m_axi_MM_video_out_WDATA <= reg_193;
    m_axi_MM_video_out_WID <= ap_const_lv1_0;
    m_axi_MM_video_out_WLAST <= ap_const_logic_0;
    m_axi_MM_video_out_WSTRB <= ap_const_lv4_F;
    m_axi_MM_video_out_WUSER <= ap_const_lv1_0;

    m_axi_MM_video_out_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln63_reg_476_pp1_iter1_reg, ap_enable_reg_pp0_iter2, icmp_ln69_reg_456_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((icmp_ln69_reg_456_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln63_reg_476_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            m_axi_MM_video_out_WVALID <= ap_const_logic_1;
        else 
            m_axi_MM_video_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln332_1_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln332_3_reg_435),32));

        sext_ln332_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln332_2_reg_440),32));

    shl_ln332_3_fu_292_p3 <= (add_ln332_fu_286_p2 & ap_const_lv2_0);
    shl_ln332_4_fu_252_p3 <= (DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read_reg_397 & ap_const_lv11_0);
    sub1_i_i_i_fu_278_p3 <= (sub2_i_i_i_fu_274_p2 & ap_const_lv9_0);
    sub2_i_i_i_fu_274_p2 <= std_logic_vector(unsigned(image_h_read_reg_403) - unsigned(DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read_reg_397));
    sub_ln60_1_fu_236_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln60_fu_233_p1));
    sub_ln60_fu_207_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(image_w_dout));
    trunc_ln65_fu_382_p1 <= phi_ln332_reg_182(9 - 1 downto 0);
    trunc_ln71_fu_344_p1 <= phi_ln332_1_reg_171(9 - 1 downto 0);
    zext_ln60_1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln60_2_reg_422),31));
    zext_ln60_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln60_1_reg_417),31));
    zext_ln63_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln332_reg_182),31));
    zext_ln65_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln65_fu_382_p1),32));
    zext_ln69_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln332_1_reg_171),31));
    zext_ln71_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln71_fu_344_p1),32));
end behav;
