// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DataMoverUnit_s2mm_32bits_DMAWriteMM (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_MM_video_out_AWVALID,
        m_axi_MM_video_out_AWREADY,
        m_axi_MM_video_out_AWADDR,
        m_axi_MM_video_out_AWID,
        m_axi_MM_video_out_AWLEN,
        m_axi_MM_video_out_AWSIZE,
        m_axi_MM_video_out_AWBURST,
        m_axi_MM_video_out_AWLOCK,
        m_axi_MM_video_out_AWCACHE,
        m_axi_MM_video_out_AWPROT,
        m_axi_MM_video_out_AWQOS,
        m_axi_MM_video_out_AWREGION,
        m_axi_MM_video_out_AWUSER,
        m_axi_MM_video_out_WVALID,
        m_axi_MM_video_out_WREADY,
        m_axi_MM_video_out_WDATA,
        m_axi_MM_video_out_WSTRB,
        m_axi_MM_video_out_WLAST,
        m_axi_MM_video_out_WID,
        m_axi_MM_video_out_WUSER,
        m_axi_MM_video_out_ARVALID,
        m_axi_MM_video_out_ARREADY,
        m_axi_MM_video_out_ARADDR,
        m_axi_MM_video_out_ARID,
        m_axi_MM_video_out_ARLEN,
        m_axi_MM_video_out_ARSIZE,
        m_axi_MM_video_out_ARBURST,
        m_axi_MM_video_out_ARLOCK,
        m_axi_MM_video_out_ARCACHE,
        m_axi_MM_video_out_ARPROT,
        m_axi_MM_video_out_ARQOS,
        m_axi_MM_video_out_ARREGION,
        m_axi_MM_video_out_ARUSER,
        m_axi_MM_video_out_RVALID,
        m_axi_MM_video_out_RREADY,
        m_axi_MM_video_out_RDATA,
        m_axi_MM_video_out_RLAST,
        m_axi_MM_video_out_RID,
        m_axi_MM_video_out_RUSER,
        m_axi_MM_video_out_RRESP,
        m_axi_MM_video_out_BVALID,
        m_axi_MM_video_out_BREADY,
        m_axi_MM_video_out_BRESP,
        m_axi_MM_video_out_BID,
        m_axi_MM_video_out_BUSER,
        ddr_buffer_out_dout,
        ddr_buffer_out_empty_n,
        ddr_buffer_out_read,
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_dout,
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n,
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read,
        image_h_dout,
        image_h_empty_n,
        image_h_read,
        image_w_dout,
        image_w_empty_n,
        image_w_read,
        invert_Y_dout,
        invert_Y_empty_n,
        invert_Y_read,
        axi_elt_dma_buffer_V_address0,
        axi_elt_dma_buffer_V_ce0,
        axi_elt_dma_buffer_V_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_pp0_stage0 = 15'd8;
parameter    ap_ST_fsm_state7 = 15'd16;
parameter    ap_ST_fsm_state8 = 15'd32;
parameter    ap_ST_fsm_state9 = 15'd64;
parameter    ap_ST_fsm_state10 = 15'd128;
parameter    ap_ST_fsm_state11 = 15'd256;
parameter    ap_ST_fsm_state12 = 15'd512;
parameter    ap_ST_fsm_pp1_stage0 = 15'd1024;
parameter    ap_ST_fsm_state16 = 15'd2048;
parameter    ap_ST_fsm_state17 = 15'd4096;
parameter    ap_ST_fsm_state18 = 15'd8192;
parameter    ap_ST_fsm_state19 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_MM_video_out_AWVALID;
input   m_axi_MM_video_out_AWREADY;
output  [31:0] m_axi_MM_video_out_AWADDR;
output  [0:0] m_axi_MM_video_out_AWID;
output  [31:0] m_axi_MM_video_out_AWLEN;
output  [2:0] m_axi_MM_video_out_AWSIZE;
output  [1:0] m_axi_MM_video_out_AWBURST;
output  [1:0] m_axi_MM_video_out_AWLOCK;
output  [3:0] m_axi_MM_video_out_AWCACHE;
output  [2:0] m_axi_MM_video_out_AWPROT;
output  [3:0] m_axi_MM_video_out_AWQOS;
output  [3:0] m_axi_MM_video_out_AWREGION;
output  [0:0] m_axi_MM_video_out_AWUSER;
output   m_axi_MM_video_out_WVALID;
input   m_axi_MM_video_out_WREADY;
output  [31:0] m_axi_MM_video_out_WDATA;
output  [3:0] m_axi_MM_video_out_WSTRB;
output   m_axi_MM_video_out_WLAST;
output  [0:0] m_axi_MM_video_out_WID;
output  [0:0] m_axi_MM_video_out_WUSER;
output   m_axi_MM_video_out_ARVALID;
input   m_axi_MM_video_out_ARREADY;
output  [31:0] m_axi_MM_video_out_ARADDR;
output  [0:0] m_axi_MM_video_out_ARID;
output  [31:0] m_axi_MM_video_out_ARLEN;
output  [2:0] m_axi_MM_video_out_ARSIZE;
output  [1:0] m_axi_MM_video_out_ARBURST;
output  [1:0] m_axi_MM_video_out_ARLOCK;
output  [3:0] m_axi_MM_video_out_ARCACHE;
output  [2:0] m_axi_MM_video_out_ARPROT;
output  [3:0] m_axi_MM_video_out_ARQOS;
output  [3:0] m_axi_MM_video_out_ARREGION;
output  [0:0] m_axi_MM_video_out_ARUSER;
input   m_axi_MM_video_out_RVALID;
output   m_axi_MM_video_out_RREADY;
input  [31:0] m_axi_MM_video_out_RDATA;
input   m_axi_MM_video_out_RLAST;
input  [0:0] m_axi_MM_video_out_RID;
input  [0:0] m_axi_MM_video_out_RUSER;
input  [1:0] m_axi_MM_video_out_RRESP;
input   m_axi_MM_video_out_BVALID;
output   m_axi_MM_video_out_BREADY;
input  [1:0] m_axi_MM_video_out_BRESP;
input  [0:0] m_axi_MM_video_out_BID;
input  [0:0] m_axi_MM_video_out_BUSER;
input  [31:0] ddr_buffer_out_dout;
input   ddr_buffer_out_empty_n;
output   ddr_buffer_out_read;
input  [20:0] DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_dout;
input   DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n;
output   DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read;
input  [20:0] image_h_dout;
input   image_h_empty_n;
output   image_h_read;
input  [31:0] image_w_dout;
input   image_w_empty_n;
output   image_w_read;
input  [0:0] invert_Y_dout;
input   invert_Y_empty_n;
output   invert_Y_read;
output  [8:0] axi_elt_dma_buffer_V_address0;
output   axi_elt_dma_buffer_V_ce0;
input  [31:0] axi_elt_dma_buffer_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_MM_video_out_AWVALID;
reg[31:0] m_axi_MM_video_out_AWADDR;
reg[31:0] m_axi_MM_video_out_AWLEN;
reg m_axi_MM_video_out_WVALID;
reg m_axi_MM_video_out_BREADY;
reg ddr_buffer_out_read;
reg DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read;
reg image_h_read;
reg image_w_read;
reg invert_Y_read;
reg[8:0] axi_elt_dma_buffer_V_address0;
reg axi_elt_dma_buffer_V_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    MM_video_out_blk_n_AW;
wire    ap_CS_fsm_state12;
reg    MM_video_out_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln63_reg_476;
reg   [0:0] icmp_ln63_reg_476_pp1_iter1_reg;
reg    MM_video_out_blk_n_B;
wire    ap_CS_fsm_state11;
reg   [0:0] invert_Y_read_reg_408;
wire    ap_CS_fsm_state3;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln69_reg_456;
reg   [0:0] icmp_ln69_reg_456_pp0_iter1_reg;
reg    ddr_buffer_out_blk_n;
reg    DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_blk_n;
reg    image_h_blk_n;
reg    image_w_blk_n;
reg    invert_Y_blk_n;
reg   [29:0] phi_ln332_1_reg_171;
reg   [29:0] phi_ln332_reg_182;
reg   [31:0] reg_193;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_state15_pp1_stage0_iter2;
reg    ap_block_state15_io;
reg    ap_block_pp1_stage0_11001;
reg   [31:0] ddr_buffer_out_read_reg_391;
reg   [20:0] DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read_reg_397;
reg   [20:0] image_h_read_reg_403;
reg   [0:0] tmp_reg_412;
reg   [29:0] trunc_ln60_1_reg_417;
reg   [29:0] trunc_ln60_2_reg_422;
wire   [30:0] burst_size_fu_245_p3;
reg   [30:0] burst_size_reg_427;
wire    ap_CS_fsm_state2;
reg   [29:0] trunc_ln332_3_reg_435;
reg   [29:0] trunc_ln332_2_reg_440;
wire   [29:0] add_ln69_fu_329_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln69_fu_339_p2;
wire   [29:0] add_ln63_fu_367_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln63_fu_377_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
wire   [31:0] zext_ln71_fu_348_p1;
wire   [31:0] zext_ln65_fu_386_p1;
wire  signed [31:0] sext_ln332_1_fu_315_p1;
wire  signed [31:0] sext_ln332_fu_353_p1;
wire   [31:0] burst_size_cast23_fu_325_p1;
reg    ap_block_state11;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] burst_size_cast_fu_363_p1;
wire    ap_block_pp1_stage0_01001;
reg    ap_block_state1;
wire   [31:0] sub_ln60_fu_207_p2;
wire   [30:0] zext_ln60_fu_233_p1;
wire   [30:0] sub_ln60_1_fu_236_p2;
wire   [30:0] zext_ln60_1_fu_242_p1;
wire   [31:0] shl_ln332_4_fu_252_p3;
wire   [31:0] add_ln332_2_fu_259_p2;
wire   [20:0] sub2_i_i_i_fu_274_p2;
wire   [29:0] sub1_i_i_i_fu_278_p3;
wire   [29:0] add_ln332_fu_286_p2;
wire   [31:0] shl_ln332_3_fu_292_p3;
wire   [31:0] add_ln332_1_fu_300_p2;
wire   [30:0] zext_ln69_fu_335_p1;
wire   [8:0] trunc_ln71_fu_344_p1;
wire   [30:0] zext_ln63_fu_373_p1;
wire   [8:0] trunc_ln65_fu_382_p1;
reg   [14:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd0)) | ((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd1))) & (1'b1 == ap_CS_fsm_state11))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln332_1_reg_171 <= 30'd0;
    end else if (((icmp_ln69_fu_339_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        phi_ln332_1_reg_171 <= add_ln69_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        phi_ln332_reg_182 <= 30'd0;
    end else if (((icmp_ln63_fu_377_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        phi_ln332_reg_182 <= add_ln63_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read_reg_397 <= DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_dout;
        ddr_buffer_out_read_reg_391 <= ddr_buffer_out_dout;
        image_h_read_reg_403 <= image_h_dout;
        invert_Y_read_reg_408 <= invert_Y_dout;
        tmp_reg_412 <= image_w_dout[32'd31];
        trunc_ln60_1_reg_417 <= {{sub_ln60_fu_207_p2[31:2]}};
        trunc_ln60_2_reg_422 <= {{image_w_dout[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        burst_size_reg_427 <= burst_size_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln63_reg_476 <= icmp_ln63_fu_377_p2;
        icmp_ln63_reg_476_pp1_iter1_reg <= icmp_ln63_reg_476;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln69_reg_456 <= icmp_ln69_fu_339_p2;
        icmp_ln69_reg_456_pp0_iter1_reg <= icmp_ln69_reg_456;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln63_reg_476 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln69_reg_456 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_193 <= axi_elt_dma_buffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (invert_Y_read_reg_408 == 1'd1))) begin
        trunc_ln332_2_reg_440 <= {{add_ln332_1_fu_300_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (invert_Y_read_reg_408 == 1'd0))) begin
        trunc_ln332_3_reg_435 <= {{add_ln332_2_fu_259_p2[31:2]}};
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_blk_n = DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n;
    end else begin
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_buffer_out_empty_n == 1'b0) | (1'b0 == DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (invert_Y_empty_n == 1'b0) | (image_w_empty_n == 1'b0) | (image_h_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read = 1'b1;
    end else begin
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12))) begin
        MM_video_out_blk_n_AW = m_axi_MM_video_out_AWREADY;
    end else begin
        MM_video_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (invert_Y_read_reg_408 == 1'd0)) | ((1'b1 == ap_CS_fsm_state11) & (invert_Y_read_reg_408 == 1'd1)))) begin
        MM_video_out_blk_n_B = m_axi_MM_video_out_BVALID;
    end else begin
        MM_video_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln69_reg_456_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln63_reg_476_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        MM_video_out_blk_n_W = m_axi_MM_video_out_WREADY;
    end else begin
        MM_video_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_339_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_377_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd0)) | ((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd1))) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd0)) | ((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd1))) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        axi_elt_dma_buffer_V_address0 = zext_ln65_fu_386_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        axi_elt_dma_buffer_V_address0 = zext_ln71_fu_348_p1;
    end else begin
        axi_elt_dma_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        axi_elt_dma_buffer_V_ce0 = 1'b1;
    end else begin
        axi_elt_dma_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr_buffer_out_blk_n = ddr_buffer_out_empty_n;
    end else begin
        ddr_buffer_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_buffer_out_empty_n == 1'b0) | (1'b0 == DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (invert_Y_empty_n == 1'b0) | (image_w_empty_n == 1'b0) | (image_h_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr_buffer_out_read = 1'b1;
    end else begin
        ddr_buffer_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        image_h_blk_n = image_h_empty_n;
    end else begin
        image_h_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_buffer_out_empty_n == 1'b0) | (1'b0 == DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (invert_Y_empty_n == 1'b0) | (image_w_empty_n == 1'b0) | (image_h_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        image_h_read = 1'b1;
    end else begin
        image_h_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        image_w_blk_n = image_w_empty_n;
    end else begin
        image_w_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_buffer_out_empty_n == 1'b0) | (1'b0 == DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (invert_Y_empty_n == 1'b0) | (image_w_empty_n == 1'b0) | (image_h_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        image_w_read = 1'b1;
    end else begin
        image_w_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        invert_Y_blk_n = invert_Y_empty_n;
    end else begin
        invert_Y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ddr_buffer_out_empty_n == 1'b0) | (1'b0 == DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (invert_Y_empty_n == 1'b0) | (image_w_empty_n == 1'b0) | (image_h_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        invert_Y_read = 1'b1;
    end else begin
        invert_Y_read = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_MM_video_out_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            m_axi_MM_video_out_AWADDR = sext_ln332_fu_353_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_MM_video_out_AWADDR = sext_ln332_1_fu_315_p1;
        end else begin
            m_axi_MM_video_out_AWADDR = 'bx;
        end
    end else begin
        m_axi_MM_video_out_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_MM_video_out_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            m_axi_MM_video_out_AWLEN = burst_size_cast_fu_363_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_MM_video_out_AWLEN = burst_size_cast23_fu_325_p1;
        end else begin
            m_axi_MM_video_out_AWLEN = 'bx;
        end
    end else begin
        m_axi_MM_video_out_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        m_axi_MM_video_out_AWVALID = 1'b1;
    end else begin
        m_axi_MM_video_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~(((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd0)) | ((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd1))) & (1'b1 == ap_CS_fsm_state11) & (invert_Y_read_reg_408 == 1'd0)) | (~(((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd0)) | ((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd1))) & (1'b1 == ap_CS_fsm_state11) & (invert_Y_read_reg_408 == 1'd1)))) begin
        m_axi_MM_video_out_BREADY = 1'b1;
    end else begin
        m_axi_MM_video_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln69_reg_456_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln63_reg_476_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        m_axi_MM_video_out_WVALID = 1'b1;
    end else begin
        m_axi_MM_video_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ddr_buffer_out_empty_n == 1'b0) | (1'b0 == DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (invert_Y_empty_n == 1'b0) | (image_w_empty_n == 1'b0) | (image_h_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (invert_Y_read_reg_408 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln69_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln69_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if ((~(((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd0)) | ((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd1))) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((m_axi_MM_video_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln63_fu_377_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln63_fu_377_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln332_1_fu_300_p2 = (ddr_buffer_out_read_reg_391 + shl_ln332_3_fu_292_p3);

assign add_ln332_2_fu_259_p2 = (ddr_buffer_out_read_reg_391 + shl_ln332_4_fu_252_p3);

assign add_ln332_fu_286_p2 = ($signed(sub1_i_i_i_fu_278_p3) + $signed(30'd1073741312));

assign add_ln63_fu_367_p2 = (phi_ln332_reg_182 + 30'd1);

assign add_ln69_fu_329_p2 = (phi_ln332_1_reg_171 + 30'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ddr_buffer_out_empty_n == 1'b0) | (1'b0 == DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (invert_Y_empty_n == 1'b0) | (image_w_empty_n == 1'b0) | (image_h_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state11 = (((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd0)) | ((m_axi_MM_video_out_BVALID == 1'b0) & (invert_Y_read_reg_408 == 1'd1)));
end

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((m_axi_MM_video_out_WREADY == 1'b0) & (icmp_ln63_reg_476_pp1_iter1_reg == 1'd1));
end

assign ap_block_state15_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_MM_video_out_WREADY == 1'b0) & (icmp_ln69_reg_456_pp0_iter1_reg == 1'd1));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign burst_size_cast23_fu_325_p1 = burst_size_reg_427;

assign burst_size_cast_fu_363_p1 = burst_size_reg_427;

assign burst_size_fu_245_p3 = ((tmp_reg_412[0:0] == 1'b1) ? sub_ln60_1_fu_236_p2 : zext_ln60_1_fu_242_p1);

assign icmp_ln63_fu_377_p2 = (($signed(zext_ln63_fu_373_p1) < $signed(burst_size_reg_427)) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_339_p2 = (($signed(zext_ln69_fu_335_p1) < $signed(burst_size_reg_427)) ? 1'b1 : 1'b0);

assign m_axi_MM_video_out_ARADDR = 32'd0;

assign m_axi_MM_video_out_ARBURST = 2'd0;

assign m_axi_MM_video_out_ARCACHE = 4'd0;

assign m_axi_MM_video_out_ARID = 1'd0;

assign m_axi_MM_video_out_ARLEN = 32'd0;

assign m_axi_MM_video_out_ARLOCK = 2'd0;

assign m_axi_MM_video_out_ARPROT = 3'd0;

assign m_axi_MM_video_out_ARQOS = 4'd0;

assign m_axi_MM_video_out_ARREGION = 4'd0;

assign m_axi_MM_video_out_ARSIZE = 3'd0;

assign m_axi_MM_video_out_ARUSER = 1'd0;

assign m_axi_MM_video_out_ARVALID = 1'b0;

assign m_axi_MM_video_out_AWBURST = 2'd0;

assign m_axi_MM_video_out_AWCACHE = 4'd0;

assign m_axi_MM_video_out_AWID = 1'd0;

assign m_axi_MM_video_out_AWLOCK = 2'd0;

assign m_axi_MM_video_out_AWPROT = 3'd0;

assign m_axi_MM_video_out_AWQOS = 4'd0;

assign m_axi_MM_video_out_AWREGION = 4'd0;

assign m_axi_MM_video_out_AWSIZE = 3'd0;

assign m_axi_MM_video_out_AWUSER = 1'd0;

assign m_axi_MM_video_out_RREADY = 1'b0;

assign m_axi_MM_video_out_WDATA = reg_193;

assign m_axi_MM_video_out_WID = 1'd0;

assign m_axi_MM_video_out_WLAST = 1'b0;

assign m_axi_MM_video_out_WSTRB = 4'd15;

assign m_axi_MM_video_out_WUSER = 1'd0;

assign sext_ln332_1_fu_315_p1 = $signed(trunc_ln332_3_reg_435);

assign sext_ln332_fu_353_p1 = $signed(trunc_ln332_2_reg_440);

assign shl_ln332_3_fu_292_p3 = {{add_ln332_fu_286_p2}, {2'd0}};

assign shl_ln332_4_fu_252_p3 = {{DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read_reg_397}, {11'd0}};

assign sub1_i_i_i_fu_278_p3 = {{sub2_i_i_i_fu_274_p2}, {9'd0}};

assign sub2_i_i_i_fu_274_p2 = (image_h_read_reg_403 - DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_read_reg_397);

assign sub_ln60_1_fu_236_p2 = (31'd0 - zext_ln60_fu_233_p1);

assign sub_ln60_fu_207_p2 = (32'd0 - image_w_dout);

assign trunc_ln65_fu_382_p1 = phi_ln332_reg_182[8:0];

assign trunc_ln71_fu_344_p1 = phi_ln332_1_reg_171[8:0];

assign zext_ln60_1_fu_242_p1 = trunc_ln60_2_reg_422;

assign zext_ln60_fu_233_p1 = trunc_ln60_1_reg_417;

assign zext_ln63_fu_373_p1 = phi_ln332_reg_182;

assign zext_ln65_fu_386_p1 = trunc_ln65_fu_382_p1;

assign zext_ln69_fu_335_p1 = phi_ln332_1_reg_171;

assign zext_ln71_fu_348_p1 = trunc_ln71_fu_344_p1;

endmodule //DataMoverUnit_s2mm_32bits_DMAWriteMM
