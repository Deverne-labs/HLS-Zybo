-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DataMoverUnit_s2mm_32bits_DataMover_s2mm_32bits is
port (
    m_axi_MM_video_out_AWVALID : OUT STD_LOGIC;
    m_axi_MM_video_out_AWREADY : IN STD_LOGIC;
    m_axi_MM_video_out_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_WVALID : OUT STD_LOGIC;
    m_axi_MM_video_out_WREADY : IN STD_LOGIC;
    m_axi_MM_video_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_WLAST : OUT STD_LOGIC;
    m_axi_MM_video_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_ARVALID : OUT STD_LOGIC;
    m_axi_MM_video_out_ARREADY : IN STD_LOGIC;
    m_axi_MM_video_out_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_MM_video_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_MM_video_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_RVALID : IN STD_LOGIC;
    m_axi_MM_video_out_RREADY : OUT STD_LOGIC;
    m_axi_MM_video_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_MM_video_out_RLAST : IN STD_LOGIC;
    m_axi_MM_video_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_BVALID : IN STD_LOGIC;
    m_axi_MM_video_out_BREADY : OUT STD_LOGIC;
    m_axi_MM_video_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_MM_video_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_MM_video_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    STR_video_in_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    STR_video_in_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    STR_video_in_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    STR_video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    STR_video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ddr_buffer_out : IN STD_LOGIC_VECTOR (31 downto 0);
    image_w : IN STD_LOGIC_VECTOR (31 downto 0);
    image_h : IN STD_LOGIC_VECTOR (31 downto 0);
    invert_X : IN STD_LOGIC_VECTOR (0 downto 0);
    invert_Y : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    STR_video_in_TVALID : IN STD_LOGIC;
    STR_video_in_TREADY : OUT STD_LOGIC;
    image_w_ap_vld : IN STD_LOGIC;
    invert_X_ap_vld : IN STD_LOGIC;
    ddr_buffer_out_ap_vld : IN STD_LOGIC;
    image_h_ap_vld : IN STD_LOGIC;
    invert_Y_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of DataMoverUnit_s2mm_32bits_DataMover_s2mm_32bits is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWVALID : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WVALID : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WLAST : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARVALID : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_RREADY : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_m_axi_MM_video_out_BREADY : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0 : STD_LOGIC_VECTOR (30 downto 0);
    signal dataflow_in_loop_S2M_U0_image_h : STD_LOGIC_VECTOR (20 downto 0);
    signal dataflow_in_loop_S2M_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_STR_video_in_TREADY : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_S2M_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_S2M_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component DataMoverUnit_s2mm_32bits_dataflow_in_loop_S2M IS
    port (
        STR_video_in_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        STR_video_in_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        STR_video_in_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        STR_video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        STR_video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        image_w : IN STD_LOGIC_VECTOR (31 downto 0);
        invert_X : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_AWVALID : OUT STD_LOGIC;
        m_axi_MM_video_out_AWREADY : IN STD_LOGIC;
        m_axi_MM_video_out_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_MM_video_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_MM_video_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_WVALID : OUT STD_LOGIC;
        m_axi_MM_video_out_WREADY : IN STD_LOGIC;
        m_axi_MM_video_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_out_WLAST : OUT STD_LOGIC;
        m_axi_MM_video_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_ARVALID : OUT STD_LOGIC;
        m_axi_MM_video_out_ARREADY : IN STD_LOGIC;
        m_axi_MM_video_out_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_MM_video_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_MM_video_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_MM_video_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_RVALID : IN STD_LOGIC;
        m_axi_MM_video_out_RREADY : OUT STD_LOGIC;
        m_axi_MM_video_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_MM_video_out_RLAST : IN STD_LOGIC;
        m_axi_MM_video_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_out_BVALID : IN STD_LOGIC;
        m_axi_MM_video_out_BREADY : OUT STD_LOGIC;
        m_axi_MM_video_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_MM_video_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_MM_video_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ddr_buffer_out : IN STD_LOGIC_VECTOR (31 downto 0);
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0 : IN STD_LOGIC_VECTOR (30 downto 0);
        image_h : IN STD_LOGIC_VECTOR (20 downto 0);
        invert_Y : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        image_w_ap_vld : IN STD_LOGIC;
        invert_X_ap_vld : IN STD_LOGIC;
        ddr_buffer_out_ap_vld : IN STD_LOGIC;
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_ap_vld : IN STD_LOGIC;
        image_h_ap_vld : IN STD_LOGIC;
        invert_Y_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        STR_video_in_TVALID : IN STD_LOGIC;
        STR_video_in_TREADY : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_S2M_U0 : component DataMoverUnit_s2mm_32bits_dataflow_in_loop_S2M
    port map (
        STR_video_in_TDATA => STR_video_in_TDATA,
        STR_video_in_TKEEP => STR_video_in_TKEEP,
        STR_video_in_TSTRB => STR_video_in_TSTRB,
        STR_video_in_TUSER => STR_video_in_TUSER,
        STR_video_in_TLAST => STR_video_in_TLAST,
        image_w => image_w,
        invert_X => invert_X,
        m_axi_MM_video_out_AWVALID => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWVALID,
        m_axi_MM_video_out_AWREADY => m_axi_MM_video_out_AWREADY,
        m_axi_MM_video_out_AWADDR => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWADDR,
        m_axi_MM_video_out_AWID => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWID,
        m_axi_MM_video_out_AWLEN => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLEN,
        m_axi_MM_video_out_AWSIZE => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWSIZE,
        m_axi_MM_video_out_AWBURST => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWBURST,
        m_axi_MM_video_out_AWLOCK => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLOCK,
        m_axi_MM_video_out_AWCACHE => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWCACHE,
        m_axi_MM_video_out_AWPROT => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWPROT,
        m_axi_MM_video_out_AWQOS => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWQOS,
        m_axi_MM_video_out_AWREGION => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWREGION,
        m_axi_MM_video_out_AWUSER => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWUSER,
        m_axi_MM_video_out_WVALID => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WVALID,
        m_axi_MM_video_out_WREADY => m_axi_MM_video_out_WREADY,
        m_axi_MM_video_out_WDATA => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WDATA,
        m_axi_MM_video_out_WSTRB => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WSTRB,
        m_axi_MM_video_out_WLAST => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WLAST,
        m_axi_MM_video_out_WID => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WID,
        m_axi_MM_video_out_WUSER => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WUSER,
        m_axi_MM_video_out_ARVALID => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARVALID,
        m_axi_MM_video_out_ARREADY => ap_const_logic_0,
        m_axi_MM_video_out_ARADDR => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARADDR,
        m_axi_MM_video_out_ARID => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARID,
        m_axi_MM_video_out_ARLEN => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARLEN,
        m_axi_MM_video_out_ARSIZE => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARSIZE,
        m_axi_MM_video_out_ARBURST => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARBURST,
        m_axi_MM_video_out_ARLOCK => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARLOCK,
        m_axi_MM_video_out_ARCACHE => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARCACHE,
        m_axi_MM_video_out_ARPROT => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARPROT,
        m_axi_MM_video_out_ARQOS => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARQOS,
        m_axi_MM_video_out_ARREGION => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARREGION,
        m_axi_MM_video_out_ARUSER => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_ARUSER,
        m_axi_MM_video_out_RVALID => ap_const_logic_0,
        m_axi_MM_video_out_RREADY => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_RREADY,
        m_axi_MM_video_out_RDATA => ap_const_lv32_0,
        m_axi_MM_video_out_RLAST => ap_const_logic_0,
        m_axi_MM_video_out_RID => ap_const_lv1_0,
        m_axi_MM_video_out_RUSER => ap_const_lv1_0,
        m_axi_MM_video_out_RRESP => ap_const_lv2_0,
        m_axi_MM_video_out_BVALID => m_axi_MM_video_out_BVALID,
        m_axi_MM_video_out_BREADY => dataflow_in_loop_S2M_U0_m_axi_MM_video_out_BREADY,
        m_axi_MM_video_out_BRESP => m_axi_MM_video_out_BRESP,
        m_axi_MM_video_out_BID => m_axi_MM_video_out_BID,
        m_axi_MM_video_out_BUSER => m_axi_MM_video_out_BUSER,
        ddr_buffer_out => ddr_buffer_out,
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0 => dataflow_in_loop_S2M_U0_DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0,
        image_h => dataflow_in_loop_S2M_U0_image_h,
        invert_Y => invert_Y,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        image_w_ap_vld => image_w_ap_vld,
        invert_X_ap_vld => invert_X_ap_vld,
        ddr_buffer_out_ap_vld => ddr_buffer_out_ap_vld,
        DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0_ap_vld => ap_const_logic_0,
        image_h_ap_vld => image_h_ap_vld,
        invert_Y_ap_vld => invert_Y_ap_vld,
        ap_start => dataflow_in_loop_S2M_U0_ap_start,
        STR_video_in_TVALID => STR_video_in_TVALID,
        STR_video_in_TREADY => dataflow_in_loop_S2M_U0_STR_video_in_TREADY,
        ap_done => dataflow_in_loop_S2M_U0_ap_done,
        ap_ready => dataflow_in_loop_S2M_U0_ap_ready,
        ap_idle => dataflow_in_loop_S2M_U0_ap_idle,
        ap_continue => dataflow_in_loop_S2M_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_S2M_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_S2M_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv32_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_in_loop_S2M_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_S2M_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv32_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_S2M_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_S2M_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;

    STR_video_in_TREADY <= dataflow_in_loop_S2M_U0_STR_video_in_TREADY;

    ap_done_assign_proc : process(dataflow_in_loop_S2M_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_S2M_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_in_loop_S2M_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((loop_dataflow_output_count = ap_const_lv32_0) and (ap_start = ap_const_logic_0) and (dataflow_in_loop_S2M_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_in_loop_S2M_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_S2M_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_continue <= ap_continue;
    ap_sync_done <= dataflow_in_loop_S2M_U0_ap_done;
    ap_sync_ready <= dataflow_in_loop_S2M_U0_ap_ready;
    bound_minus_1 <= std_logic_vector(unsigned(image_h) - unsigned(ap_const_lv32_1));
    dataflow_in_loop_S2M_U0_DataMover_s2mm_32bits_hls_stream_hls_axis_ap_uint_8_1ul_0ul_0ul_0_ap_uint_32_volatile_int_int_ap_uint_1_ap_uint_1_i_0 <= loop_dataflow_input_count(31 - 1 downto 0);

    dataflow_in_loop_S2M_U0_ap_continue_assign_proc : process(ap_continue, loop_dataflow_output_count, bound_minus_1)
    begin
        if ((not((loop_dataflow_output_count = bound_minus_1)) or (ap_continue = ap_const_logic_1))) then 
            dataflow_in_loop_S2M_U0_ap_continue <= ap_const_logic_1;
        else 
            dataflow_in_loop_S2M_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_in_loop_S2M_U0_ap_start <= ap_start;
    
    dataflow_in_loop_S2M_U0_image_h_proc : process(image_h)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable dataflow_in_loop_S2M_U0_image_h_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_15(5 - 1 downto 0);
        v0_cpy := image_h;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_15(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            for dataflow_in_loop_S2M_U0_image_h_i in 0 to 32-1 loop
                v0_cpy(dataflow_in_loop_S2M_U0_image_h_i) := image_h(32-1-dataflow_in_loop_S2M_U0_image_h_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        dataflow_in_loop_S2M_U0_image_h <= resvalue(21-1 downto 0);
    end process;

    dataflow_in_loop_S2M_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_S2M_U0_start_write <= ap_const_logic_0;
    m_axi_MM_video_out_ARADDR <= ap_const_lv32_0;
    m_axi_MM_video_out_ARBURST <= ap_const_lv2_0;
    m_axi_MM_video_out_ARCACHE <= ap_const_lv4_0;
    m_axi_MM_video_out_ARID <= ap_const_lv1_0;
    m_axi_MM_video_out_ARLEN <= ap_const_lv32_0;
    m_axi_MM_video_out_ARLOCK <= ap_const_lv2_0;
    m_axi_MM_video_out_ARPROT <= ap_const_lv3_0;
    m_axi_MM_video_out_ARQOS <= ap_const_lv4_0;
    m_axi_MM_video_out_ARREGION <= ap_const_lv4_0;
    m_axi_MM_video_out_ARSIZE <= ap_const_lv3_0;
    m_axi_MM_video_out_ARUSER <= ap_const_lv1_0;
    m_axi_MM_video_out_ARVALID <= ap_const_logic_0;
    m_axi_MM_video_out_AWADDR <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWADDR;
    m_axi_MM_video_out_AWBURST <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWBURST;
    m_axi_MM_video_out_AWCACHE <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWCACHE;
    m_axi_MM_video_out_AWID <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWID;
    m_axi_MM_video_out_AWLEN <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLEN;
    m_axi_MM_video_out_AWLOCK <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWLOCK;
    m_axi_MM_video_out_AWPROT <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWPROT;
    m_axi_MM_video_out_AWQOS <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWQOS;
    m_axi_MM_video_out_AWREGION <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWREGION;
    m_axi_MM_video_out_AWSIZE <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWSIZE;
    m_axi_MM_video_out_AWUSER <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWUSER;
    m_axi_MM_video_out_AWVALID <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_AWVALID;
    m_axi_MM_video_out_BREADY <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_BREADY;
    m_axi_MM_video_out_RREADY <= ap_const_logic_0;
    m_axi_MM_video_out_WDATA <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WDATA;
    m_axi_MM_video_out_WID <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WID;
    m_axi_MM_video_out_WLAST <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WLAST;
    m_axi_MM_video_out_WSTRB <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WSTRB;
    m_axi_MM_video_out_WUSER <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WUSER;
    m_axi_MM_video_out_WVALID <= dataflow_in_loop_S2M_U0_m_axi_MM_video_out_WVALID;
end behav;
